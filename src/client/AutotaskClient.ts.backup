import { AxiosInstance } from 'axios';
import axios from 'axios';
import winston from 'winston';
import { RequestHandler } from '../utils/requestHandler';
import { AutotaskAuth, PerformanceConfig, ConfigurationError } from '../types';
import {
  ActionTypes,
  AdditionalInvoiceFieldValues,
  Appointments,
  ArticleAttachments,
  ArticleConfigurationItemCategoryAssociations,
  ArticleNotes,
  ArticlePlainTextContent,
  ArticleTagAssociations,
  ArticleTicketAssociations,
  ArticleToArticleAssociations,
  ArticleToDocumentAssociations,
  AttachmentInfo,
  BillingCodes,
  BillingItemApprovalLevels,
  BillingItems,
  ChangeOrderCharges,
  ChangeRequestLinks,
  ChecklistLibraries,
  ChecklistLibraryChecklistItems,
  ClassificationIcons,
  ClientPortalUsers,
  ComanagedAssociations,
  Companies,
  CompanyAlerts,
  CompanyAttachments,
  CompanyCategories,
  CompanyLocations,
  CompanyNoteAttachments,
  CompanyNotes,
  CompanySiteConfigurations,
  CompanyTeams,
  CompanyToDos,
  ConfigurationItemAttachments,
  ConfigurationItemBillingProductAssociations,
  ConfigurationItemCategories,
  ConfigurationItemCategoryUdfAssociations,
  ConfigurationItemDnsRecords,
  ConfigurationItemNoteAttachments,
  ConfigurationItemNotes,
  ConfigurationItemRelatedItems,
  ConfigurationItemSslSubjectAlternativeName,
  ConfigurationItemTypes,
  ConfigurationItems,
  ContactBillingProductAssociations,
  ContactGroupContacts,
  ContactGroups,
  Contacts,
  ContractBillingRules,
  ContractBlockHourFactors,
  ContractBlocks,
  ContractCharges,
  ContractExclusionBillingCodes,
  ContractExclusionRoles,
  ContractExclusionSetExcludedRoles,
  ContractExclusionSetExcludedWorkTypes,
  ContractExclusionSets,
  ContractMilestones,
  ContractNoteAttachments,
  ContractNotes,
  ContractRates,
  ContractRetainers,
  ContractRoleCosts,
  ContractServiceAdjustments,
  ContractServiceBundleAdjustments,
  ContractServiceBundleUnits,
  ContractServiceBundles,
  ContractServiceUnits,
  ContractServices,
  ContractTicketPurchases,
  Contracts,
  Countries,
  Currencies,
  DeletedTaskActivityLogs,
  DeletedTicketActivityLogs,
  DeletedTicketLogs,
  Departments,
  DocumentAttachments,
  DocumentCategories,
  DocumentChecklistItems,
  DocumentChecklistLibraries,
  DocumentConfigurationItemAssociations,
  DocumentConfigurationItemCategoryAssociations,
  DocumentNotes,
  DocumentTagAssociations,
  DocumentTicketAssociations,
  DocumentToArticleAssociations,
  Documents,
  DomainRegistrars,
  ExpenseItemAttachments,
  ExpenseItems,
  ExpenseReportAttachments,
  ExpenseReports,
  HolidaySets,
  Holidays,
  InternalLocationWithBusinessHours,
  InternalLocations,
  InventoryItemSerialNumbers,
  InventoryItems,
  InventoryLocations,
  InventoryProducts,
  InventoryStockedItems,
  InventoryStockedItemsAdd,
  InventoryStockedItemsRemove,
  InventoryStockedItemsTransfer,
  InventoryTransfers,
  InvoiceTemplates,
  Invoices,
  KnowledgeBaseArticles,
  KnowledgeBaseCategories,
  Modules,
  NotificationHistory,
  Opportunities,
  OpportunityAttachments,
  OpportunityCategories,
  OrganizationalLevel1,
  OrganizationalLevel2,
  OrganizationalLevelAssociations,
  OrganizatonalResources,
  PaymentTerms,
  Phases,
  PriceListMaterialCodes,
  PriceListProductTiers,
  PriceListProducts,
  PriceListRoles,
  PriceListServiceBundles,
  PriceListServices,
  PriceListWorkTypeModifiers,
  ProductNotes,
  ProductTiers,
  ProductVendors,
  Products,
  ProjectAttachments,
  ProjectCharges,
  ProjectNoteAttachments,
  ProjectNotes,
  Projects,
  PurchaseApprovals,
  PurchaseOrderItemReceiving,
  PurchaseOrderItems,
  PurchaseOrders,
  QuoteItems,
  QuoteLocations,
  QuoteTemplates,
  Quotes,
  ResourceAttachments,
  ResourceDailyAvailabilities,
  ResourceRoleDepartments,
  ResourceRoleQueues,
  ResourceRoles,
  ResourceServiceDeskRoles,
  ResourceSkills,
  ResourceTimeOffAdditional,
  ResourceTimeOffApprovers,
  ResourceTimeOffBalances,
  Resources,
  Roles,
  SalesOrderAttachments,
  SalesOrders,
  ServiceBundleServices,
  ServiceBundles,
  ServiceCallTaskResources,
  ServiceCallTasks,
  ServiceCallTicketResources,
  ServiceCallTickets,
  ServiceCalls,
  ServiceLevelAgreementResults,
  Services,
  ShippingTypes,
  Skills,
  SubscriptionPeriods,
  Subscriptions,
  SurveyResults,
  Surveys,
  TagAliases,
  TagGroups,
  Tags,
  TaskAttachments,
  TaskNoteAttachments,
  TaskNotes,
  TaskPredecessors,
  TaskSecondaryResources,
  Tasks,
  TaxCategories,
  TaxRegions,
  Taxes,
  TicketAdditionalConfigurationItems,
  TicketAdditionalContacts,
  TicketAttachments,
  TicketCategories,
  TicketCategoryFieldDefaults,
  TicketChangeRequestApprovals,
  TicketCharges,
  TicketChecklistItems,
  TicketChecklistLibraries,
  TicketHistory,
  TicketNoteAttachments,
  TicketNotes,
  TicketRmaCredits,
  TicketSecondaryResources,
  TicketTagAssociations,
  Tickets,
  TimeEntries,
  TimeEntryAttachments,
  TimeOffRequests,
  TimeOffRequestsApprove,
  TimeOffRequestsReject,
  UserDefinedFieldDefinitions,
  UserDefinedFieldListItems,
  Version,
  WorkTypeModifiers,
} from '../entities';
import * as http from 'http';
import * as https from 'https';

// Load environment variables if available
try {
  require('dotenv').config();
} catch {
  // dotenv is optional, do nothing if not available
}

/**
 * Rate limiter to prevent overwhelming the API
 */
class RateLimiter {
  private requests: number[] = [];
  private readonly maxRequests: number;
  private readonly timeWindow: number = 1000; // 1 second

  constructor(requestsPerSecond: number) {
    this.maxRequests = requestsPerSecond;
  }

  async waitForSlot(): Promise<void> {
    const now = Date.now();

    // Remove requests older than 1 second
    this.requests = this.requests.filter(time => now - time < this.timeWindow);

    if (this.requests.length >= this.maxRequests) {
      // Wait until the oldest request is more than 1 second old
      const oldestRequest = this.requests[0];
      const waitTime = this.timeWindow - (now - oldestRequest);

      if (waitTime > 0) {
        await new Promise(resolve => setTimeout(resolve, waitTime));
        return this.waitForSlot(); // Recursive call to check again
      }
    }

    this.requests.push(now);
  }
}

/**
 * AutotaskClient - Main client for interacting with the Autotask REST API
 * 
 * This client provides access to all 210+ Autotask API entities through a unified interface.
 * It includes built-in rate limiting, performance optimizations, connection pooling,
 * and comprehensive error handling.
 * 
 * @example
 * ```typescript
 * const client = await AutotaskClient.create({
 *   username: 'your_username',
 *   integrationCode: 'your_integration_code', 
 *   secret: 'your_secret'
 * });
 * 
 * // Access any entity
 * const tickets = await client.tickets.list({ filter: 'status eq Open' });
 * const companies = await client.companies.list();
 * ```
 */
export class AutotaskClient {
  private axios: AxiosInstance;
  private requestHandler: RequestHandler;
  private rateLimiter: RateLimiter;
  private performanceConfig: Required<PerformanceConfig>;
  private logger: winston.Logger;

  // Primary business entities
  /** Companies entity - Organizations and companies in Autotask */
  public companies: Companies;
  /** Contacts entity - Individual contacts within companies */
  public contacts: Contacts;
  /** Tickets entity - Service tickets and support requests */
  public tickets: Tickets;
  /** Projects entity - Client projects and work orders */
  public projects: Projects;
  /** Opportunities entity - Sales opportunities and pipeline */
  public opportunities: Opportunities;
  /** Resources entity - Human resources and staff members */
  public resources: Resources;
  /** Tasks entity - Project tasks and work items */
  public tasks: Tasks;

  // File attachment entities for various core entities
  /** AttachmentInfo entity - Attachment information and metadata */
  public attachmentInfo: AttachmentInfo;
  /** CompanyAttachments entity - File attachments for companies */
  public companyAttachments: CompanyAttachments;
  /** TicketAttachments entity - File attachments for tickets */
  public ticketAttachments: TicketAttachments;
  /** ProjectAttachments entity - File attachments for projects */
  public projectAttachments: ProjectAttachments;
  /** TaskAttachments entity - File attachments for tasks */
  public taskAttachments: TaskAttachments;
  /** ResourceAttachments entity - File attachments for resources */
  public resourceAttachments: ResourceAttachments;
  /** DocumentAttachments entity - File attachments for documents */
  public documentAttachments: DocumentAttachments;
  /** ExpenseItemAttachments entity - File attachments for expense items */
  public expenseItemAttachments: ExpenseItemAttachments;
  /** ExpenseReportAttachments entity - File attachments for expense reports */
  public expenseReportAttachments: ExpenseReportAttachments;
  /** OpportunityAttachments entity - File attachments for opportunities */
  public opportunityAttachments: OpportunityAttachments;
  /** SalesOrderAttachments entity - File attachments for sales orders */
  public salesOrderAttachments: SalesOrderAttachments;
  /** TimeEntryAttachments entity - File attachments for time entries */
  public timeEntryAttachments: TimeEntryAttachments;

  // Note entities for various core entities
  /** CompanyNotes entity - Notes associated with companies */
  public companyNotes: CompanyNotes;
  /** TicketNotes entity - Notes for tickets */
  public ticketNotes: TicketNotes;
  /** ProjectNotes entity - Notes for projects */
  public projectNotes: ProjectNotes;
  /** TaskNotes entity - Notes for tasks */
  public taskNotes: TaskNotes;
  /** ContractNotes entity - Notes for contracts */
  public contractNotes: ContractNotes;
  /** DocumentNotes entity - Notes for documents */
  public documentNotes: DocumentNotes;
  /** ProductNotes entity - Notes for products */
  public productNotes: ProductNotes;
  /** CompanyNoteAttachments entity - File attachments for company notes */
  public companyNoteAttachments: CompanyNoteAttachments;
  /** TicketNoteAttachments entity - File attachments for ticket notes */
  public ticketNoteAttachments: TicketNoteAttachments;
  /** ProjectNoteAttachments entity - File attachments for project notes */
  public projectNoteAttachments: ProjectNoteAttachments;
  /** TaskNoteAttachments entity - File attachments for task notes */
  public taskNoteAttachments: TaskNoteAttachments;
  /** ContractNoteAttachments entity - File attachments for contract notes */
  public contractNoteAttachments: ContractNoteAttachments;
  /** ConfigurationItemNotes entity - Notes for configuration items */
  public configurationItemNotes: ConfigurationItemNotes;
  /** ConfigurationItemNoteAttachments entity - File attachments for configuration item notes */
  public configurationItemNoteAttachments: ConfigurationItemNoteAttachments;
  /** ArticleNotes entity - Notes for knowledge base articles */
  public articleNotes: ArticleNotes;

  // Contract and service-related entities
  /** Contracts entity - Service contracts and agreements */
  public contracts: Contracts;
  /** ContractBillingRules entity - Billing rules for contracts */
  public contractBillingRules: ContractBillingRules;
  /** ContractBlocks entity - Time blocks for contracts */
  public contractBlocks: ContractBlocks;
  /** ContractBlockHourFactors entity - Hour factors for contract blocks */
  public contractBlockHourFactors: ContractBlockHourFactors;
  /** ContractCharges entity - Charges associated with contracts */
  public contractCharges: ContractCharges;
  /** ContractExclusionBillingCodes entity - Billing codes excluded from contracts */
  public contractExclusionBillingCodes: ContractExclusionBillingCodes;
  /** ContractExclusionRoles entity - Roles excluded from contracts */
  public contractExclusionRoles: ContractExclusionRoles;
  /** ContractExclusionSets entity - Sets of exclusions for contracts */
  public contractExclusionSets: ContractExclusionSets;
  /** ContractExclusionSetExcludedRoles entity - Excluded roles within contract exclusion sets */
  public contractExclusionSetExcludedRoles: ContractExclusionSetExcludedRoles;
  /** ContractExclusionSetExcludedWorkTypes entity - Excluded work types within contract exclusion sets */
  public contractExclusionSetExcludedWorkTypes: ContractExclusionSetExcludedWorkTypes;
  /** ContractMilestones entity - Milestones for contracts */
  public contractMilestones: ContractMilestones;
  /** ContractRates entity - Billing rates for contracts */
  public contractRates: ContractRates;
  /** ContractRetainers entity - Retainers for contracts */
  public contractRetainers: ContractRetainers;
  /** ContractRoleCosts entity - Role costs for contracts */
  public contractRoleCosts: ContractRoleCosts;
  /** ContractServices entity - Services included in contracts */
  public contractServices: ContractServices;
  /** ContractServiceAdjustments entity - Adjustments to contract services */
  public contractServiceAdjustments: ContractServiceAdjustments;
  /** ContractServiceBundles entity - Service bundles within contracts */
  public contractServiceBundles: ContractServiceBundles;
  /** ContractServiceBundleAdjustments entity - Adjustments to contract service bundles */
  public contractServiceBundleAdjustments: ContractServiceBundleAdjustments;
  /** ContractServiceBundleUnits entity - Units for contract service bundles */
  public contractServiceBundleUnits: ContractServiceBundleUnits;
  /** ContractServiceUnits entity - Units for contract services */
  public contractServiceUnits: ContractServiceUnits;
  /** ContractTicketPurchases entity - Ticket purchases for contracts */
  public contractTicketPurchases: ContractTicketPurchases;
  /** Services entity - Individual services offered */
  public services: Services;
  /** ServiceBundles entity - Bundled service offerings */
  public serviceBundles: ServiceBundles;
  /** ServiceBundleServices entity - Services within service bundles */
  public serviceBundleServices: ServiceBundleServices;

  // Configuration and asset management entities
  /** ConfigurationItems entity - Configuration items and assets */
  public configurationItems: ConfigurationItems;
  /** ConfigurationItemAttachments entity - File attachments for configuration items */
  public configurationItemAttachments: ConfigurationItemAttachments;
  /** ConfigurationItemBillingProductAssociations entity - Associations between configuration items and billing products */
  public configurationItemBillingProductAssociations: ConfigurationItemBillingProductAssociations;
  /** ConfigurationItemCategories entity - Categories for configuration items */
  public configurationItemCategories: ConfigurationItemCategories;
  /** ConfigurationItemCategoryUdfAssociations entity - UDF associations for configuration item categories */
  public configurationItemCategoryUdfAssociations: ConfigurationItemCategoryUdfAssociations;
  /** ConfigurationItemDnsRecords entity - DNS records for configuration items */
  public configurationItemDnsRecords: ConfigurationItemDnsRecords;
  /** ConfigurationItemRelatedItems entity - Related items for configuration items */
  public configurationItemRelatedItems: ConfigurationItemRelatedItems;
  /** ConfigurationItemSslSubjectAlternativeName entity - SSL subject alternative names for configuration items */
  public configurationItemSslSubjectAlternativeName: ConfigurationItemSslSubjectAlternativeName;
  /** ConfigurationItemTypes entity - Types of configuration items */
  public configurationItemTypes: ConfigurationItemTypes;

  // Financial and billing entities
  /** BillingCodes entity - Billing codes for time and expense tracking */
  public billingCodes: BillingCodes;
  /** BillingItems entity - Billing items for invoicing */
  public billingItems: BillingItems;
  /** BillingItemApprovalLevels entity - Approval levels for billing items */
  public billingItemApprovalLevels: BillingItemApprovalLevels;
  /** Invoices entity - Customer invoices and billing */
  public invoices: Invoices;
  /** InvoiceTemplates entity - Templates for generating invoices */
  public invoiceTemplates: InvoiceTemplates;
  /** Quotes entity - Customer quotes and estimates */
  public quotes: Quotes;
  /** QuoteItems entity - Line items within quotes */
  public quoteItems: QuoteItems;
  /** QuoteLocations entity - Location information for quotes */
  public quoteLocations: QuoteLocations;
  /** QuoteTemplates entity - Templates for generating quotes */
  public quoteTemplates: QuoteTemplates;
  /** PurchaseOrders entity - Purchase orders for procurement */
  public purchaseOrders: PurchaseOrders;
  /** PurchaseOrderItems entity - Items within purchase orders */
  public purchaseOrderItems: PurchaseOrderItems;
  /** PurchaseOrderItemReceiving entity - Receiving records for purchase order items */
  public purchaseOrderItemReceiving: PurchaseOrderItemReceiving;
  /** PurchaseApprovals entity - Approvals for purchase orders */
  public purchaseApprovals: PurchaseApprovals;
  /** ChangeOrderCharges entity - Charges for change orders */
  public changeOrderCharges: ChangeOrderCharges;
  /** Taxes entity - Tax rates and calculations */
  public taxes: Taxes;
  /** TaxCategories entity - Categories for tax calculations */
  public taxCategories: TaxCategories;
  /** TaxRegions entity - Geographic regions for tax purposes */
  public taxRegions: TaxRegions;
  /** Currencies entity - Available currencies for financial transactions */
  public currencies: Currencies;
  /** PaymentTerms entity - Available payment terms for invoicing */
  public paymentTerms: PaymentTerms;

  // Inventory and product management entities
  /** InventoryItems entity - Items in inventory */
  public inventoryItems: InventoryItems;
  /** InventoryItemSerialNumbers entity - Serial numbers for inventory items */
  public inventoryItemSerialNumbers: InventoryItemSerialNumbers;
  /** InventoryLocations entity - Physical locations for inventory storage */
  public inventoryLocations: InventoryLocations;
  /** InventoryProducts entity - Products available in inventory */
  public inventoryProducts: InventoryProducts;
  /** InventoryStockedItems entity - Items currently stocked in inventory */
  public inventoryStockedItems: InventoryStockedItems;
  /** InventoryStockedItemsAdd entity - Add items to inventory stock */
  public inventoryStockedItemsAdd: InventoryStockedItemsAdd;
  /** InventoryStockedItemsRemove entity - Remove items from inventory stock */
  public inventoryStockedItemsRemove: InventoryStockedItemsRemove;
  /** InventoryStockedItemsTransfer entity - Transfer items between inventory locations */
  public inventoryStockedItemsTransfer: InventoryStockedItemsTransfer;
  /** InventoryTransfers entity - Transfer records for inventory items */
  public inventoryTransfers: InventoryTransfers;
  /** Products entity - Products and services offered */
  public products: Products;
  /** ProductTiers entity - Pricing tiers for products */
  public productTiers: ProductTiers;
  /** ProductVendors entity - Vendor information for products */
  public productVendors: ProductVendors;

  // Expense management entities
  /** ExpenseItems entity - Individual expense items */
  public expenseItems: ExpenseItems;
  /** ExpenseReports entity - Expense reports for reimbursement */
  public expenseReports: ExpenseReports;

  // Time tracking and scheduling entities
  /** TimeEntries entity - Time tracking entries for billing */
  public timeEntries: TimeEntries;
  /** Appointments entity - Calendar appointments and scheduling */
  public appointments: Appointments;
  /** Holidays entity - Holiday calendar entries */
  public holidays: Holidays;
  /** HolidaySets entity - Sets of holidays for different regions */
  public holidaySets: HolidaySets;
  /** ResourceDailyAvailabilities entity - Daily availability schedules for resources */
  public resourceDailyAvailabilities: ResourceDailyAvailabilities;
  /** ResourceTimeOffAdditional entity - Additional time off information for resources */
  public resourceTimeOffAdditional: ResourceTimeOffAdditional;
  /** ResourceTimeOffApprovers entity - Approvers for resource time off requests */
  public resourceTimeOffApprovers: ResourceTimeOffApprovers;
  /** ResourceTimeOffBalances entity - Time off balances for resources */
  public resourceTimeOffBalances: ResourceTimeOffBalances;
  /** TimeOffRequests entity - Requests for time off */
  public timeOffRequests: TimeOffRequests;
  /** TimeOffRequestsApprove entity - Approve time off requests */
  public timeOffRequestsApprove: TimeOffRequestsApprove;
  /** TimeOffRequestsReject entity - Reject time off requests */
  public timeOffRequestsReject: TimeOffRequestsReject;

  // Service call management entities
  /** ServiceCalls entity - Service call dispatching and management */
  public serviceCalls: ServiceCalls;
  /** ServiceCallTasks entity - Tasks within service calls */
  public serviceCallTasks: ServiceCallTasks;
  /** ServiceCallTaskResources entity - Resource assignments for service call tasks */
  public serviceCallTaskResources: ServiceCallTaskResources;
  /** ServiceCallTickets entity - Tickets associated with service calls */
  public serviceCallTickets: ServiceCallTickets;
  /** ServiceCallTicketResources entity - Resource assignments for service call tickets */
  public serviceCallTicketResources: ServiceCallTicketResources;

  // Knowledge base and documentation entities
  /** KnowledgeBaseArticles entity - Knowledge base articles and documentation */
  public knowledgeBaseArticles: KnowledgeBaseArticles;
  /** KnowledgeBaseCategories entity - Categories for knowledge base articles */
  public knowledgeBaseCategories: KnowledgeBaseCategories;
  /** Documents entity - Documents and files in the system */
  public documents: Documents;
  /** DocumentCategories entity - Categories for organizing documents */
  public documentCategories: DocumentCategories;
  /** DocumentChecklistItems entity - Checklist items for documents */
  public documentChecklistItems: DocumentChecklistItems;
  /** DocumentChecklistLibraries entity - Checklist libraries for documents */
  public documentChecklistLibraries: DocumentChecklistLibraries;
  /** DocumentConfigurationItemAssociations entity - Associations between documents and configuration items */
  public documentConfigurationItemAssociations: DocumentConfigurationItemAssociations;
  /** DocumentConfigurationItemCategoryAssociations entity - Associations between documents and configuration item categories */
  public documentConfigurationItemCategoryAssociations: DocumentConfigurationItemCategoryAssociations;
  /** DocumentTagAssociations entity - Tag associations for documents */
  public documentTagAssociations: DocumentTagAssociations;
  /** DocumentTicketAssociations entity - Associations between documents and tickets */
  public documentTicketAssociations: DocumentTicketAssociations;
  /** DocumentToArticleAssociations entity - Associations between documents and articles */
  public documentToArticleAssociations: DocumentToArticleAssociations;
  /** ArticleAttachments entity - File attachments for knowledge base articles */
  public articleAttachments: ArticleAttachments;
  /** ArticleConfigurationItemCategoryAssociations entity - Associations between articles and configuration item categories */
  public articleConfigurationItemCategoryAssociations: ArticleConfigurationItemCategoryAssociations;
  /** ArticlePlainTextContent entity - Plain text content of knowledge base articles */
  public articlePlainTextContent: ArticlePlainTextContent;
  /** ArticleTagAssociations entity - Tag associations for articles */
  public articleTagAssociations: ArticleTagAssociations;
  /** ArticleTicketAssociations entity - Associations between articles and tickets */
  public articleTicketAssociations: ArticleTicketAssociations;
  /** ArticleToArticleAssociations entity - Associations between articles */
  public articleToArticleAssociations: ArticleToArticleAssociations;
  /** ArticleToDocumentAssociations entity - Associations between articles and documents */
  public articleToDocumentAssociations: ArticleToDocumentAssociations;

  // Sales and opportunity management entities
  /** SalesOrders entity - Customer sales orders */
  public salesOrders: SalesOrders;
  /** OpportunityCategories entity - Categories for organizing opportunities */
  public opportunityCategories: OpportunityCategories;

  // Pricing and rate management entities
  /** PriceListMaterialCodes entity - Material codes in price lists */
  public priceListMaterialCodes: PriceListMaterialCodes;
  /** PriceListProducts entity - Products in price lists */
  public priceListProducts: PriceListProducts;
  /** PriceListProductTiers entity - Product tiers in price lists */
  public priceListProductTiers: PriceListProductTiers;
  /** PriceListRoles entity - Roles in price lists */
  public priceListRoles: PriceListRoles;
  /** PriceListServices entity - Services in price lists */
  public priceListServices: PriceListServices;
  /** PriceListServiceBundles entity - Service bundles in price lists */
  public priceListServiceBundles: PriceListServiceBundles;
  /** PriceListWorkTypeModifiers entity - Work type modifiers in price lists */
  public priceListWorkTypeModifiers: PriceListWorkTypeModifiers;

  // Organizational structure entities
  /** Departments entity - Organizational departments */
  public departments: Departments;
  /** OrganizationalLevel1 entity - First level of organizational hierarchy */
  public organizationalLevel1: OrganizationalLevel1;
  /** OrganizationalLevel2 entity - Second level of organizational hierarchy */
  public organizationalLevel2: OrganizationalLevel2;
  /** OrganizationalLevelAssociations entity - Associations between organizational levels */
  public organizationalLevelAssociations: OrganizationalLevelAssociations;
  /** OrganizatonalResources entity - Resources organized by organizational structure */
  public organizatonalResources: OrganizatonalResources;
  /** InternalLocations entity - Internal office locations */
  public internalLocations: InternalLocations;
  /** InternalLocationWithBusinessHours entity - Internal locations with business hours information */
  public internalLocationWithBusinessHours: InternalLocationWithBusinessHours;
  /** CompanyLocations entity - Physical locations associated with companies */
  public companyLocations: CompanyLocations;
  /** CompanySiteConfigurations entity - Site configurations for companies */
  public companySiteConfigurations: CompanySiteConfigurations;
  /** CompanyTeams entity - Teams associated with companies */
  public companyTeams: CompanyTeams;
  /** CompanyToDos entity - To-do items associated with companies */
  public companyToDos: CompanyToDos;

  // Reference and lookup entities
  /** Countries entity - List of countries for localization */
  public countries: Countries;
  /** Roles entity - System roles and permissions */
  public roles: Roles;
  /** Skills entity - Available skills for resource assignment */
  public skills: Skills;
  /** ResourceSkills entity - Skills associated with resources */
  public resourceSkills: ResourceSkills;
  /** ResourceRoles entity - Role assignments for resources */
  public resourceRoles: ResourceRoles;
  /** ResourceRoleDepartments entity - Department assignments for resource roles */
  public resourceRoleDepartments: ResourceRoleDepartments;
  /** ResourceRoleQueues entity - Queue assignments for resource roles */
  public resourceRoleQueues: ResourceRoleQueues;
  /** ResourceServiceDeskRoles entity - Service desk role assignments for resources */
  public resourceServiceDeskRoles: ResourceServiceDeskRoles;
  /** ActionTypes entity - Lookup entity for action types */
  public actionTypes: ActionTypes;
  /** ClassificationIcons entity - Icons for classification purposes */
  public classificationIcons: ClassificationIcons;
  /** ShippingTypes entity - Available shipping methods */
  public shippingTypes: ShippingTypes;
  /** Modules entity - System modules and features */
  public modules: Modules;
  /** SubscriptionPeriods entity - Billing periods for subscriptions */
  public subscriptionPeriods: SubscriptionPeriods;
  /** Subscriptions entity - Recurring service subscriptions */
  public subscriptions: Subscriptions;
  /** DomainRegistrars entity - Domain registrar information */
  public domainRegistrars: DomainRegistrars;
  /** WorkTypeModifiers entity - Modifiers for different types of work */
  public workTypeModifiers: WorkTypeModifiers;
  /** Phases entity - Project and task phases */
  public phases: Phases;
  /** Version entity - API version information */
  public version: Version;

  // Ticket management entities
  /** TicketCategories entity - Categories for organizing tickets */
  public ticketCategories: TicketCategories;
  /** TicketCategoryFieldDefaults entity - Default field values for ticket categories */
  public ticketCategoryFieldDefaults: TicketCategoryFieldDefaults;
  /** TicketAdditionalConfigurationItems entity - Additional configuration items associated with tickets */
  public ticketAdditionalConfigurationItems: TicketAdditionalConfigurationItems;
  /** TicketAdditionalContacts entity - Additional contacts associated with tickets */
  public ticketAdditionalContacts: TicketAdditionalContacts;
  /** TicketChangeRequestApprovals entity - Approvals for ticket change requests */
  public ticketChangeRequestApprovals: TicketChangeRequestApprovals;
  /** TicketCharges entity - Charges associated with tickets */
  public ticketCharges: TicketCharges;
  /** TicketChecklistItems entity - Checklist items for tickets */
  public ticketChecklistItems: TicketChecklistItems;
  /** TicketChecklistLibraries entity - Checklist libraries for tickets */
  public ticketChecklistLibraries: TicketChecklistLibraries;
  /** TicketHistory entity - Historical changes to tickets */
  public ticketHistory: TicketHistory;
  /** TicketRmaCredits entity - RMA credits associated with tickets */
  public ticketRmaCredits: TicketRmaCredits;
  /** TicketSecondaryResources entity - Secondary resource assignments for tickets */
  public ticketSecondaryResources: TicketSecondaryResources;
  /** TicketTagAssociations entity - Tag associations for tickets */
  public ticketTagAssociations: TicketTagAssociations;

  // Task and project management entities
  /** TaskPredecessors entity - Predecessor relationships between tasks */
  public taskPredecessors: TaskPredecessors;
  /** TaskSecondaryResources entity - Secondary resource assignments for tasks */
  public taskSecondaryResources: TaskSecondaryResources;
  /** ProjectCharges entity - Charges associated with projects */
  public projectCharges: ProjectCharges;

  // Client portal entities
  /** ClientPortalUsers entity - Users with access to the client portal */
  public clientPortalUsers: ClientPortalUsers;

  // Tagging and classification entities
  /** Tags entity - Tags for categorizing and organizing data */
  public tags: Tags;
  /** TagGroups entity - Groups for organizing tags */
  public tagGroups: TagGroups;
  /** TagAliases entity - Alternative names for tags */
  public tagAliases: TagAliases;

  // Survey and feedback entities
  /** Surveys entity - Customer satisfaction surveys */
  public surveys: Surveys;
  /** SurveyResults entity - Results from customer satisfaction surveys */
  public surveyResults: SurveyResults;

  // Notification and alert entities
  /** NotificationHistory entity - History of system notifications */
  public notificationHistory: NotificationHistory;
  /** CompanyAlerts entity - Alerts associated with companies */
  public companyAlerts: CompanyAlerts;

  // Checklist and template entities
  /** ChecklistLibraries entity - Libraries of reusable checklists */
  public checklistLibraries: ChecklistLibraries;
  /** ChecklistLibraryChecklistItems entity - Items within checklist libraries */
  public checklistLibraryChecklistItems: ChecklistLibraryChecklistItems;

  // User-defined field entities
  /** UserDefinedFieldDefinitions entity - Definitions for user-defined fields */
  public userDefinedFieldDefinitions: UserDefinedFieldDefinitions;
  /** UserDefinedFieldListItems entity - List items for user-defined fields */
  public userDefinedFieldListItems: UserDefinedFieldListItems;

  // Association and relationship entities
  /** ComanagedAssociations entity - Co-managed service associations */
  public comanagedAssociations: ComanagedAssociations;
  /** ContactBillingProductAssociations entity - Associations between contacts and billing products */
  public contactBillingProductAssociations: ContactBillingProductAssociations;
  /** ContactGroups entity - Groups for organizing contacts */
  public contactGroups: ContactGroups;
  /** ContactGroupContacts entity - Contacts within contact groups */
  public contactGroupContacts: ContactGroupContacts;
  /** ChangeRequestLinks entity - Links between change requests */
  public changeRequestLinks: ChangeRequestLinks;
  /** AdditionalInvoiceFieldValues entity - Additional invoice field values */
  public additionalInvoiceFieldValues: AdditionalInvoiceFieldValues;
  /** ServiceLevelAgreementResults entity - Results and performance metrics for SLAs */
  public serviceLevelAgreementResults: ServiceLevelAgreementResults;

  // Audit and log entities
  /** DeletedTaskActivityLogs entity - Audit logs for deleted task activities */
  public deletedTaskActivityLogs: DeletedTaskActivityLogs;
  /** DeletedTicketActivityLogs entity - Audit logs for deleted ticket activities */
  public deletedTicketActivityLogs: DeletedTicketActivityLogs;
  /** DeletedTicketLogs entity - Audit logs for deleted tickets */
  public deletedTicketLogs: DeletedTicketLogs;

  // Special purpose and system entities

  // Backward compatibility aliases
  /** @deprecated Use companies instead */
  public get accounts() { return this.companies; }
  /** @deprecated Use ticketNotes, companyNotes, etc. instead */
  public get notes() { return this.ticketNotes; }
  /** @deprecated Use ticketAttachments, companyAttachments, etc. instead */
  public get attachments() { return this.ticketAttachments; }
  /** @deprecated Use contractServiceAdjustments instead */
  public get contractAdjustments() { return this.contractServiceAdjustments; }
  /** @deprecated Use contractExclusionSets instead */
  public get contractExclusions() { return this.contractExclusionSets; }
  /** @deprecated Use expenseItems instead */
  public get expenses() { return this.expenseItems; }
  /** @deprecated Not directly available - use specific status lookup entities */
  public get ticketStatuses() { return this.tickets; }
  /** @deprecated Not directly available - use specific priority lookup entities */
  public get ticketPriorities() { return this.tickets; }
  /** @deprecated Not directly available - use specific source lookup entities */
  public get ticketSources() { return this.tickets; }

  private constructor(
    private config: AutotaskAuth,
    axiosInstance: AxiosInstance,
    performanceConfig?: PerformanceConfig
  ) {
    // Set default performance configuration
    this.performanceConfig = {
      timeout: 30000,
      maxConcurrentRequests: 10,
      enableConnectionPooling: true,
      maxContentLength: 50 * 1024 * 1024, // 50MB
      maxBodyLength: 10 * 1024 * 1024, // 10MB
      enableCompression: true,
      requestsPerSecond: 5,
      keepAliveTimeout: 30000,
      ...performanceConfig,
    };

    this.rateLimiter = new RateLimiter(
      this.performanceConfig.requestsPerSecond
    );

    this.logger = winston.createLogger({
      level: 'info',
      transports: [new winston.transports.Console()],
    });
    this.axios = axiosInstance;
    this.requestHandler = new RequestHandler(this.axios, this.logger, {
      timeout: this.performanceConfig.timeout,
      retries: 3,
      baseDelay: 1000,
    });

    // Setup rate limiting interceptor
    this.setupRateLimitingInterceptor();

    // Initialize all entities with proper dependency injection
    // Primary business entities
    this.companies = new Companies(this.axios, this.logger);
    this.contacts = new Contacts(this.axios, this.logger);
    this.tickets = new Tickets(this.axios, this.logger);
    this.projects = new Projects(this.axios, this.logger);
    this.opportunities = new Opportunities(this.axios, this.logger);
    this.resources = new Resources(this.axios, this.logger);
    this.tasks = new Tasks(this.axios, this.logger);

    // File attachment entities for various core entities
    this.attachmentInfo = new AttachmentInfo(this.axios, this.logger);
    this.companyAttachments = new CompanyAttachments(this.axios, this.logger);
    this.ticketAttachments = new TicketAttachments(this.axios, this.logger);
    this.projectAttachments = new ProjectAttachments(this.axios, this.logger);
    this.taskAttachments = new TaskAttachments(this.axios, this.logger);
    this.resourceAttachments = new ResourceAttachments(this.axios, this.logger);
    this.documentAttachments = new DocumentAttachments(this.axios, this.logger);
    this.expenseItemAttachments = new ExpenseItemAttachments(this.axios, this.logger);
    this.expenseReportAttachments = new ExpenseReportAttachments(this.axios, this.logger);
    this.opportunityAttachments = new OpportunityAttachments(this.axios, this.logger);
    this.salesOrderAttachments = new SalesOrderAttachments(this.axios, this.logger);
    this.timeEntryAttachments = new TimeEntryAttachments(this.axios, this.logger);

    // Note entities for various core entities
    this.companyNotes = new CompanyNotes(this.axios, this.logger);
    this.ticketNotes = new TicketNotes(this.axios, this.logger);
    this.projectNotes = new ProjectNotes(this.axios, this.logger);
    this.taskNotes = new TaskNotes(this.axios, this.logger);
    this.contractNotes = new ContractNotes(this.axios, this.logger);
    this.documentNotes = new DocumentNotes(this.axios, this.logger);
    this.productNotes = new ProductNotes(this.axios, this.logger);
    this.companyNoteAttachments = new CompanyNoteAttachments(this.axios, this.logger);
    this.ticketNoteAttachments = new TicketNoteAttachments(this.axios, this.logger);
    this.projectNoteAttachments = new ProjectNoteAttachments(this.axios, this.logger);
    this.taskNoteAttachments = new TaskNoteAttachments(this.axios, this.logger);
    this.contractNoteAttachments = new ContractNoteAttachments(this.axios, this.logger);
    this.configurationItemNotes = new ConfigurationItemNotes(this.axios, this.logger);
    this.configurationItemNoteAttachments = new ConfigurationItemNoteAttachments(this.axios, this.logger);
    this.articleNotes = new ArticleNotes(this.axios, this.logger);

    // Contract and service-related entities
    this.contracts = new Contracts(this.axios, this.logger);
    this.contractBillingRules = new ContractBillingRules(this.axios, this.logger);
    this.contractBlocks = new ContractBlocks(this.axios, this.logger);
    this.contractBlockHourFactors = new ContractBlockHourFactors(this.axios, this.logger);
    this.contractCharges = new ContractCharges(this.axios, this.logger);
    this.contractExclusionBillingCodes = new ContractExclusionBillingCodes(this.axios, this.logger);
    this.contractExclusionRoles = new ContractExclusionRoles(this.axios, this.logger);
    this.contractExclusionSets = new ContractExclusionSets(this.axios, this.logger);
    this.contractExclusionSetExcludedRoles = new ContractExclusionSetExcludedRoles(this.axios, this.logger);
    this.contractExclusionSetExcludedWorkTypes = new ContractExclusionSetExcludedWorkTypes(this.axios, this.logger);
    this.contractMilestones = new ContractMilestones(this.axios, this.logger);
    this.contractRates = new ContractRates(this.axios, this.logger);
    this.contractRetainers = new ContractRetainers(this.axios, this.logger);
    this.contractRoleCosts = new ContractRoleCosts(this.axios, this.logger);
    this.contractServices = new ContractServices(this.axios, this.logger);
    this.contractServiceAdjustments = new ContractServiceAdjustments(this.axios, this.logger);
    this.contractServiceBundles = new ContractServiceBundles(this.axios, this.logger);
    this.contractServiceBundleAdjustments = new ContractServiceBundleAdjustments(this.axios, this.logger);
    this.contractServiceBundleUnits = new ContractServiceBundleUnits(this.axios, this.logger);
    this.contractServiceUnits = new ContractServiceUnits(this.axios, this.logger);
    this.contractTicketPurchases = new ContractTicketPurchases(this.axios, this.logger);
    this.services = new Services(this.axios, this.logger);
    this.serviceBundles = new ServiceBundles(this.axios, this.logger);
    this.serviceBundleServices = new ServiceBundleServices(this.axios, this.logger);

    // Configuration and asset management entities
    this.configurationItems = new ConfigurationItems(this.axios, this.logger);
    this.configurationItemAttachments = new ConfigurationItemAttachments(this.axios, this.logger);
    this.configurationItemBillingProductAssociations = new ConfigurationItemBillingProductAssociations(this.axios, this.logger);
    this.configurationItemCategories = new ConfigurationItemCategories(this.axios, this.logger);
    this.configurationItemCategoryUdfAssociations = new ConfigurationItemCategoryUdfAssociations(this.axios, this.logger);
    this.configurationItemDnsRecords = new ConfigurationItemDnsRecords(this.axios, this.logger);
    this.configurationItemRelatedItems = new ConfigurationItemRelatedItems(this.axios, this.logger);
    this.configurationItemSslSubjectAlternativeName = new ConfigurationItemSslSubjectAlternativeName(this.axios, this.logger);
    this.configurationItemTypes = new ConfigurationItemTypes(this.axios, this.logger);

    // Financial and billing entities
    this.billingCodes = new BillingCodes(this.axios, this.logger);
    this.billingItems = new BillingItems(this.axios, this.logger);
    this.billingItemApprovalLevels = new BillingItemApprovalLevels(this.axios, this.logger);
    this.invoices = new Invoices(this.axios, this.logger);
    this.invoiceTemplates = new InvoiceTemplates(this.axios, this.logger);
    this.quotes = new Quotes(this.axios, this.logger);
    this.quoteItems = new QuoteItems(this.axios, this.logger);
    this.quoteLocations = new QuoteLocations(this.axios, this.logger);
    this.quoteTemplates = new QuoteTemplates(this.axios, this.logger);
    this.purchaseOrders = new PurchaseOrders(this.axios, this.logger);
    this.purchaseOrderItems = new PurchaseOrderItems(this.axios, this.logger);
    this.purchaseOrderItemReceiving = new PurchaseOrderItemReceiving(this.axios, this.logger);
    this.purchaseApprovals = new PurchaseApprovals(this.axios, this.logger);
    this.changeOrderCharges = new ChangeOrderCharges(this.axios, this.logger);
    this.taxes = new Taxes(this.axios, this.logger);
    this.taxCategories = new TaxCategories(this.axios, this.logger);
    this.taxRegions = new TaxRegions(this.axios, this.logger);
    this.currencies = new Currencies(this.axios, this.logger);
    this.paymentTerms = new PaymentTerms(this.axios, this.logger);

    // Inventory and product management entities
    this.inventoryItems = new InventoryItems(this.axios, this.logger);
    this.inventoryItemSerialNumbers = new InventoryItemSerialNumbers(this.axios, this.logger);
    this.inventoryLocations = new InventoryLocations(this.axios, this.logger);
    this.inventoryProducts = new InventoryProducts(this.axios, this.logger);
    this.inventoryStockedItems = new InventoryStockedItems(this.axios, this.logger);
    this.inventoryStockedItemsAdd = new InventoryStockedItemsAdd(this.axios, this.logger);
    this.inventoryStockedItemsRemove = new InventoryStockedItemsRemove(this.axios, this.logger);
    this.inventoryStockedItemsTransfer = new InventoryStockedItemsTransfer(this.axios, this.logger);
    this.inventoryTransfers = new InventoryTransfers(this.axios, this.logger);
    this.products = new Products(this.axios, this.logger);
    this.productTiers = new ProductTiers(this.axios, this.logger);
    this.productVendors = new ProductVendors(this.axios, this.logger);

    // Expense management entities
    this.expenseItems = new ExpenseItems(this.axios, this.logger);
    this.expenseReports = new ExpenseReports(this.axios, this.logger);

    // Time tracking and scheduling entities
    this.timeEntries = new TimeEntries(this.axios, this.logger);
    this.appointments = new Appointments(this.axios, this.logger);
    this.holidays = new Holidays(this.axios, this.logger);
    this.holidaySets = new HolidaySets(this.axios, this.logger);
    this.resourceDailyAvailabilities = new ResourceDailyAvailabilities(this.axios, this.logger);
    this.resourceTimeOffAdditional = new ResourceTimeOffAdditional(this.axios, this.logger);
    this.resourceTimeOffApprovers = new ResourceTimeOffApprovers(this.axios, this.logger);
    this.resourceTimeOffBalances = new ResourceTimeOffBalances(this.axios, this.logger);
    this.timeOffRequests = new TimeOffRequests(this.axios, this.logger);
    this.timeOffRequestsApprove = new TimeOffRequestsApprove(this.axios, this.logger);
    this.timeOffRequestsReject = new TimeOffRequestsReject(this.axios, this.logger);

    // Service call management entities
    this.serviceCalls = new ServiceCalls(this.axios, this.logger);
    this.serviceCallTasks = new ServiceCallTasks(this.axios, this.logger);
    this.serviceCallTaskResources = new ServiceCallTaskResources(this.axios, this.logger);
    this.serviceCallTickets = new ServiceCallTickets(this.axios, this.logger);
    this.serviceCallTicketResources = new ServiceCallTicketResources(this.axios, this.logger);

    // Knowledge base and documentation entities
    this.knowledgeBaseArticles = new KnowledgeBaseArticles(this.axios, this.logger);
    this.knowledgeBaseCategories = new KnowledgeBaseCategories(this.axios, this.logger);
    this.documents = new Documents(this.axios, this.logger);
    this.documentCategories = new DocumentCategories(this.axios, this.logger);
    this.documentChecklistItems = new DocumentChecklistItems(this.axios, this.logger);
    this.documentChecklistLibraries = new DocumentChecklistLibraries(this.axios, this.logger);
    this.documentConfigurationItemAssociations = new DocumentConfigurationItemAssociations(this.axios, this.logger);
    this.documentConfigurationItemCategoryAssociations = new DocumentConfigurationItemCategoryAssociations(this.axios, this.logger);
    this.documentTagAssociations = new DocumentTagAssociations(this.axios, this.logger);
    this.documentTicketAssociations = new DocumentTicketAssociations(this.axios, this.logger);
    this.documentToArticleAssociations = new DocumentToArticleAssociations(this.axios, this.logger);
    this.articleAttachments = new ArticleAttachments(this.axios, this.logger);
    this.articleConfigurationItemCategoryAssociations = new ArticleConfigurationItemCategoryAssociations(this.axios, this.logger);
    this.articlePlainTextContent = new ArticlePlainTextContent(this.axios, this.logger);
    this.articleTagAssociations = new ArticleTagAssociations(this.axios, this.logger);
    this.articleTicketAssociations = new ArticleTicketAssociations(this.axios, this.logger);
    this.articleToArticleAssociations = new ArticleToArticleAssociations(this.axios, this.logger);
    this.articleToDocumentAssociations = new ArticleToDocumentAssociations(this.axios, this.logger);

    // Sales and opportunity management entities
    this.salesOrders = new SalesOrders(this.axios, this.logger);
    this.opportunityCategories = new OpportunityCategories(this.axios, this.logger);

    // Pricing and rate management entities
    this.priceListMaterialCodes = new PriceListMaterialCodes(this.axios, this.logger);
    this.priceListProducts = new PriceListProducts(this.axios, this.logger);
    this.priceListProductTiers = new PriceListProductTiers(this.axios, this.logger);
    this.priceListRoles = new PriceListRoles(this.axios, this.logger);
    this.priceListServices = new PriceListServices(this.axios, this.logger);
    this.priceListServiceBundles = new PriceListServiceBundles(this.axios, this.logger);
    this.priceListWorkTypeModifiers = new PriceListWorkTypeModifiers(this.axios, this.logger);

    // Organizational structure entities
    this.departments = new Departments(this.axios, this.logger);
    this.organizationalLevel1 = new OrganizationalLevel1(this.axios, this.logger);
    this.organizationalLevel2 = new OrganizationalLevel2(this.axios, this.logger);
    this.organizationalLevelAssociations = new OrganizationalLevelAssociations(this.axios, this.logger);
    this.organizatonalResources = new OrganizatonalResources(this.axios, this.logger);
    this.internalLocations = new InternalLocations(this.axios, this.logger);
    this.internalLocationWithBusinessHours = new InternalLocationWithBusinessHours(this.axios, this.logger);
    this.companyLocations = new CompanyLocations(this.axios, this.logger);
    this.companySiteConfigurations = new CompanySiteConfigurations(this.axios, this.logger);
    this.companyTeams = new CompanyTeams(this.axios, this.logger);
    this.companyToDos = new CompanyToDos(this.axios, this.logger);

    // Reference and lookup entities
    this.countries = new Countries(this.axios, this.logger);
    this.roles = new Roles(this.axios, this.logger);
    this.skills = new Skills(this.axios, this.logger);
    this.resourceSkills = new ResourceSkills(this.axios, this.logger);
    this.resourceRoles = new ResourceRoles(this.axios, this.logger);
    this.resourceRoleDepartments = new ResourceRoleDepartments(this.axios, this.logger);
    this.resourceRoleQueues = new ResourceRoleQueues(this.axios, this.logger);
    this.resourceServiceDeskRoles = new ResourceServiceDeskRoles(this.axios, this.logger);
    this.actionTypes = new ActionTypes(this.axios, this.logger);
    this.classificationIcons = new ClassificationIcons(this.axios, this.logger);
    this.shippingTypes = new ShippingTypes(this.axios, this.logger);
    this.modules = new Modules(this.axios, this.logger);
    this.subscriptionPeriods = new SubscriptionPeriods(this.axios, this.logger);
    this.subscriptions = new Subscriptions(this.axios, this.logger);
    this.domainRegistrars = new DomainRegistrars(this.axios, this.logger);
    this.workTypeModifiers = new WorkTypeModifiers(this.axios, this.logger);
    this.phases = new Phases(this.axios, this.logger);
    this.version = new Version(this.axios, this.logger);

    // Ticket management entities
    this.ticketCategories = new TicketCategories(this.axios, this.logger);
    this.ticketCategoryFieldDefaults = new TicketCategoryFieldDefaults(this.axios, this.logger);
    this.ticketAdditionalConfigurationItems = new TicketAdditionalConfigurationItems(this.axios, this.logger);
    this.ticketAdditionalContacts = new TicketAdditionalContacts(this.axios, this.logger);
    this.ticketChangeRequestApprovals = new TicketChangeRequestApprovals(this.axios, this.logger);
    this.ticketCharges = new TicketCharges(this.axios, this.logger);
    this.ticketChecklistItems = new TicketChecklistItems(this.axios, this.logger);
    this.ticketChecklistLibraries = new TicketChecklistLibraries(this.axios, this.logger);
    this.ticketHistory = new TicketHistory(this.axios, this.logger);
    this.ticketRmaCredits = new TicketRmaCredits(this.axios, this.logger);
    this.ticketSecondaryResources = new TicketSecondaryResources(this.axios, this.logger);
    this.ticketTagAssociations = new TicketTagAssociations(this.axios, this.logger);

    // Task and project management entities
    this.taskPredecessors = new TaskPredecessors(this.axios, this.logger);
    this.taskSecondaryResources = new TaskSecondaryResources(this.axios, this.logger);
    this.projectCharges = new ProjectCharges(this.axios, this.logger);

    // Client portal entities
    this.clientPortalUsers = new ClientPortalUsers(this.axios, this.logger);

    // Tagging and classification entities
    this.tags = new Tags(this.axios, this.logger);
    this.tagGroups = new TagGroups(this.axios, this.logger);
    this.tagAliases = new TagAliases(this.axios, this.logger);

    // Survey and feedback entities
    this.surveys = new Surveys(this.axios, this.logger);
    this.surveyResults = new SurveyResults(this.axios, this.logger);

    // Notification and alert entities
    this.notificationHistory = new NotificationHistory(this.axios, this.logger);
    this.companyAlerts = new CompanyAlerts(this.axios, this.logger);

    // Checklist and template entities
    this.checklistLibraries = new ChecklistLibraries(this.axios, this.logger);
    this.checklistLibraryChecklistItems = new ChecklistLibraryChecklistItems(this.axios, this.logger);

    // User-defined field entities
    this.userDefinedFieldDefinitions = new UserDefinedFieldDefinitions(this.axios, this.logger);
    this.userDefinedFieldListItems = new UserDefinedFieldListItems(this.axios, this.logger);

    // Association and relationship entities
    this.comanagedAssociations = new ComanagedAssociations(this.axios, this.logger);
    this.contactBillingProductAssociations = new ContactBillingProductAssociations(this.axios, this.logger);
    this.contactGroups = new ContactGroups(this.axios, this.logger);
    this.contactGroupContacts = new ContactGroupContacts(this.axios, this.logger);
    this.changeRequestLinks = new ChangeRequestLinks(this.axios, this.logger);
    this.additionalInvoiceFieldValues = new AdditionalInvoiceFieldValues(this.axios, this.logger);
    this.serviceLevelAgreementResults = new ServiceLevelAgreementResults(this.axios, this.logger);

    // Audit and log entities
    this.deletedTaskActivityLogs = new DeletedTaskActivityLogs(this.axios, this.logger);
    this.deletedTicketActivityLogs = new DeletedTicketActivityLogs(this.axios, this.logger);
    this.deletedTicketLogs = new DeletedTicketLogs(this.axios, this.logger);

    // Special purpose and system entities
  }

  /**
   * Setup rate limiting interceptor to prevent overwhelming the API
   */
  private setupRateLimitingInterceptor(): void {
    this.axios.interceptors.request.use(async config => {
      // Wait for rate limiter slot before making request
      await this.rateLimiter.waitForSlot();
      return config;
    });
  }

  /**
   * Creates a new AutotaskClient instance with comprehensive entity coverage.
   * 
   * This factory method handles:
   * - Automatic zone detection via Autotask API
   * - Environment variable loading from .env files
   * - Performance optimization configuration
   * - Rate limiting and connection pooling setup
   * - Complete initialization of all 210+ API entities
   * 
   * @param config - Authentication configuration. If not provided, will use environment variables
   * @param performanceConfig - Optional performance and optimization settings
   * @returns Promise<AutotaskClient> - Fully configured client instance
   * 
   * @example
   * ```typescript
   * // Using explicit configuration
   * const client = await AutotaskClient.create({
   *   username: 'your_username',
   *   integrationCode: 'your_integration_code',
   *   secret: 'your_secret',
   *   apiUrl: 'https://webservices12.autotask.net/ATServicesRest/v1.0/' // optional
   * });
   * 
   * // Using environment variables
   * const client = await AutotaskClient.create();
   * 
   * // With performance configuration
   * const client = await AutotaskClient.create(config, {
   *   timeout: 60000,
   *   maxConcurrentRequests: 20,
   *   requestsPerSecond: 10
   * });
   * ```
   */
  static async create(
    config?: AutotaskAuth,
    performanceConfig?: PerformanceConfig
  ): Promise<AutotaskClient> {
    // Create a logger for this static method
    const logger = winston.createLogger({
      level: process.env.NODE_ENV === 'test' ? 'error' : 'info',
      format: winston.format.simple(),
      transports: [new winston.transports.Console()],
      silent:
        process.env.NODE_ENV === 'test' &&
        !process.env.DEBUG_TESTS &&
        !process.env.DEBUG_INTEGRATION_TESTS,
    });

    // If no config is provided, try to use environment variables
    if (!config) {
      config = {
        username: process.env.AUTOTASK_USERNAME!,
        integrationCode: process.env.AUTOTASK_INTEGRATION_CODE!,
        secret: process.env.AUTOTASK_SECRET!,
        apiUrl: process.env.AUTOTASK_API_URL,
      };

      if (!config.username || !config.integrationCode || !config.secret) {
        throw new ConfigurationError(
          'Missing required environment variables: AUTOTASK_USERNAME, AUTOTASK_INTEGRATION_CODE, AUTOTASK_SECRET'
        );
      }
    } else {
      // Validate provided config
      if (!config.username || config.username.trim() === '') {
        throw new ConfigurationError(
          'Username is required and cannot be empty',
          'username'
        );
      }
      if (!config.integrationCode || config.integrationCode.trim() === '') {
        throw new ConfigurationError(
          'Integration code is required and cannot be empty',
          'integrationCode'
        );
      }
      if (!config.secret || config.secret.trim() === '') {
        throw new ConfigurationError(
          'Secret is required and cannot be empty',
          'secret'
        );
      }
    }

    // If API URL is not provided, detect it using the zone endpoint
    if (!config.apiUrl) {
      try {
        logger.info('Detecting Autotask zone for API URL...');
        const zoneResponse = await axios.get(
          `https://webservices.autotask.net/ATServicesRest/V1.0/zoneInformation?user=${encodeURIComponent(
            config.username
          )}`
        );
        const zoneUrl = zoneResponse.data.url + 'v1.0/';
        config.apiUrl = zoneUrl;
        logger.info(`Auto-detected API URL: ${zoneUrl}`);
      } catch (error) {
        throw new ConfigurationError(
          'Failed to auto-detect API URL. Please provide apiUrl in config.',
          'apiUrl',
          error as Error
        );
      }
    }

    // Set default performance configuration
    const defaultPerformanceConfig: Required<PerformanceConfig> = {
      timeout: 30000,
      maxConcurrentRequests: 10,
      enableConnectionPooling: true,
      maxContentLength: 50 * 1024 * 1024, // 50MB
      maxBodyLength: 10 * 1024 * 1024, // 10MB
      enableCompression: true,
      requestsPerSecond: 5,
      keepAliveTimeout: 30000,
      ...performanceConfig,
    };

    // Setup connection pooling for better performance
    const httpAgent = new http.Agent({
      keepAlive: defaultPerformanceConfig.enableConnectionPooling,
      keepAliveMsecs: defaultPerformanceConfig.keepAliveTimeout,
      maxSockets: defaultPerformanceConfig.maxConcurrentRequests,
    });

    const httpsAgent = new https.Agent({
      keepAlive: defaultPerformanceConfig.enableConnectionPooling,
      keepAliveMsecs: defaultPerformanceConfig.keepAliveTimeout,
      maxSockets: defaultPerformanceConfig.maxConcurrentRequests,
    });

    // Create axios instance with authentication and performance settings
    const axiosInstance = axios.create({
      baseURL: config.apiUrl,
      timeout: defaultPerformanceConfig.timeout,
      maxContentLength: defaultPerformanceConfig.maxContentLength,
      maxBodyLength: defaultPerformanceConfig.maxBodyLength,
      decompress: defaultPerformanceConfig.enableCompression,
      httpAgent,
      httpsAgent,
      headers: {
        'Content-Type': 'application/json',
        'ApiIntegrationcode': config.integrationCode,
        Authorization: `Basic ${Buffer.from(`${config.username}:${config.secret}`).toString('base64')}`,
      },
      transformRequest: [
        (data, headers) => {
          if (defaultPerformanceConfig.enableCompression && data) {
            headers['Content-Encoding'] = 'gzip';
          }
          return JSON.stringify(data);
        },
      ],
    });

    // Test the connection with a simple request
    try {
      logger.info('Testing API connection...');
      await axiosInstance.get('/CompanyCategories');
      logger.info('API connection successful');
    } catch (error) {
      throw new ConfigurationError(
        'Failed to connect to Autotask API. Please check your credentials and API URL.',
        'connection',
        error as Error
      );
    }

    return new AutotaskClient(config, axiosInstance, performanceConfig);
  }

  /**
   * Test the API connection
   * @returns Promise<boolean> - true if connection is successful
   */
  async testConnection(): Promise<boolean> {
    try {
      await this.axios.get('/CompanyCategories');
      return true;
    } catch (error) {
      this.logger.error('Connection test failed:', error);
      return false;
    }
  }

  /**
   * Get current configuration
   */
  getConfig(): Readonly<AutotaskAuth> {
    return { ...this.config };
  }

  /**
   * Get performance metrics and configuration
   */
  getPerformanceConfig(): Readonly<Required<PerformanceConfig>> {
    return { ...this.performanceConfig };
  }

  /**
   * Get the request handler instance
   * @returns RequestHandler - The internal request handler
   */
  getRequestHandler(): RequestHandler {
    return this.requestHandler;
  }

  /**
   * Get performance metrics
   * @returns Performance metrics object with detailed statistics
   */
  getPerformanceMetrics(): {
    rateLimiter: {
      requestsPerSecond: number;
    };
    connectionPooling: {
      enabled: boolean;
      maxConcurrentRequests: number;
    };
    timeouts: {
      requestTimeout: number;
      keepAliveTimeout: number;
    };
    limits: {
      maxContentLength: number;
      maxBodyLength: number;
    };
  } {
    return {
      rateLimiter: {
        requestsPerSecond: this.performanceConfig.requestsPerSecond,
      },
      connectionPooling: {
        enabled: this.performanceConfig.enableConnectionPooling,
        maxConcurrentRequests: this.performanceConfig.maxConcurrentRequests,
      },
      timeouts: {
        requestTimeout: this.performanceConfig.timeout,
        keepAliveTimeout: this.performanceConfig.keepAliveTimeout,
      },
      limits: {
        maxContentLength: this.performanceConfig.maxContentLength,
        maxBodyLength: this.performanceConfig.maxBodyLength,
      },
    };
  }

  /**
   * Update rate limit at runtime
   * @param requestsPerSecond - New requests per second limit
   */
  updateRateLimit(requestsPerSecond: number): void {
    this.performanceConfig.requestsPerSecond = requestsPerSecond;
    this.rateLimiter = new RateLimiter(requestsPerSecond);
  }

  /**
   * Get the logger instance
   * @returns winston.Logger - The internal logger
   */
  getLogger(): winston.Logger {
    return this.logger;
  }
}
