{
  "summary": {
    "filesScanned": 403,
    "placeholdersFound": 214,
    "byType": {
      "placeholder-keyword": 30,
      "empty-block": 76,
      "comment-marker": 29,
      "explicit-placeholder": 4,
      "hardcoded-value": 2,
      "not-implemented": 2,
      "temporary-placeholder": 1,
      "mock-keyword": 70
    },
    "byFile": {
      "src/business/core/BusinessLogicEngine.ts": [
        {
          "file": "src/business/core/BusinessLogicEngine.ts",
          "line": 153,
          "type": "placeholder-keyword",
          "code": "// For now, just placeholder",
          "context": "    151:   private setupWorkflows(): void {\n    152:     // This will be implemented when we create the WorkflowEngine\n>>> 153:     // For now, just placeholder\n    154:   }\n    155:   ",
          "functionName": "setupWorkflows",
          "className": null,
          "severity": "medium"
        }
      ],
      "src/business/entities/CompanyBusinessLogic.ts": [
        {
          "file": "src/business/entities/CompanyBusinessLogic.ts",
          "line": 8,
          "type": "empty-block",
          "code": "constructor(private businessEngine: BusinessLogicEngine) {}",
          "context": "    6:  */\n    7: export class CompanyBusinessLogic {\n>>> 8:   constructor(private businessEngine: BusinessLogicEngine) {}\n    9:   \n    10:   /**",
          "functionName": "constructor",
          "className": "CompanyBusinessLogic",
          "severity": "medium"
        }
      ],
      "src/business/entities/ContactBusinessLogic.ts": [
        {
          "file": "src/business/entities/ContactBusinessLogic.ts",
          "line": 8,
          "type": "empty-block",
          "code": "constructor(private businessEngine: BusinessLogicEngine) {}",
          "context": "    6:  */\n    7: export class ContactBusinessLogic {\n>>> 8:   constructor(private businessEngine: BusinessLogicEngine) {}\n    9:   \n    10:   /**",
          "functionName": "constructor",
          "className": "ContactBusinessLogic",
          "severity": "medium"
        }
      ],
      "src/business/entities/ContractBusinessLogic.ts": [
        {
          "file": "src/business/entities/ContractBusinessLogic.ts",
          "line": 8,
          "type": "empty-block",
          "code": "constructor(private businessEngine: BusinessLogicEngine) {}",
          "context": "    6:  */\n    7: export class ContractBusinessLogic {\n>>> 8:   constructor(private businessEngine: BusinessLogicEngine) {}\n    9:   \n    10:   /**",
          "functionName": "constructor",
          "className": "ContractBusinessLogic",
          "severity": "medium"
        },
        {
          "file": "src/business/entities/ContractBusinessLogic.ts",
          "line": 246,
          "type": "empty-block",
          "code": "context?.previousRates || {}",
          "context": "    244:       billingRules.hourlyRates || {},\n    245:       context?.marketRates || {},\n>>> 246:       context?.previousRates || {}\n    247:     );\n    248:     ",
          "functionName": "if",
          "className": null,
          "severity": "medium"
        }
      ],
      "src/business/entities/ProjectBusinessLogic.ts": [
        {
          "file": "src/business/entities/ProjectBusinessLogic.ts",
          "line": 8,
          "type": "empty-block",
          "code": "constructor(private businessEngine: BusinessLogicEngine) {}",
          "context": "    6:  */\n    7: export class ProjectBusinessLogic {\n>>> 8:   constructor(private businessEngine: BusinessLogicEngine) {}\n    9:   \n    10:   /**",
          "functionName": "constructor",
          "className": "ProjectBusinessLogic",
          "severity": "medium"
        }
      ],
      "src/business/entities/TicketBusinessLogic.ts": [
        {
          "file": "src/business/entities/TicketBusinessLogic.ts",
          "line": 8,
          "type": "empty-block",
          "code": "constructor(private businessEngine: BusinessLogicEngine) {}",
          "context": "    6:  */\n    7: export class TicketBusinessLogic {\n>>> 8:   constructor(private businessEngine: BusinessLogicEngine) {}\n    9:   \n    10:   /**",
          "functionName": "constructor",
          "className": "TicketBusinessLogic",
          "severity": "medium"
        }
      ],
      "src/business/entities/TimeEntryBusinessLogic.ts": [
        {
          "file": "src/business/entities/TimeEntryBusinessLogic.ts",
          "line": 8,
          "type": "empty-block",
          "code": "constructor(private businessEngine: BusinessLogicEngine) {}",
          "context": "    6:  */\n    7: export class TimeEntryBusinessLogic {\n>>> 8:   constructor(private businessEngine: BusinessLogicEngine) {}\n    9:   \n    10:   /**",
          "functionName": "constructor",
          "className": "TimeEntryBusinessLogic",
          "severity": "medium"
        }
      ],
      "src/business/validation/errors/BusinessLogicErrors.ts": [
        {
          "file": "src/business/validation/errors/BusinessLogicErrors.ts",
          "line": 33,
          "type": "empty-block",
          "code": "} = {}",
          "context": "    31:       isRecoverable?: boolean;\n    32:       cause?: Error;\n>>> 33:     } = {}\n    34:   ) {\n    35:     super(message);",
          "functionName": "unknown",
          "className": "BusinessLogicError",
          "severity": "medium"
        },
        {
          "file": "src/business/validation/errors/BusinessLogicErrors.ts",
          "line": 118,
          "type": "empty-block",
          "code": "} = {}",
          "context": "    116:       context?: Record<string, any>;\n    117:       severity?: 'error' | 'warning' | 'info';\n>>> 118:     } = {}\n    119:   ) {\n    120:     super(message, code, entityType, 'validate', {",
          "functionName": "if",
          "className": "ValidationError",
          "severity": "medium"
        },
        {
          "file": "src/business/validation/errors/BusinessLogicErrors.ts",
          "line": 151,
          "type": "empty-block",
          "code": "} = {}",
          "context": "    149:       context?: Record<string, any>;\n    150:       cause?: Error;\n>>> 151:     } = {}\n    152:   ) {\n    153:     super(message, code, entityType, 'workflow', {",
          "functionName": "unknown",
          "className": "WorkflowError",
          "severity": "medium"
        },
        {
          "file": "src/business/validation/errors/BusinessLogicErrors.ts",
          "line": 184,
          "type": "empty-block",
          "code": "} = {}",
          "context": "    182:       suggestedFix?: string;\n    183:       context?: Record<string, any>;\n>>> 184:     } = {}\n    185:   ) {\n    186:     super(message, code, entityType, operation, {",
          "functionName": "unknown",
          "className": "PermissionError",
          "severity": "medium"
        },
        {
          "file": "src/business/validation/errors/BusinessLogicErrors.ts",
          "line": 221,
          "type": "empty-block",
          "code": "} = {}",
          "context": "    219:       context?: Record<string, any>;\n    220:       severity?: 'error' | 'warning' | 'info';\n>>> 221:     } = {}\n    222:   ) {\n    223:     super(message, code, entityType, operation, options);",
          "functionName": "unknown",
          "className": "BusinessRuleViolationError",
          "severity": "medium"
        },
        {
          "file": "src/business/validation/errors/BusinessLogicErrors.ts",
          "line": 253,
          "type": "empty-block",
          "code": "} = {}",
          "context": "    251:       recoveryActions?: string[];\n    252:       context?: Record<string, any>;\n>>> 253:     } = {}\n    254:   ) {\n    255:     super(message, code, entityType, operation, options);",
          "functionName": "unknown",
          "className": "DataIntegrityError",
          "severity": "medium"
        },
        {
          "file": "src/business/validation/errors/BusinessLogicErrors.ts",
          "line": 283,
          "type": "empty-block",
          "code": "} = {}",
          "context": "    281:       recoveryActions?: string[];\n    282:       context?: Record<string, any>;\n>>> 283:     } = {}\n    284:   ) {\n    285:     super(message, code, entityType, 'configure', {",
          "functionName": "unknown",
          "className": "ConfigurationError",
          "severity": "medium"
        }
      ],
      "src/business/validation/validators/FieldValidators.ts": [
        {
          "file": "src/business/validation/validators/FieldValidators.ts",
          "line": 101,
          "type": "empty-block",
          "code": "} = {}",
          "context": "    99:       maxDate?: Date;\n    100:       customMessage?: string;\n>>> 101:     } = {}\n    102:   ) {\n    103:     this.config = config;",
          "functionName": "validate",
          "className": "DateRangeValidator",
          "severity": "medium"
        },
        {
          "file": "src/business/validation/validators/FieldValidators.ts",
          "line": 164,
          "type": "empty-block",
          "code": "} = {}",
          "context": "    162:       max?: number;\n    163:       customMessage?: string;\n>>> 164:     } = {}\n    165:   ) {\n    166:     this.config = config;",
          "functionName": "if",
          "className": "NumericRangeValidator",
          "severity": "medium"
        },
        {
          "file": "src/business/validation/validators/FieldValidators.ts",
          "line": 229,
          "type": "empty-block",
          "code": "} = {}",
          "context": "    227:       maxLength?: number;\n    228:       customMessage?: string;\n>>> 229:     } = {}\n    230:   ) {\n    231:     this.config = config;",
          "functionName": "if",
          "className": "LengthValidator",
          "severity": "medium"
        }
      ],
      "src/business/workflows/AutotaskWorkflows.ts": [
        {
          "file": "src/business/workflows/AutotaskWorkflows.ts",
          "line": 442,
          "type": "placeholder-keyword",
          "code": "description: 'Create primary and billing contact placeholders',",
          "context": "    440:           id: 'setup_default_contacts',\n    441:           name: 'Setup Default Contacts',\n>>> 442:           description: 'Create primary and billing contact placeholders',\n    443:           action: async (context) => {\n    444:             return {",
          "functionName": "getCustomerOnboardingWorkflow",
          "className": null,
          "severity": "medium"
        }
      ],
      "src/client/AutotaskClient.ts": [
        {
          "file": "src/client/AutotaskClient.ts",
          "line": 620,
          "type": "comment-marker",
          "code": "// Notes",
          "context": "    618:   }\n    619: \n>>> 620:   // Notes\n    621:   get companyNotes() {\n    622:     return this.getEntityFromSubClient('core', 'companyNotes');",
          "functionName": "attachmentInfo",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/client/AutotaskClient.ts",
          "line": 652,
          "type": "comment-marker",
          "code": "// Note attachments",
          "context": "    650:   }\n    651: \n>>> 652:   // Note attachments\n    653:   get companyNoteAttachments() {\n    654:     return this.getEntityFromSubClient('core', 'companyNoteAttachments');",
          "functionName": "articleNotes",
          "className": null,
          "severity": "low"
        }
      ],
      "src/client/base/BaseSubClient.ts": [
        {
          "file": "src/client/base/BaseSubClient.ts",
          "line": 40,
          "type": "empty-block",
          "code": ") {}",
          "context": "    38:     protected logger: winston.Logger,\n    39:     protected name: string\n>>> 40:   ) {}\n    41: \n    42:   abstract getName(): string;",
          "functionName": "unknown",
          "className": "BaseSubClient",
          "severity": "low"
        }
      ],
      "src/client/EnhancedAutotaskClient.ts": [
        {
          "file": "src/client/EnhancedAutotaskClient.ts",
          "line": 470,
          "type": "empty-block",
          "code": "} = {}",
          "context": "    468:       retryable?: boolean;\n    469:       metadata?: Record<string, any>;\n>>> 470:     } = {}\n    471:   ): Promise<T> {\n    472:     const zone = options.zone || this.primaryZone || 'primary';",
          "functionName": "clearQueues",
          "className": null,
          "severity": "low"
        }
      ],
      "src/client/ValidatedAutotaskClient.ts": [
        {
          "file": "src/client/ValidatedAutotaskClient.ts",
          "line": 156,
          "type": "comment-marker",
          "code": "// Note: This is a simplified approach - the actual client would need proper entity creation methods",
          "context": "    154: \n    155:       // Create through underlying client\n>>> 156:       // Note: This is a simplified approach - the actual client would need proper entity creation methods\n    157:       const result = await this.performEntityOperation<T>('create', entityType, sanitizedEntity);\n    158: ",
          "functionName": "if",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/client/ValidatedAutotaskClient.ts",
          "line": 261,
          "type": "placeholder-keyword",
          "code": "// This is a placeholder for actual compliance validation",
          "context": "    259: \n    260:     // Basic compliance checks - can be extended\n>>> 261:     // This is a placeholder for actual compliance validation\n    262: \n    263:     return {",
          "functionName": "if",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/client/ValidatedAutotaskClient.ts",
          "line": 261,
          "type": "explicit-placeholder",
          "code": "// This is a placeholder for actual compliance validation",
          "context": "    259: \n    260:     // Basic compliance checks - can be extended\n>>> 261:     // This is a placeholder for actual compliance validation\n    262: \n    263:     return {",
          "functionName": "if",
          "className": null,
          "severity": "high"
        },
        {
          "file": "src/client/ValidatedAutotaskClient.ts",
          "line": 307,
          "type": "placeholder-keyword",
          "code": "// This is a placeholder - in reality, you'd route to appropriate client methods",
          "context": "    305:    */\n    306:   private async performEntityOperation<T>(operation: string, entityType: string, data: any): Promise<T> {\n>>> 307:     // This is a placeholder - in reality, you'd route to appropriate client methods\n    308:     // For now, just return the data as-is\n    309:     return data as T;",
          "functionName": "calculateQualityScore",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/client/ValidatedAutotaskClient.ts",
          "line": 307,
          "type": "explicit-placeholder",
          "code": "// This is a placeholder - in reality, you'd route to appropriate client methods",
          "context": "    305:    */\n    306:   private async performEntityOperation<T>(operation: string, entityType: string, data: any): Promise<T> {\n>>> 307:     // This is a placeholder - in reality, you'd route to appropriate client methods\n    308:     // For now, just return the data as-is\n    309:     return data as T;",
          "functionName": "calculateQualityScore",
          "className": null,
          "severity": "high"
        }
      ],
      "src/entities/attachments.ts": [
        {
          "file": "src/entities/attachments.ts",
          "line": 23,
          "type": "empty-block",
          "code": "constructor(private axios: AxiosInstance, private logger: winston.Logger) {}",
          "context": "    21:   private readonly endpoint = '/Attachments';\n    22: \n>>> 23:   constructor(private axios: AxiosInstance, private logger: winston.Logger) {}\n    24: \n    25:   static getMetadata(): MethodMetadata[] {",
          "functionName": "constructor",
          "className": "Attachments",
          "severity": "low"
        }
      ],
      "src/entities/base.ts": [
        {
          "file": "src/entities/base.ts",
          "line": 28,
          "type": "empty-block",
          "code": "options: RequestOptions = {}",
          "context": "    26:     endpoint: string,\n    27:     method: string,\n>>> 28:     options: RequestOptions = {}\n    29:   ): Promise<ApiResponse<T>> {\n    30:     const response = await this.requestHandler.executeRequest(",
          "functionName": "unknown",
          "className": "BaseEntity",
          "severity": "low"
        },
        {
          "file": "src/entities/base.ts",
          "line": 69,
          "type": "empty-block",
          "code": "options: RequestOptions = {}",
          "context": "    67:     endpoint: string,\n    68:     method: string,\n>>> 69:     options: RequestOptions = {}\n    70:   ): Promise<ApiResponse<T[]>> {\n    71:     const response = await this.requestHandler.executeRequest(",
          "functionName": "if",
          "className": "BaseEntity",
          "severity": "low"
        }
      ],
      "src/entities/expenses.ts": [
        {
          "file": "src/entities/expenses.ts",
          "line": 32,
          "type": "empty-block",
          "code": "constructor(private axios: AxiosInstance, private logger: winston.Logger) {}",
          "context": "    30:   private readonly endpoint = '/Expenses';\n    31: \n>>> 32:   constructor(private axios: AxiosInstance, private logger: winston.Logger) {}\n    33: \n    34:   static getMetadata(): MethodMetadata[] {",
          "functionName": "constructor",
          "className": "Expenses",
          "severity": "low"
        }
      ],
      "src/entities/notes.ts": [
        {
          "file": "src/entities/notes.ts",
          "line": 23,
          "type": "empty-block",
          "code": "constructor(private axios: AxiosInstance, private logger: winston.Logger) {}",
          "context": "    21:   private readonly endpoint = '/Notes';\n    22: \n>>> 23:   constructor(private axios: AxiosInstance, private logger: winston.Logger) {}\n    24: \n    25:   static getMetadata(): MethodMetadata[] {",
          "functionName": "constructor",
          "className": "Notes",
          "severity": "low"
        }
      ],
      "src/entities/ticketPriorities.ts": [
        {
          "file": "src/entities/ticketPriorities.ts",
          "line": 107,
          "type": "empty-block",
          "code": "query: TicketPriorityQuery = {}",
          "context": "    105:    */\n    106:   async list(\n>>> 107:     query: TicketPriorityQuery = {}\n    108:   ): Promise<ApiResponse<TicketPriority[]>> {\n    109:     this.logger.info('Listing ticket priorities', { query });",
          "functionName": "get",
          "className": "TicketPriorities",
          "severity": "low"
        }
      ],
      "src/entities/ticketSources.ts": [
        {
          "file": "src/entities/ticketSources.ts",
          "line": 106,
          "type": "empty-block",
          "code": "query: TicketSourceQuery = {}",
          "context": "    104:    */\n    105:   async list(\n>>> 106:     query: TicketSourceQuery = {}\n    107:   ): Promise<ApiResponse<TicketSource[]>> {\n    108:     this.logger.info('Listing ticket sources', { query });",
          "functionName": "get",
          "className": "TicketSources",
          "severity": "low"
        }
      ],
      "src/entities/ticketStatuses.ts": [
        {
          "file": "src/entities/ticketStatuses.ts",
          "line": 106,
          "type": "empty-block",
          "code": "query: TicketStatusQuery = {}",
          "context": "    104:    */\n    105:   async list(\n>>> 106:     query: TicketStatusQuery = {}\n    107:   ): Promise<ApiResponse<TicketStatus[]>> {\n    108:     this.logger.info('Listing ticket statuses', { query });",
          "functionName": "get",
          "className": "TicketStatuses",
          "severity": "low"
        }
      ],
      "src/index.ts": [
        {
          "file": "src/index.ts",
          "line": 8,
          "type": "comment-marker",
          "code": "// Note: Use individual exports instead of wildcard to avoid conflicts",
          "context": "    6: // Enterprise Performance System\n    7: export { AutotaskPerformanceIntegration } from './performance/integration/AutotaskPerformanceIntegration';\n>>> 8: // Note: Use individual exports instead of wildcard to avoid conflicts\n    9: export { \n    10:   PerformanceMetrics,",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/index.ts",
          "line": 16,
          "type": "comment-marker",
          "code": "// Note: Use individual exports instead of wildcard to avoid conflicts",
          "context": "    14: \n    15: // Entity Relationship and Cascade Operations System\n>>> 16: // Note: Use individual exports instead of wildcard to avoid conflicts\n    17: export {\n    18:   AutotaskRelationshipSystem,",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/index.ts",
          "line": 29,
          "type": "comment-marker",
          "code": "// Note: Use individual exports instead of wildcard to avoid conflicts",
          "context": "    27: \n    28: // Enterprise Validation and Sanitization System\n>>> 29: // Note: Use individual exports instead of wildcard to avoid conflicts\n    30: export {\n    31:   ValidationEngine,",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/index.ts",
          "line": 48,
          "type": "comment-marker",
          "code": "// Note: Use individual exports instead of wildcard to avoid conflicts",
          "context": "    46: \n    47: // Webhook and Event Handling System\n>>> 48: // Note: Use individual exports instead of wildcard to avoid conflicts\n    49: export {\n    50:   WebhookManager,",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/index.ts",
          "line": 62,
          "type": "comment-marker",
          "code": "// Note: Use individual exports instead of wildcard to avoid conflicts",
          "context": "    60: \n    61: // PSA Migration Framework\n>>> 62: // Note: Use individual exports instead of wildcard to avoid conflicts\n    63: export {\n    64:   MigrationEngine,",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/index.ts",
          "line": 80,
          "type": "comment-marker",
          "code": "// Note: Use individual exports instead of wildcard to avoid conflicts",
          "context": "    78: \n    79: // Advanced Queue System with Error Recovery\n>>> 80: // Note: Use individual exports instead of wildcard to avoid conflicts\n    81: export {\n    82:   QueueManager,",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        }
      ],
      "src/migration/cli/InteractiveWizard.ts": [
        {
          "file": "src/migration/cli/InteractiveWizard.ts",
          "line": 9,
          "type": "comment-marker",
          "code": "// Placeholder implementation",
          "context": "    7: export class InteractiveWizard {\n    8:   async run(): Promise<MigrationConfig> {\n>>> 9:     // Placeholder implementation\n    10:     return {\n    11:       source: {",
          "functionName": "run",
          "className": "InteractiveWizard",
          "severity": "medium"
        },
        {
          "file": "src/migration/cli/InteractiveWizard.ts",
          "line": 9,
          "type": "placeholder-keyword",
          "code": "// Placeholder implementation",
          "context": "    7: export class InteractiveWizard {\n    8:   async run(): Promise<MigrationConfig> {\n>>> 9:     // Placeholder implementation\n    10:     return {\n    11:       source: {",
          "functionName": "run",
          "className": "InteractiveWizard",
          "severity": "medium"
        }
      ],
      "src/migration/connectors/BaseConnector.ts": [
        {
          "file": "src/migration/connectors/BaseConnector.ts",
          "line": 78,
          "type": "empty-block",
          "code": "options: ConnectorOptions = {}",
          "context": "    76:     protected system: PSASystem,\n    77:     config: SourceConnectionConfig,\n>>> 78:     options: ConnectorOptions = {}\n    79:   ) {\n    80:     super();",
          "functionName": "unknown",
          "className": "BaseConnector",
          "severity": "medium"
        },
        {
          "file": "src/migration/connectors/BaseConnector.ts",
          "line": 472,
          "type": "comment-marker",
          "code": "return 90; // Placeholder implementation",
          "context": "    470:   protected calculateConsistency(records: any[]): number {\n    471:     // Simplified consistency calculation\n>>> 472:     return 90; // Placeholder implementation\n    473:   }\n    474: ",
          "functionName": "calculateConsistency",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/migration/connectors/BaseConnector.ts",
          "line": 472,
          "type": "placeholder-keyword",
          "code": "return 90; // Placeholder implementation",
          "context": "    470:   protected calculateConsistency(records: any[]): number {\n    471:     // Simplified consistency calculation\n>>> 472:     return 90; // Placeholder implementation\n    473:   }\n    474: ",
          "functionName": "calculateConsistency",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/migration/connectors/BaseConnector.ts",
          "line": 472,
          "type": "hardcoded-value",
          "code": "return 90; // Placeholder implementation",
          "context": "    470:   protected calculateConsistency(records: any[]): number {\n    471:     // Simplified consistency calculation\n>>> 472:     return 90; // Placeholder implementation\n    473:   }\n    474: ",
          "functionName": "calculateConsistency",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/migration/connectors/BaseConnector.ts",
          "line": 477,
          "type": "comment-marker",
          "code": "return 85; // Placeholder implementation",
          "context": "    475:   protected calculateValidity(schema: EntitySchema, records: any[]): number {\n    476:     // Simplified validity calculation\n>>> 477:     return 85; // Placeholder implementation\n    478:   }\n    479: ",
          "functionName": "calculateValidity",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/migration/connectors/BaseConnector.ts",
          "line": 477,
          "type": "placeholder-keyword",
          "code": "return 85; // Placeholder implementation",
          "context": "    475:   protected calculateValidity(schema: EntitySchema, records: any[]): number {\n    476:     // Simplified validity calculation\n>>> 477:     return 85; // Placeholder implementation\n    478:   }\n    479: ",
          "functionName": "calculateValidity",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/migration/connectors/BaseConnector.ts",
          "line": 477,
          "type": "hardcoded-value",
          "code": "return 85; // Placeholder implementation",
          "context": "    475:   protected calculateValidity(schema: EntitySchema, records: any[]): number {\n    476:     // Simplified validity calculation\n>>> 477:     return 85; // Placeholder implementation\n    478:   }\n    479: ",
          "functionName": "calculateValidity",
          "className": null,
          "severity": "medium"
        }
      ],
      "src/migration/connectors/ConnectWiseManageConnector.ts": [
        {
          "file": "src/migration/connectors/ConnectWiseManageConnector.ts",
          "line": 21,
          "type": "empty-block",
          "code": "options: ConnectorOptions = {}",
          "context": "    19:     system: PSASystem,\n    20:     config: SourceConnectionConfig,\n>>> 21:     options: ConnectorOptions = {}\n    22:   ) {\n    23:     super(system, config, options);",
          "functionName": "unknown",
          "className": "ConnectWiseManageConnector",
          "severity": "medium"
        }
      ],
      "src/migration/connectors/CSVImportConnector.ts": [
        {
          "file": "src/migration/connectors/CSVImportConnector.ts",
          "line": 36,
          "type": "empty-block",
          "code": "options: ConnectorOptions = {}",
          "context": "    34:     system: PSASystem,\n    35:     config: CSVImportConfig,\n>>> 36:     options: ConnectorOptions = {}\n    37:   ) {\n    38:     super(system, config, options);",
          "functionName": "unknown",
          "className": "CSVImportConnector",
          "severity": "medium"
        },
        {
          "file": "src/migration/connectors/CSVImportConnector.ts",
          "line": 252,
          "type": "placeholder-keyword",
          "code": "// This is a placeholder implementation",
          "context": "    250:   private async loadExcelData(): Promise<void> {\n    251:     // For Excel files, we would use a library like xlsx or exceljs\n>>> 252:     // This is a placeholder implementation\n    253:     try {\n    254:       const xlsx = await import('xlsx');",
          "functionName": "loadExcelData",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/migration/connectors/CSVImportConnector.ts",
          "line": 252,
          "type": "explicit-placeholder",
          "code": "// This is a placeholder implementation",
          "context": "    250:   private async loadExcelData(): Promise<void> {\n    251:     // For Excel files, we would use a library like xlsx or exceljs\n>>> 252:     // This is a placeholder implementation\n    253:     try {\n    254:       const xlsx = await import('xlsx');",
          "functionName": "loadExcelData",
          "className": null,
          "severity": "high"
        }
      ],
      "src/migration/connectors/FreshServiceConnector.ts": [
        {
          "file": "src/migration/connectors/FreshServiceConnector.ts",
          "line": 17,
          "type": "empty-block",
          "code": "options: ConnectorOptions = {}",
          "context": "    15:     system: PSASystem,\n    16:     config: SourceConnectionConfig,\n>>> 17:     options: ConnectorOptions = {}\n    18:   ) {\n    19:     super(system, config, options);",
          "functionName": "unknown",
          "className": "FreshServiceConnector",
          "severity": "medium"
        }
      ],
      "src/migration/connectors/KaseyaVSAConnector.ts": [
        {
          "file": "src/migration/connectors/KaseyaVSAConnector.ts",
          "line": 22,
          "type": "empty-block",
          "code": "options: ConnectorOptions = {}",
          "context": "    20:     system: PSASystem,\n    21:     config: SourceConnectionConfig,\n>>> 22:     options: ConnectorOptions = {}\n    23:   ) {\n    24:     super(system, config, options);",
          "functionName": "unknown",
          "className": "KaseyaVSAConnector",
          "severity": "medium"
        }
      ],
      "src/migration/connectors/ServiceDeskPlusConnector.ts": [
        {
          "file": "src/migration/connectors/ServiceDeskPlusConnector.ts",
          "line": 17,
          "type": "empty-block",
          "code": "options: ConnectorOptions = {}",
          "context": "    15:     system: PSASystem,\n    16:     config: SourceConnectionConfig,\n>>> 17:     options: ConnectorOptions = {}\n    18:   ) {\n    19:     super(system, config, options);",
          "functionName": "unknown",
          "className": "ServiceDeskPlusConnector",
          "severity": "medium"
        }
      ],
      "src/migration/connectors/ServiceNowConnector.ts": [
        {
          "file": "src/migration/connectors/ServiceNowConnector.ts",
          "line": 20,
          "type": "empty-block",
          "code": "options: ConnectorOptions = {}",
          "context": "    18:     system: PSASystem,\n    19:     config: SourceConnectionConfig,\n>>> 20:     options: ConnectorOptions = {}\n    21:   ) {\n    22:     super(system, config, options);",
          "functionName": "unknown",
          "className": "ServiceNowConnector",
          "severity": "medium"
        }
      ],
      "src/migration/enterprise/CheckpointManager.ts": [
        {
          "file": "src/migration/enterprise/CheckpointManager.ts",
          "line": 9,
          "type": "comment-marker",
          "code": "// Placeholder implementation",
          "context": "    7: export class CheckpointManager {\n    8:   async saveCheckpoint(checkpoint: MigrationCheckpoint): Promise<void> {\n>>> 9:     // Placeholder implementation\n    10:   }\n    11: ",
          "functionName": "saveCheckpoint",
          "className": "CheckpointManager",
          "severity": "medium"
        },
        {
          "file": "src/migration/enterprise/CheckpointManager.ts",
          "line": 9,
          "type": "placeholder-keyword",
          "code": "// Placeholder implementation",
          "context": "    7: export class CheckpointManager {\n    8:   async saveCheckpoint(checkpoint: MigrationCheckpoint): Promise<void> {\n>>> 9:     // Placeholder implementation\n    10:   }\n    11: ",
          "functionName": "saveCheckpoint",
          "className": "CheckpointManager",
          "severity": "medium"
        },
        {
          "file": "src/migration/enterprise/CheckpointManager.ts",
          "line": 13,
          "type": "comment-marker",
          "code": "// Placeholder implementation",
          "context": "    11: \n    12:   async loadCheckpoint(checkpointId: string): Promise<MigrationCheckpoint> {\n>>> 13:     // Placeholder implementation\n    14:     return {\n    15:       id: checkpointId,",
          "functionName": "loadCheckpoint",
          "className": "CheckpointManager",
          "severity": "medium"
        },
        {
          "file": "src/migration/enterprise/CheckpointManager.ts",
          "line": 13,
          "type": "placeholder-keyword",
          "code": "// Placeholder implementation",
          "context": "    11: \n    12:   async loadCheckpoint(checkpointId: string): Promise<MigrationCheckpoint> {\n>>> 13:     // Placeholder implementation\n    14:     return {\n    15:       id: checkpointId,",
          "functionName": "loadCheckpoint",
          "className": "CheckpointManager",
          "severity": "medium"
        }
      ],
      "src/migration/enterprise/ParallelProcessor.ts": [
        {
          "file": "src/migration/enterprise/ParallelProcessor.ts",
          "line": 11,
          "type": "empty-block",
          "code": "constructor(private options: ParallelProcessorOptions) {}",
          "context": "    9: \n    10: export class ParallelProcessor {\n>>> 11:   constructor(private options: ParallelProcessorOptions) {}\n    12: \n    13:   async processInParallel<T, R>(",
          "functionName": "constructor",
          "className": "ParallelProcessor",
          "severity": "medium"
        }
      ],
      "src/migration/enterprise/ProgressTracker.ts": [
        {
          "file": "src/migration/enterprise/ProgressTracker.ts",
          "line": 6,
          "type": "comment-marker",
          "code": "// Placeholder implementation",
          "context": "    4: \n    5: export class ProgressTracker {\n>>> 6:   // Placeholder implementation\n    7: }",
          "functionName": "unknown",
          "className": "ProgressTracker",
          "severity": "medium"
        },
        {
          "file": "src/migration/enterprise/ProgressTracker.ts",
          "line": 6,
          "type": "placeholder-keyword",
          "code": "// Placeholder implementation",
          "context": "    4: \n    5: export class ProgressTracker {\n>>> 6:   // Placeholder implementation\n    7: }",
          "functionName": "unknown",
          "className": "ProgressTracker",
          "severity": "medium"
        }
      ],
      "src/migration/validation/PostMigrationValidator.ts": [
        {
          "file": "src/migration/validation/PostMigrationValidator.ts",
          "line": 20,
          "type": "comment-marker",
          "code": "// Placeholder implementation",
          "context": "    18:     this.logger.info('Starting post-migration validation');\n    19:     \n>>> 20:     // Placeholder implementation\n    21:     return {\n    22:       isValid: true,",
          "functionName": "validate",
          "className": "PostMigrationValidator",
          "severity": "medium"
        },
        {
          "file": "src/migration/validation/PostMigrationValidator.ts",
          "line": 20,
          "type": "placeholder-keyword",
          "code": "// Placeholder implementation",
          "context": "    18:     this.logger.info('Starting post-migration validation');\n    19:     \n>>> 20:     // Placeholder implementation\n    21:     return {\n    22:       isValid: true,",
          "functionName": "validate",
          "className": "PostMigrationValidator",
          "severity": "medium"
        }
      ],
      "src/migration/validation/PreMigrationValidator.ts": [
        {
          "file": "src/migration/validation/PreMigrationValidator.ts",
          "line": 85,
          "type": "empty-block",
          "code": "options: PreValidationOptions = {}",
          "context": "    83:     entities: string[],\n    84:     config: MigrationConfig,\n>>> 85:     options: PreValidationOptions = {}\n    86:   ): Promise<ValidationResult> {\n    87:     const validationOptions: PreValidationOptions = {",
          "functionName": "constructor",
          "className": "PreMigrationValidator",
          "severity": "medium"
        },
        {
          "file": "src/migration/validation/PreMigrationValidator.ts",
          "line": 412,
          "type": "comment-marker",
          "code": "consistency: 90, // Placeholder",
          "context": "    410:         completeness: this.calculateCompleteness(schema, records),\n    411:         accuracy: this.calculateAccuracy(schema, records),\n>>> 412:         consistency: 90, // Placeholder\n    413:         validity: 85     // Placeholder\n    414:       }",
          "functionName": "if",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/migration/validation/PreMigrationValidator.ts",
          "line": 412,
          "type": "placeholder-keyword",
          "code": "consistency: 90, // Placeholder",
          "context": "    410:         completeness: this.calculateCompleteness(schema, records),\n    411:         accuracy: this.calculateAccuracy(schema, records),\n>>> 412:         consistency: 90, // Placeholder\n    413:         validity: 85     // Placeholder\n    414:       }",
          "functionName": "if",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/migration/validation/PreMigrationValidator.ts",
          "line": 413,
          "type": "comment-marker",
          "code": "validity: 85     // Placeholder",
          "context": "    411:         accuracy: this.calculateAccuracy(schema, records),\n    412:         consistency: 90, // Placeholder\n>>> 413:         validity: 85     // Placeholder\n    414:       }\n    415:     };",
          "functionName": "if",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/migration/validation/PreMigrationValidator.ts",
          "line": 413,
          "type": "placeholder-keyword",
          "code": "validity: 85     // Placeholder",
          "context": "    411:         accuracy: this.calculateAccuracy(schema, records),\n    412:         consistency: 90, // Placeholder\n>>> 413:         validity: 85     // Placeholder\n    414:       }\n    415:     };",
          "functionName": "if",
          "className": null,
          "severity": "medium"
        }
      ],
      "src/performance/integration/AutotaskPerformanceIntegration.ts": [
        {
          "file": "src/performance/integration/AutotaskPerformanceIntegration.ts",
          "line": 34,
          "type": "empty-block",
          "code": "} = {}",
          "context": "    32:       cache?: CacheConfig;\n    33:       optimization?: OptimizationConfig;\n>>> 34:     } = {}\n    35:   ) {\n    36:     this.performanceMonitor = new PerformanceMonitor(logger, config.performance);",
          "functionName": "unknown",
          "className": "AutotaskPerformanceIntegration",
          "severity": "low"
        },
        {
          "file": "src/performance/integration/AutotaskPerformanceIntegration.ts",
          "line": 102,
          "type": "not-implemented",
          "code": "patterns: [] // Method not implemented yet",
          "context": "    100:       metrics: this.cache.getMetrics(),\n    101:       // patterns: this.cache.getRequestPatterns?.() || []\n>>> 102:       patterns: [] // Method not implemented yet\n    103:     };\n    104: ",
          "functionName": "disable",
          "className": "AutotaskPerformanceIntegration",
          "severity": "high"
        },
        {
          "file": "src/performance/integration/AutotaskPerformanceIntegration.ts",
          "line": 296,
          "type": "empty-block",
          "code": "request: {}",
          "context": "    294:             headers: { 'x-cache': 'HIT' },\n    295:             config,\n>>> 296:             request: {}\n    297:           } as AxiosResponse;\n    298: ",
          "functionName": "if",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/performance/integration/AutotaskPerformanceIntegration.ts",
          "line": 552,
          "type": "empty-block",
          "code": "metadata: (config as any).metadata || {}",
          "context": "    550:       headers: config.headers as Record<string, string>,\n    551:       priority: 5, // Default priority\n>>> 552:       metadata: (config as any).metadata || {}\n    553:     };\n    554:   }",
          "functionName": "convertToBatchRequest",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/performance/integration/AutotaskPerformanceIntegration.ts",
          "line": 563,
          "type": "empty-block",
          "code": "request: {}",
          "context": "    561:       headers: batchResponse.headers,\n    562:       config,\n>>> 563:       request: {}\n    564:     } as AxiosResponse;\n    565:   }",
          "functionName": "convertToAxiosResponse",
          "className": null,
          "severity": "low"
        }
      ],
      "src/performance/monitoring/PerformanceMonitor.ts": [
        {
          "file": "src/performance/monitoring/PerformanceMonitor.ts",
          "line": 46,
          "type": "empty-block",
          "code": "config: PerformanceConfig = {}",
          "context": "    44:   constructor(\n    45:     private logger: winston.Logger,\n>>> 46:     config: PerformanceConfig = {}\n    47:   ) {\n    48:     super();",
          "functionName": "unknown",
          "className": "PerformanceMonitor",
          "severity": "low"
        },
        {
          "file": "src/performance/monitoring/PerformanceMonitor.ts",
          "line": 388,
          "type": "placeholder-keyword",
          "code": "// For now, return a placeholder value",
          "context": "    386:   private getCacheHitRate(): number {\n    387:     // This would be implemented by the caching system\n>>> 388:     // For now, return a placeholder value\n    389:     return 85; // 85% cache hit rate\n    390:   }",
          "functionName": "getCacheHitRate",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/performance/monitoring/PerformanceMonitor.ts",
          "line": 388,
          "type": "temporary-placeholder",
          "code": "// For now, return a placeholder value",
          "context": "    386:   private getCacheHitRate(): number {\n    387:     // This would be implemented by the caching system\n>>> 388:     // For now, return a placeholder value\n    389:     return 85; // 85% cache hit rate\n    390:   }",
          "functionName": "getCacheHitRate",
          "className": null,
          "severity": "high"
        }
      ],
      "src/performance/optimization/RequestOptimizer.ts": [
        {
          "file": "src/performance/optimization/RequestOptimizer.ts",
          "line": 47,
          "type": "empty-block",
          "code": "config: OptimizationConfig = {}",
          "context": "    45:   constructor(\n    46:     private logger: winston.Logger,\n>>> 47:     config: OptimizationConfig = {}\n    48:   ) {\n    49:     super();",
          "functionName": "unknown",
          "className": "RequestOptimizer",
          "severity": "low"
        }
      ],
      "src/queue/backends/RedisBackend.ts": [
        {
          "file": "src/queue/backends/RedisBackend.ts",
          "line": 791,
          "type": "empty-block",
          "code": "metadata: data[8] ? JSON.parse(data[8]) : {}",
          "context": "    789:       timeout: parseInt(data[6] || '1000'),\n    790:       status: (data[7] as any) || 'collecting',\n>>> 791:       metadata: data[8] ? JSON.parse(data[8]) : {}\n    792:     };\n    793:   }",
          "functionName": "if",
          "className": null,
          "severity": "low"
        }
      ],
      "src/queue/backends/SQLiteBackend.ts": [
        {
          "file": "src/queue/backends/SQLiteBackend.ts",
          "line": 352,
          "type": "placeholder-keyword",
          "code": "const placeholders = statusArray.map(() => '?').join(',');",
          "context": "    350:       if (filter.status) {\n    351:         const statusArray = Array.isArray(filter.status) ? filter.status : [filter.status];\n>>> 352:         const placeholders = statusArray.map(() => '?').join(',');\n    353:         query += ` AND status IN (${placeholders})`;\n    354:         params.push(...statusArray);",
          "functionName": "if",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/queue/backends/SQLiteBackend.ts",
          "line": 353,
          "type": "placeholder-keyword",
          "code": "query += ` AND status IN (${placeholders})`;",
          "context": "    351:         const statusArray = Array.isArray(filter.status) ? filter.status : [filter.status];\n    352:         const placeholders = statusArray.map(() => '?').join(',');\n>>> 353:         query += ` AND status IN (${placeholders})`;\n    354:         params.push(...statusArray);\n    355:       }",
          "functionName": "if",
          "className": null,
          "severity": "medium"
        }
      ],
      "src/queue/core/QueueManager.ts": [
        {
          "file": "src/queue/core/QueueManager.ts",
          "line": 168,
          "type": "empty-block",
          "code": "} = {}",
          "context": "    166:       metadata?: Record<string, any>;\n    167:       scheduledAt?: Date;\n>>> 168:     } = {}\n    169:   ): Promise<T> {\n    170:     // Validate queue capacity",
          "functionName": "catch",
          "className": null,
          "severity": "low"
        }
      ],
      "src/queue/strategies/BatchManager.ts": [
        {
          "file": "src/queue/strategies/BatchManager.ts",
          "line": 74,
          "type": "empty-block",
          "code": "options: Partial<BatchManagerOptions> = {}",
          "context": "    72:     batchTimeout: number,\n    73:     logger: winston.Logger,\n>>> 74:     options: Partial<BatchManagerOptions> = {}\n    75:   ) {\n    76:     super();",
          "functionName": "unknown",
          "className": "BatchManager",
          "severity": "low"
        },
        {
          "file": "src/queue/strategies/BatchManager.ts",
          "line": 504,
          "type": "comment-marker",
          "code": "this.stats.deduplicationRate = 0; // Placeholder",
          "context": "    502:     \n    503:     // Deduplication rate (would need tracking of duplicates)\n>>> 504:     this.stats.deduplicationRate = 0; // Placeholder\n    505:     \n    506:     // Timeout rate (batches processed due to timeout vs size)",
          "functionName": "if",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/queue/strategies/BatchManager.ts",
          "line": 504,
          "type": "placeholder-keyword",
          "code": "this.stats.deduplicationRate = 0; // Placeholder",
          "context": "    502:     \n    503:     // Deduplication rate (would need tracking of duplicates)\n>>> 504:     this.stats.deduplicationRate = 0; // Placeholder\n    505:     \n    506:     // Timeout rate (batches processed due to timeout vs size)",
          "functionName": "if",
          "className": null,
          "severity": "medium"
        }
      ],
      "src/queue/utils/QueueFactory.ts": [
        {
          "file": "src/queue/utils/QueueFactory.ts",
          "line": 19,
          "type": "empty-block",
          "code": "options: Partial<QueueManagerOptions> = {}",
          "context": "    17:  */\n    18: export async function createQueueManager(\n>>> 19:   options: Partial<QueueManagerOptions> = {}\n    20: ): Promise<QueueManager> {\n    21:   const logger = options.logger || createDefaultLogger();",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/queue/utils/QueueFactory.ts",
          "line": 39,
          "type": "empty-block",
          "code": "overrides: Partial<QueueConfiguration> = {}",
          "context": "    37:  */\n    38: export function createDefaultConfiguration(\n>>> 39:   overrides: Partial<QueueConfiguration> = {}\n    40: ): QueueConfiguration {\n    41:   return {",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/queue/utils/QueueFactory.ts",
          "line": 88,
          "type": "empty-block",
          "code": "overrides: Partial<QueueConfiguration> = {}",
          "context": "    86:  */\n    87: export function createProductionConfiguration(\n>>> 88:   overrides: Partial<QueueConfiguration> = {}\n    89: ): QueueConfiguration {\n    90:   return createDefaultConfiguration({",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/queue/utils/QueueFactory.ts",
          "line": 140,
          "type": "empty-block",
          "code": "overrides: Partial<QueueConfiguration> = {}",
          "context": "    138:     db?: number;\n    139:   },\n>>> 140:   overrides: Partial<QueueConfiguration> = {}\n    141: ): QueueConfiguration {\n    142:   return createDefaultConfiguration({",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/queue/utils/QueueFactory.ts",
          "line": 186,
          "type": "empty-block",
          "code": "overrides: Partial<QueueConfiguration> = {}",
          "context": "    184:  */\n    185: export function createDevelopmentConfiguration(\n>>> 186:   overrides: Partial<QueueConfiguration> = {}\n    187: ): QueueConfiguration {\n    188:   return createDefaultConfiguration({",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/queue/utils/QueueFactory.ts",
          "line": 225,
          "type": "empty-block",
          "code": "overrides: Partial<QueueConfiguration> = {}",
          "context": "    223:  */\n    224: export function createTestConfiguration(\n>>> 225:   overrides: Partial<QueueConfiguration> = {}\n    226: ): QueueConfiguration {\n    227:   return createDefaultConfiguration({",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        }
      ],
      "src/rate-limiting/ProductionReliabilityManager.ts": [
        {
          "file": "src/rate-limiting/ProductionReliabilityManager.ts",
          "line": 239,
          "type": "empty-block",
          "code": "} = {}",
          "context": "    237:       data?: any;\n    238:       headers?: Record<string, string>;\n>>> 239:     } = {}\n    240:   ): Promise<T> {\n    241:     // Check if we should shed this request",
          "functionName": "if",
          "className": null,
          "severity": "low"
        }
      ],
      "src/relationships/batch/BatchRelationshipProcessor.ts": [
        {
          "file": "src/relationships/batch/BatchRelationshipProcessor.ts",
          "line": 101,
          "type": "empty-block",
          "code": "options: Partial<BatchProcessingOptions> = {}",
          "context": "    99:   public async processBatchOperations(\n    100:     operations: BatchOperation[],\n>>> 101:     options: Partial<BatchProcessingOptions> = {}\n    102:   ): Promise<BatchResult> {\n    103:     const operationId = this.generateOperationId();",
          "functionName": "unknown",
          "className": "BatchRelationshipProcessor",
          "severity": "low"
        },
        {
          "file": "src/relationships/batch/BatchRelationshipProcessor.ts",
          "line": 158,
          "type": "empty-block",
          "code": "options: Partial<BatchProcessingOptions> = {}",
          "context": "    156:       id?: string; // Optional client-provided ID for tracking\n    157:     }>,\n>>> 158:     options: Partial<BatchProcessingOptions> = {}\n    159:   ): Promise<BatchResult> {\n    160:     const operations: BatchOperation[] = records.map((record, index) => ({",
          "functionName": "if",
          "className": "BatchRelationshipProcessor",
          "severity": "low"
        },
        {
          "file": "src/relationships/batch/BatchRelationshipProcessor.ts",
          "line": 189,
          "type": "empty-block",
          "code": "options: Partial<BatchProcessingOptions & { followDependents?: boolean }> = {}",
          "context": "    187:       id?: string;\n    188:     }>,\n>>> 189:     options: Partial<BatchProcessingOptions & { followDependents?: boolean }> = {}\n    190:   ): Promise<BatchResult> {\n    191:     const operations: BatchOperation[] = updates.map(update => ({",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/relationships/batch/BatchRelationshipProcessor.ts",
          "line": 216,
          "type": "empty-block",
          "code": "options: Partial<BatchProcessingOptions & { force?: boolean; safetyChecks?: boolean }> = {}",
          "context": "    214:     entityName: string,\n    215:     recordIds: (string | number)[],\n>>> 216:     options: Partial<BatchProcessingOptions & { force?: boolean; safetyChecks?: boolean }> = {}\n    217:   ): Promise<BatchResult> {\n    218:     const operations: BatchOperation[] = recordIds.map(recordId => ({",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        }
      ],
      "src/relationships/cascade/CascadeEngine.ts": [
        {
          "file": "src/relationships/cascade/CascadeEngine.ts",
          "line": 42,
          "type": "empty-block",
          "code": "} = {}",
          "context": "    40:       batchSize?: number;\n    41:       continueOnError?: boolean;\n>>> 42:     } = {}\n    43:   ): Promise<CascadeResult> {\n    44:     const startTime = Date.now();",
          "functionName": "constructor",
          "className": "CascadeEngine",
          "severity": "low"
        },
        {
          "file": "src/relationships/cascade/CascadeEngine.ts",
          "line": 111,
          "type": "empty-block",
          "code": "} = {}",
          "context": "    109:       continueOnError?: boolean;\n    110:       followDependents?: boolean;\n>>> 111:     } = {}\n    112:   ): Promise<CascadeResult> {\n    113:     const startTime = Date.now();",
          "functionName": "catch",
          "className": "CascadeEngine",
          "severity": "low"
        },
        {
          "file": "src/relationships/cascade/CascadeEngine.ts",
          "line": 180,
          "type": "empty-block",
          "code": "} = {}",
          "context": "    178:       force?: boolean;\n    179:       safetyChecks?: boolean;\n>>> 180:     } = {}\n    181:   ): Promise<CascadeResult> {\n    182:     const startTime = Date.now();",
          "functionName": "catch",
          "className": null,
          "severity": "low"
        }
      ],
      "src/relationships/graph/GraphTraversalEngine.ts": [
        {
          "file": "src/relationships/graph/GraphTraversalEngine.ts",
          "line": 56,
          "type": "empty-block",
          "code": "options: Partial<TraversalOptions> = {}",
          "context": "    54:     startEntity: string,\n    55:     targetEntity?: string,\n>>> 56:     options: Partial<TraversalOptions> = {}\n    57:   ): GraphTraversalResult {\n    58:     const startTime = Date.now();",
          "functionName": "constructor",
          "className": "GraphTraversalEngine",
          "severity": "low"
        },
        {
          "file": "src/relationships/graph/GraphTraversalEngine.ts",
          "line": 152,
          "type": "empty-block",
          "code": "options: Partial<TraversalOptions> = {}",
          "context": "    150:     startEntity: string,\n    151:     targetEntity?: string,\n>>> 152:     options: Partial<TraversalOptions> = {}\n    153:   ): GraphTraversalResult {\n    154:     const startTime = Date.now();",
          "functionName": "for",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/relationships/graph/GraphTraversalEngine.ts",
          "line": 248,
          "type": "empty-block",
          "code": "options: Partial<TraversalOptions> = {}",
          "context": "    246:     startEntity: string,\n    247:     targetEntity: string,\n>>> 248:     options: Partial<TraversalOptions> = {}\n    249:   ): RelationshipPath | null {\n    250:     const distances = new Map<string, number>();",
          "functionName": "for",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/relationships/graph/GraphTraversalEngine.ts",
          "line": 313,
          "type": "empty-block",
          "code": "options: Partial<TraversalOptions> = {}",
          "context": "    311:     startEntity: string,\n    312:     targetEntity: string,\n>>> 313:     options: Partial<TraversalOptions> = {}\n    314:   ): RelationshipPath[] {\n    315:     const paths: RelationshipPath[] = [];",
          "functionName": "for",
          "className": null,
          "severity": "low"
        }
      ],
      "src/relationships/integrity/DataIntegrityManager.ts": [
        {
          "file": "src/relationships/integrity/DataIntegrityManager.ts",
          "line": 360,
          "type": "empty-block",
          "code": "} = {}",
          "context": "    358:       stepByStep?: boolean;\n    359:       backupData?: boolean;\n>>> 360:     } = {}\n    361:   ): Promise<{\n    362:     success: boolean;",
          "functionName": "unknown",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/relationships/integrity/DataIntegrityManager.ts",
          "line": 424,
          "type": "empty-block",
          "code": "} = {}",
          "context": "    422:       maxAge?: number; // Days\n    423:       severityThreshold?: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n>>> 424:     } = {}\n    425:   ): Promise<{\n    426:     deletedRecords: Array<{ entityName: string; recordId: string | number }>;",
          "functionName": "if",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/relationships/integrity/DataIntegrityManager.ts",
          "line": 486,
          "type": "placeholder-keyword",
          "code": "// This is a placeholder implementation",
          "context": "    484:   private async executeQuery(query: string, batchSize: number): Promise<any[]> {\n    485:     // Execute query using Autotask client\n>>> 486:     // This is a placeholder implementation\n    487:     return [];\n    488:   }",
          "functionName": "executeQuery",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/relationships/integrity/DataIntegrityManager.ts",
          "line": 486,
          "type": "explicit-placeholder",
          "code": "// This is a placeholder implementation",
          "context": "    484:   private async executeQuery(query: string, batchSize: number): Promise<any[]> {\n    485:     // Execute query using Autotask client\n>>> 486:     // This is a placeholder implementation\n    487:     return [];\n    488:   }",
          "functionName": "executeQuery",
          "className": null,
          "severity": "high"
        }
      ],
      "src/relationships/loading/SmartLoadingEngine.ts": [
        {
          "file": "src/relationships/loading/SmartLoadingEngine.ts",
          "line": 75,
          "type": "empty-block",
          "code": "options: RelationshipQueryOptions = {}",
          "context": "    73:     entityName: string,\n    74:     recordId: string | number,\n>>> 75:     options: RelationshipQueryOptions = {}\n    76:   ): Promise<LoadingResult> {\n    77:     const context: LoadingContext = {",
          "functionName": "constructor",
          "className": "SmartLoadingEngine",
          "severity": "low"
        },
        {
          "file": "src/relationships/loading/SmartLoadingEngine.ts",
          "line": 154,
          "type": "empty-block",
          "code": "} = {}",
          "context": "    152:       parallelism?: number;\n    153:       optimizeQueries?: boolean;\n>>> 154:     } = {}\n    155:   ): Promise<Map<string, LoadingResult>> {\n    156:     const results = new Map<string, LoadingResult>();",
          "functionName": "catch",
          "className": "SmartLoadingEngine",
          "severity": "low"
        },
        {
          "file": "src/relationships/loading/SmartLoadingEngine.ts",
          "line": 195,
          "type": "empty-block",
          "code": "} = {}",
          "context": "    193:       loadingStrategy?: LoadingStrategy;\n    194:       priority?: 'LOW' | 'MEDIUM' | 'HIGH';\n>>> 195:     } = {}\n    196:   ): Promise<void> {\n    197:     const relationships = options.relationships || ",
          "functionName": "for",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/relationships/loading/SmartLoadingEngine.ts",
          "line": 643,
          "type": "comment-marker",
          "code": "// Placeholder methods for actual data loading",
          "context": "    641:   }\n    642: \n>>> 643:   // Placeholder methods for actual data loading\n    644:   private async loadOneToManyRelationship(relationship: EntityRelationship, recordId: string | number): Promise<any[]> {\n    645:     // Implementation would use Autotask client to fetch related records",
          "functionName": "isHighPriorityRelationship",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/relationships/loading/SmartLoadingEngine.ts",
          "line": 643,
          "type": "placeholder-keyword",
          "code": "// Placeholder methods for actual data loading",
          "context": "    641:   }\n    642: \n>>> 643:   // Placeholder methods for actual data loading\n    644:   private async loadOneToManyRelationship(relationship: EntityRelationship, recordId: string | number): Promise<any[]> {\n    645:     // Implementation would use Autotask client to fetch related records",
          "functionName": "isHighPriorityRelationship",
          "className": null,
          "severity": "medium"
        }
      ],
      "src/tools/entity-generator.ts": [
        {
          "file": "src/tools/entity-generator.ts",
          "line": 486,
          "type": "mock-keyword",
          "code": "const mockData = [",
          "context": "    484:     testMethods.push(`  describe('list', () => {\n    485:     it('should list ${entity.pluralName.toLowerCase()} successfully', async () => {\n>>> 486:       const mockData = [\n    487:         { id: 1, name: '${entity.name} 1' },\n    488:         { id: 2, name: '${entity.name} 2' },",
          "functionName": "generateTestFile",
          "className": "for",
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 491,
          "type": "mock-keyword",
          "code": "mockAxios.get.mockResolvedValueOnce({",
          "context": "    489:       ];\n    490: \n>>> 491:       mockAxios.get.mockResolvedValueOnce({\n    492:         data: { items: mockData },\n    493:         status: 200,",
          "functionName": "generateTestFile",
          "className": "for",
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 492,
          "type": "mock-keyword",
          "code": "data: { items: mockData },",
          "context": "    490: \n    491:       mockAxios.get.mockResolvedValueOnce({\n>>> 492:         data: { items: mockData },\n    493:         status: 200,\n    494:         statusText: 'OK',",
          "functionName": "generateTestFile",
          "className": "for",
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 501,
          "type": "mock-keyword",
          "code": "expect(result.data).toEqual(mockData);",
          "context": "    499:       const result = await ${camelPlural}.list();\n    500: \n>>> 501:       expect(result.data).toEqual(mockData);\n    502:       expect(mockAxios.get).toHaveBeenCalledWith('/${entity.pluralName}/query', {\n    503:         params: {",
          "functionName": "generateTestFile",
          "className": "for",
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 502,
          "type": "mock-keyword",
          "code": "expect(mockAxios.get).toHaveBeenCalledWith('/${entity.pluralName}/query', {",
          "context": "    500: \n    501:       expect(result.data).toEqual(mockData);\n>>> 502:       expect(mockAxios.get).toHaveBeenCalledWith('/${entity.pluralName}/query', {\n    503:         params: {\n    504:           filter: [{ op: 'gte', field: 'id', value: 0 }]",
          "functionName": "generateTestFile",
          "className": "for",
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 517,
          "type": "mock-keyword",
          "code": "mockAxios.get.mockResolvedValueOnce({",
          "context": "    515:       };\n    516: \n>>> 517:       mockAxios.get.mockResolvedValueOnce({\n    518:         data: { items: [] },\n    519:         status: 200,",
          "functionName": "generateTestFile",
          "className": "for",
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 527,
          "type": "mock-keyword",
          "code": "expect(mockAxios.get).toHaveBeenCalledWith('/${entity.pluralName}/query', {",
          "context": "    525:       await ${camelPlural}.list(query);\n    526: \n>>> 527:       expect(mockAxios.get).toHaveBeenCalledWith('/${entity.pluralName}/query', {\n    528:         params: {\n    529:           filter: [{ op: 'eq', field: 'name', value: 'test' }],",
          "functionName": "unknown",
          "className": "for",
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 542,
          "type": "mock-keyword",
          "code": "const mockData = { id: 1, name: 'Test ${entity.name}' };",
          "context": "    540:       testMethods.push(`  describe('get', () => {\n    541:     it('should get ${entity.name.toLowerCase()} by id', async () => {\n>>> 542:       const mockData = { id: 1, name: 'Test ${entity.name}' };\n    543: \n    544:       mockAxios.get.mockResolvedValueOnce({",
          "functionName": "unknown",
          "className": "for",
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 544,
          "type": "mock-keyword",
          "code": "mockAxios.get.mockResolvedValueOnce({",
          "context": "    542:       const mockData = { id: 1, name: 'Test ${entity.name}' };\n    543: \n>>> 544:       mockAxios.get.mockResolvedValueOnce({\n    545:         data: { item: mockData },\n    546:         status: 200,",
          "functionName": "unknown",
          "className": "for",
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 545,
          "type": "mock-keyword",
          "code": "data: { item: mockData },",
          "context": "    543: \n    544:       mockAxios.get.mockResolvedValueOnce({\n>>> 545:         data: { item: mockData },\n    546:         status: 200,\n    547:         statusText: 'OK',",
          "functionName": "unknown",
          "className": "for",
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 554,
          "type": "mock-keyword",
          "code": "expect(result.data).toEqual(mockData);",
          "context": "    552:       const result = await ${camelPlural}.get(1);\n    553: \n>>> 554:       expect(result.data).toEqual(mockData);\n    555:       expect(mockAxios.get).toHaveBeenCalledWith('/${entity.pluralName}/1');\n    556:     });",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 555,
          "type": "mock-keyword",
          "code": "expect(mockAxios.get).toHaveBeenCalledWith('/${entity.pluralName}/1');",
          "context": "    553: \n    554:       expect(result.data).toEqual(mockData);\n>>> 555:       expect(mockAxios.get).toHaveBeenCalledWith('/${entity.pluralName}/1');\n    556:     });\n    557:   });`);",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 565,
          "type": "mock-keyword",
          "code": "const mockResponse = { id: 1, ...${camelName}Data };",
          "context": "    563:     it('should create ${entity.name.toLowerCase()} successfully', async () => {\n    564:       const ${camelName}Data = { name: 'New ${entity.name}' };\n>>> 565:       const mockResponse = { id: 1, ...${camelName}Data };\n    566: \n    567:       mockAxios.post.mockResolvedValueOnce({",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 567,
          "type": "mock-keyword",
          "code": "mockAxios.post.mockResolvedValueOnce({",
          "context": "    565:       const mockResponse = { id: 1, ...${camelName}Data };\n    566: \n>>> 567:       mockAxios.post.mockResolvedValueOnce({\n    568:         data: { item: mockResponse },\n    569:         status: 201,",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 568,
          "type": "mock-keyword",
          "code": "data: { item: mockResponse },",
          "context": "    566: \n    567:       mockAxios.post.mockResolvedValueOnce({\n>>> 568:         data: { item: mockResponse },\n    569:         status: 201,\n    570:         statusText: 'Created',",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 577,
          "type": "mock-keyword",
          "code": "expect(result.data).toEqual(mockResponse);",
          "context": "    575:       const result = await ${camelPlural}.create(${camelName}Data);\n    576: \n>>> 577:       expect(result.data).toEqual(mockResponse);\n    578:       expect(mockAxios.post).toHaveBeenCalledWith('/${entity.pluralName}', ${camelName}Data);\n    579:     });",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 578,
          "type": "mock-keyword",
          "code": "expect(mockAxios.post).toHaveBeenCalledWith('/${entity.pluralName}', ${camelName}Data);",
          "context": "    576: \n    577:       expect(result.data).toEqual(mockResponse);\n>>> 578:       expect(mockAxios.post).toHaveBeenCalledWith('/${entity.pluralName}', ${camelName}Data);\n    579:     });\n    580:   });`);",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 588,
          "type": "mock-keyword",
          "code": "const mockResponse = { id: 1, ...${camelName}Data };",
          "context": "    586:     it('should update ${entity.name.toLowerCase()} successfully', async () => {\n    587:       const ${camelName}Data = { name: 'Updated ${entity.name}' };\n>>> 588:       const mockResponse = { id: 1, ...${camelName}Data };\n    589: \n    590:       mockAxios.put.mockResolvedValueOnce({",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 590,
          "type": "mock-keyword",
          "code": "mockAxios.put.mockResolvedValueOnce({",
          "context": "    588:       const mockResponse = { id: 1, ...${camelName}Data };\n    589: \n>>> 590:       mockAxios.put.mockResolvedValueOnce({\n    591:         data: { item: mockResponse },\n    592:         status: 200,",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 591,
          "type": "mock-keyword",
          "code": "data: { item: mockResponse },",
          "context": "    589: \n    590:       mockAxios.put.mockResolvedValueOnce({\n>>> 591:         data: { item: mockResponse },\n    592:         status: 200,\n    593:         statusText: 'OK',",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 600,
          "type": "mock-keyword",
          "code": "expect(result.data).toEqual(mockResponse);",
          "context": "    598:       const result = await ${camelPlural}.update(1, ${camelName}Data);\n    599: \n>>> 600:       expect(result.data).toEqual(mockResponse);\n    601:       expect(mockAxios.put).toHaveBeenCalledWith('/${entity.pluralName}/1', ${camelName}Data);\n    602:     });",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 601,
          "type": "mock-keyword",
          "code": "expect(mockAxios.put).toHaveBeenCalledWith('/${entity.pluralName}/1', ${camelName}Data);",
          "context": "    599: \n    600:       expect(result.data).toEqual(mockResponse);\n>>> 601:       expect(mockAxios.put).toHaveBeenCalledWith('/${entity.pluralName}/1', ${camelName}Data);\n    602:     });\n    603:   });`);",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 611,
          "type": "mock-keyword",
          "code": "const mockResponse = { id: 1, ...${camelName}Data };",
          "context": "    609:     it('should partially update ${entity.name.toLowerCase()} successfully', async () => {\n    610:       const ${camelName}Data = { name: 'Patched ${entity.name}' };\n>>> 611:       const mockResponse = { id: 1, ...${camelName}Data };\n    612: \n    613:       mockAxios.patch.mockResolvedValueOnce({",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 613,
          "type": "mock-keyword",
          "code": "mockAxios.patch.mockResolvedValueOnce({",
          "context": "    611:       const mockResponse = { id: 1, ...${camelName}Data };\n    612: \n>>> 613:       mockAxios.patch.mockResolvedValueOnce({\n    614:         data: { item: mockResponse },\n    615:         status: 200,",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 614,
          "type": "mock-keyword",
          "code": "data: { item: mockResponse },",
          "context": "    612: \n    613:       mockAxios.patch.mockResolvedValueOnce({\n>>> 614:         data: { item: mockResponse },\n    615:         status: 200,\n    616:         statusText: 'OK',",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 623,
          "type": "mock-keyword",
          "code": "expect(result.data).toEqual(mockResponse);",
          "context": "    621:       const result = await ${camelPlural}.patch(1, ${camelName}Data);\n    622: \n>>> 623:       expect(result.data).toEqual(mockResponse);\n    624:       expect(mockAxios.patch).toHaveBeenCalledWith('/${entity.pluralName}/1', ${camelName}Data);\n    625:     });",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 624,
          "type": "mock-keyword",
          "code": "expect(mockAxios.patch).toHaveBeenCalledWith('/${entity.pluralName}/1', ${camelName}Data);",
          "context": "    622: \n    623:       expect(result.data).toEqual(mockResponse);\n>>> 624:       expect(mockAxios.patch).toHaveBeenCalledWith('/${entity.pluralName}/1', ${camelName}Data);\n    625:     });\n    626:   });`);",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 633,
          "type": "mock-keyword",
          "code": "mockAxios.delete.mockResolvedValueOnce({",
          "context": "    631:       testMethods.push(`  describe('delete', () => {\n    632:     it('should delete ${entity.name.toLowerCase()} successfully', async () => {\n>>> 633:       mockAxios.delete.mockResolvedValueOnce({\n    634:         data: {},\n    635:         status: 200,",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 643,
          "type": "mock-keyword",
          "code": "expect(mockAxios.delete).toHaveBeenCalledWith('/${entity.pluralName}/1');",
          "context": "    641:       await ${camelPlural}.delete(1);\n    642: \n>>> 643:       expect(mockAxios.delete).toHaveBeenCalledWith('/${entity.pluralName}/1');\n    644:     });\n    645:   });`);",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 666,
          "type": "mock-keyword",
          "code": "let mockAxios: jest.Mocked<AxiosInstance>;",
          "context": "    664: describe('${className} Entity', () => {\n    665:   let ${camelPlural}: ${className};\n>>> 666:   let mockAxios: jest.Mocked<AxiosInstance>;\n    667:   let mockLogger: winston.Logger;\n    668: ",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 667,
          "type": "mock-keyword",
          "code": "let mockLogger: winston.Logger;",
          "context": "    665:   let ${camelPlural}: ${className};\n    666:   let mockAxios: jest.Mocked<AxiosInstance>;\n>>> 667:   let mockLogger: winston.Logger;\n    668: \n    669:   beforeEach(() => {",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 670,
          "type": "mock-keyword",
          "code": "mockAxios = {",
          "context": "    668: \n    669:   beforeEach(() => {\n>>> 670:     mockAxios = {\n    671:       get: jest.fn(),\n    672:       post: jest.fn(),",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 688,
          "type": "mock-keyword",
          "code": "mockLogger = winston.createLogger({",
          "context": "    686:     } as any;\n    687: \n>>> 688:     mockLogger = winston.createLogger({\n    689:       level: 'error',\n    690:       transports: [new winston.transports.Console({ silent: true })],",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 693,
          "type": "mock-keyword",
          "code": "${camelPlural} = new ${className}(mockAxios, mockLogger);",
          "context": "    691:     });\n    692: \n>>> 693:     ${camelPlural} = new ${className}(mockAxios, mockLogger);\n    694:   });\n    695: ",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/tools/entity-generator.ts",
          "line": 697,
          "type": "mock-keyword",
          "code": "jest.clearAllMocks();",
          "context": "    695: \n    696:   afterEach(() => {\n>>> 697:     jest.clearAllMocks();\n    698:   });\n    699: ",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        }
      ],
      "src/utils/memoryOptimization.ts": [
        {
          "file": "src/utils/memoryOptimization.ts",
          "line": 32,
          "type": "empty-block",
          "code": "private config: MemoryOptimizationConfig = {}",
          "context": "    30:     private axios: AxiosInstance,\n    31:     private logger: winston.Logger,\n>>> 32:     private config: MemoryOptimizationConfig = {}\n    33:   ) {\n    34:     this.config = { ...this.defaultConfig, ...config };",
          "functionName": "unknown",
          "className": "PaginationHandler",
          "severity": "low"
        }
      ],
      "src/utils/queryableEntity.ts": [
        {
          "file": "src/utils/queryableEntity.ts",
          "line": 21,
          "type": "empty-block",
          "code": ") {}",
          "context": "    19:     protected axios: AxiosInstance,\n    20:     protected logger: winston.Logger\n>>> 21:   ) {}\n    22: \n    23:   /**",
          "functionName": "unknown",
          "className": "QueryableEntity",
          "severity": "low"
        }
      ],
      "src/utils/requestHandler.ts": [
        {
          "file": "src/utils/requestHandler.ts",
          "line": 49,
          "type": "empty-block",
          "code": "private globalOptions: Partial<RequestOptions> = {}",
          "context": "    47:     private axios: AxiosInstance,\n    48:     private logger: winston.Logger,\n>>> 49:     private globalOptions: Partial<RequestOptions> = {}\n    50:   ) {\n    51:     this.performanceMonitor = new PerformanceMonitor(this.logger);",
          "functionName": "unknown",
          "className": "RequestHandler",
          "severity": "low"
        },
        {
          "file": "src/utils/requestHandler.ts",
          "line": 112,
          "type": "empty-block",
          "code": "options: RequestOptions = {}",
          "context": "    110:     endpoint: string,\n    111:     method: string,\n>>> 112:     options: RequestOptions = {}\n    113:   ): Promise<AxiosResponse<T>> {\n    114:     const mergedOptions = {",
          "functionName": "if",
          "className": "RequestHandler",
          "severity": "low"
        }
      ],
      "src/validation/compliance/ComplianceValidator.ts": [
        {
          "file": "src/validation/compliance/ComplianceValidator.ts",
          "line": 337,
          "type": "not-implemented",
          "code": "message: 'Adequate security measures not implemented',",
          "context": "    335:         field: '__gdpr__',\n    336:         code: 'GDPR_SECURITY_MEASURES',\n>>> 337:         message: 'Adequate security measures not implemented',\n    338:         severity: 'high',\n    339:         category: 'compliance'",
          "functionName": "if",
          "className": null,
          "severity": "high"
        }
      ],
      "src/validation/quality/QualityAssurance.ts": [
        {
          "file": "src/validation/quality/QualityAssurance.ts",
          "line": 547,
          "type": "placeholder-keyword",
          "code": "* Calculate uniqueness score (placeholder - requires database access for real implementation)",
          "context": "    545: \n    546:   /**\n>>> 547:    * Calculate uniqueness score (placeholder - requires database access for real implementation)\n    548:    */\n    549:   private async calculateUniqueness(entity: any, context: ValidationContext): Promise<number> {",
          "functionName": "if",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/validation/quality/QualityAssurance.ts",
          "line": 551,
          "type": "placeholder-keyword",
          "code": "// For now, return a high score as placeholder",
          "context": "    549:   private async calculateUniqueness(entity: any, context: ValidationContext): Promise<number> {\n    550:     // This would require checking against existing data\n>>> 551:     // For now, return a high score as placeholder\n    552:     return 95;\n    553:   }",
          "functionName": "calculateUniqueness",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/validation/quality/QualityAssurance.ts",
          "line": 774,
          "type": "comment-marker",
          "code": "// Placeholder implementation",
          "context": "    772: \n    773:   private async identifyQualityIssues(entities: any[], profile: QualityProfile): Promise<QualityIssue[]> {\n>>> 774:     // Placeholder implementation\n    775:     return [];\n    776:   }",
          "functionName": "identifyQualityIssues",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/validation/quality/QualityAssurance.ts",
          "line": 774,
          "type": "placeholder-keyword",
          "code": "// Placeholder implementation",
          "context": "    772: \n    773:   private async identifyQualityIssues(entities: any[], profile: QualityProfile): Promise<QualityIssue[]> {\n>>> 774:     // Placeholder implementation\n    775:     return [];\n    776:   }",
          "functionName": "identifyQualityIssues",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/validation/quality/QualityAssurance.ts",
          "line": 783,
          "type": "comment-marker",
          "code": "// Placeholder implementation",
          "context": "    781:     profile: QualityProfile\n    782:   ): Promise<QualityRecommendation[]> {\n>>> 783:     // Placeholder implementation\n    784:     return [];\n    785:   }",
          "functionName": "identifyQualityIssues",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/validation/quality/QualityAssurance.ts",
          "line": 783,
          "type": "placeholder-keyword",
          "code": "// Placeholder implementation",
          "context": "    781:     profile: QualityProfile\n    782:   ): Promise<QualityRecommendation[]> {\n>>> 783:     // Placeholder implementation\n    784:     return [];\n    785:   }",
          "functionName": "identifyQualityIssues",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/validation/quality/QualityAssurance.ts",
          "line": 788,
          "type": "comment-marker",
          "code": "// Placeholder implementation",
          "context": "    786: \n    787:   private async analyzeTrends(entityType: string): Promise<QualityTrend[]> {\n>>> 788:     // Placeholder implementation\n    789:     return [];\n    790:   }",
          "functionName": "analyzeTrends",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/validation/quality/QualityAssurance.ts",
          "line": 788,
          "type": "placeholder-keyword",
          "code": "// Placeholder implementation",
          "context": "    786: \n    787:   private async analyzeTrends(entityType: string): Promise<QualityTrend[]> {\n>>> 788:     // Placeholder implementation\n    789:     return [];\n    790:   }",
          "functionName": "analyzeTrends",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/validation/quality/QualityAssurance.ts",
          "line": 799,
          "type": "empty-block",
          "code": "vsTargets: {}",
          "context": "    797:       vsIndustry: {},\n    798:       vsHistorical: {},\n>>> 799:       vsTargets: {}\n    800:     };\n    801:   }",
          "functionName": "analyzeTrends",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/validation/quality/QualityAssurance.ts",
          "line": 810,
          "type": "comment-marker",
          "code": "// Placeholder implementation",
          "context": "    808:     config: DuplicateDetectionConfig\n    809:   ): Promise<number> {\n>>> 810:     // Placeholder implementation\n    811:     return 0;\n    812:   }",
          "functionName": "analyzeTrends",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/validation/quality/QualityAssurance.ts",
          "line": 810,
          "type": "placeholder-keyword",
          "code": "// Placeholder implementation",
          "context": "    808:     config: DuplicateDetectionConfig\n    809:   ): Promise<number> {\n>>> 810:     // Placeholder implementation\n    811:     return 0;\n    812:   }",
          "functionName": "analyzeTrends",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/validation/quality/QualityAssurance.ts",
          "line": 874,
          "type": "comment-marker",
          "code": "// Placeholder implementation",
          "context": "    872: \n    873:   private identifyPatterns(values: any[]): Array<{ pattern: string; count: number; percentage: number }> {\n>>> 874:     // Placeholder implementation\n    875:     return [];\n    876:   }",
          "functionName": "identifyPatterns",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/validation/quality/QualityAssurance.ts",
          "line": 874,
          "type": "placeholder-keyword",
          "code": "// Placeholder implementation",
          "context": "    872: \n    873:   private identifyPatterns(values: any[]): Array<{ pattern: string; count: number; percentage: number }> {\n>>> 874:     // Placeholder implementation\n    875:     return [];\n    876:   }",
          "functionName": "identifyPatterns",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/validation/quality/QualityAssurance.ts",
          "line": 879,
          "type": "comment-marker",
          "code": "// Placeholder implementation",
          "context": "    877: \n    878:   private calculateFieldQualityScore(values: any[]): number {\n>>> 879:     // Placeholder implementation\n    880:     return 85;\n    881:   }",
          "functionName": "calculateFieldQualityScore",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/validation/quality/QualityAssurance.ts",
          "line": 879,
          "type": "placeholder-keyword",
          "code": "// Placeholder implementation",
          "context": "    877: \n    878:   private calculateFieldQualityScore(values: any[]): number {\n>>> 879:     // Placeholder implementation\n    880:     return 85;\n    881:   }",
          "functionName": "calculateFieldQualityScore",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/validation/quality/QualityAssurance.ts",
          "line": 884,
          "type": "comment-marker",
          "code": "// Placeholder implementation",
          "context": "    882: \n    883:   private identifyFieldIssues(values: any[]): string[] {\n>>> 884:     // Placeholder implementation\n    885:     return [];\n    886:   }",
          "functionName": "identifyFieldIssues",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/validation/quality/QualityAssurance.ts",
          "line": 884,
          "type": "placeholder-keyword",
          "code": "// Placeholder implementation",
          "context": "    882: \n    883:   private identifyFieldIssues(values: any[]): string[] {\n>>> 884:     // Placeholder implementation\n    885:     return [];\n    886:   }",
          "functionName": "identifyFieldIssues",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "src/validation/quality/QualityAssurance.ts",
          "line": 935,
          "type": "empty-block",
          "code": "targets: {}",
          "context": "    933:         industry: {},\n    934:         historical: {},\n>>> 935:         targets: {}\n    936:       }\n    937:     };",
          "functionName": "initializeDefaultProfiles",
          "className": null,
          "severity": "medium"
        }
      ],
      "src/webhooks/patterns/SynchronizationPatterns.ts": [
        {
          "file": "src/webhooks/patterns/SynchronizationPatterns.ts",
          "line": 283,
          "type": "mock-keyword",
          "code": "const mockEvent = this.createMockEvent(",
          "context": "    281: \n    282:     for (const config of relevantConfigs) {\n>>> 283:       const mockEvent = this.createMockEvent(\n    284:         externalData,\n    285:         entityType,",
          "functionName": "for",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/webhooks/patterns/SynchronizationPatterns.ts",
          "line": 289,
          "type": "mock-keyword",
          "code": "mockEvent,",
          "context": "    287:       );\n    288:       const result = await this.performSync(\n>>> 289:         mockEvent,\n    290:         config,\n    291:         'from_external',",
          "functionName": "for",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/webhooks/patterns/SynchronizationPatterns.ts",
          "line": 806,
          "type": "mock-keyword",
          "code": "private createMockEvent(",
          "context": "    804:   }\n    805: \n>>> 806:   private createMockEvent(\n    807:     externalData: any,\n    808:     entityType: string,",
          "functionName": "getTargetData",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/webhooks/patterns/SynchronizationPatterns.ts",
          "line": 811,
          "type": "mock-keyword",
          "code": "// Create a mock Autotask event from external data",
          "context": "    809:     entityId: string\n    810:   ): AutotaskWebhookEvent {\n>>> 811:     // Create a mock Autotask event from external data\n    812:     return {\n    813:       id: `mock_${Date.now()}`,",
          "functionName": "getTargetData",
          "className": null,
          "severity": "low"
        },
        {
          "file": "src/webhooks/patterns/SynchronizationPatterns.ts",
          "line": 813,
          "type": "mock-keyword",
          "code": "id: `mock_${Date.now()}`,",
          "context": "    811:     // Create a mock Autotask event from external data\n    812:     return {\n>>> 813:       id: `mock_${Date.now()}`,\n    814:       type: 'entity.updated' as any,\n    815:       action: 'update' as any,",
          "functionName": "getTargetData",
          "className": null,
          "severity": "low"
        }
      ],
      "src/webhooks/WebhookManager.ts": [
        {
          "file": "src/webhooks/WebhookManager.ts",
          "line": 671,
          "type": "empty-block",
          "code": "handlerMetrics: {}",
          "context": "    669:         eventsByType: {},\n    670:         eventsByAction: {},\n>>> 671:         handlerMetrics: {}\n    672:       },\n    673:       delivery: deliveryMetrics",
          "functionName": "getMetrics",
          "className": null,
          "severity": "low"
        }
      ],
      "examples/customer-onboarding/src/controllers/OnboardingController.ts": [
        {
          "file": "examples/customer-onboarding/src/controllers/OnboardingController.ts",
          "line": 185,
          "type": "mock-keyword",
          "code": "completionTrend: this.generateMockTrendData(),",
          "context": "    183:         trends: {\n    184:           // In a real implementation, these would come from historical data\n>>> 185:           completionTrend: this.generateMockTrendData(),\n    186:           volumeTrend: this.generateMockVolumeData(),\n    187:         },",
          "functionName": "catch",
          "className": null,
          "severity": "low"
        },
        {
          "file": "examples/customer-onboarding/src/controllers/OnboardingController.ts",
          "line": 186,
          "type": "mock-keyword",
          "code": "volumeTrend: this.generateMockVolumeData(),",
          "context": "    184:           // In a real implementation, these would come from historical data\n    185:           completionTrend: this.generateMockTrendData(),\n>>> 186:           volumeTrend: this.generateMockVolumeData(),\n    187:         },\n    188:       });",
          "functionName": "catch",
          "className": null,
          "severity": "low"
        },
        {
          "file": "examples/customer-onboarding/src/controllers/OnboardingController.ts",
          "line": 280,
          "type": "mock-keyword",
          "code": "* Generate mock trend data (replace with real data in production)",
          "context": "    278: \n    279:   /**\n>>> 280:    * Generate mock trend data (replace with real data in production)\n    281:    */\n    282:   private generateMockTrendData(): { date: string; completed: number; failed: number }[] {",
          "functionName": "calculateEstimatedCompletion",
          "className": null,
          "severity": "low"
        },
        {
          "file": "examples/customer-onboarding/src/controllers/OnboardingController.ts",
          "line": 282,
          "type": "mock-keyword",
          "code": "private generateMockTrendData(): { date: string; completed: number; failed: number }[] {",
          "context": "    280:    * Generate mock trend data (replace with real data in production)\n    281:    */\n>>> 282:   private generateMockTrendData(): { date: string; completed: number; failed: number }[] {\n    283:     const data = [];\n    284:     const today = new Date();",
          "functionName": "calculateEstimatedCompletion",
          "className": null,
          "severity": "low"
        },
        {
          "file": "examples/customer-onboarding/src/controllers/OnboardingController.ts",
          "line": 301,
          "type": "mock-keyword",
          "code": "* Generate mock volume data",
          "context": "    299: \n    300:   /**\n>>> 301:    * Generate mock volume data\n    302:    */\n    303:   private generateMockVolumeData(): { date: string; volume: number }[] {",
          "functionName": "for",
          "className": null,
          "severity": "low"
        },
        {
          "file": "examples/customer-onboarding/src/controllers/OnboardingController.ts",
          "line": 303,
          "type": "mock-keyword",
          "code": "private generateMockVolumeData(): { date: string; volume: number }[] {",
          "context": "    301:    * Generate mock volume data\n    302:    */\n>>> 303:   private generateMockVolumeData(): { date: string; volume: number }[] {\n    304:     const data = [];\n    305:     const today = new Date();",
          "functionName": "for",
          "className": null,
          "severity": "low"
        }
      ],
      "examples/customer-onboarding/src/types/onboarding.ts": [
        {
          "file": "examples/customer-onboarding/src/types/onboarding.ts",
          "line": 159,
          "type": "placeholder-keyword",
          "code": "template: string; // HTML template with placeholders",
          "context": "    157:   recipientType: 'customer' | 'internal' | 'custom';\n    158:   subject: string;\n>>> 159:   template: string; // HTML template with placeholders\n    160:   isActive: boolean;\n    161: }",
          "functionName": "unknown",
          "className": null,
          "severity": "medium"
        }
      ],
      "examples/error-recovery-demo.ts": [
        {
          "file": "examples/error-recovery-demo.ts",
          "line": 38,
          "type": "mock-keyword",
          "code": "* Mock Autotask Client with controllable failures",
          "context": "    36: \n    37: /**\n>>> 38:  * Mock Autotask Client with controllable failures\n    39:  */\n    40: class MockAutotaskClient {",
          "functionName": "unknown",
          "className": null,
          "severity": "low"
        },
        {
          "file": "examples/error-recovery-demo.ts",
          "line": 40,
          "type": "mock-keyword",
          "code": "class MockAutotaskClient {",
          "context": "    38:  * Mock Autotask Client with controllable failures\n    39:  */\n>>> 40: class MockAutotaskClient {\n    41:   private failureRate = 0;\n    42:   private latencyMs = 100;",
          "functionName": "unknown",
          "className": "MockAutotaskClient",
          "severity": "low"
        },
        {
          "file": "examples/error-recovery-demo.ts",
          "line": 121,
          "type": "mock-keyword",
          "code": "private client: MockAutotaskClient;",
          "context": "    119:  */\n    120: class EnhancedAutotaskProcessor implements QueueProcessor {\n>>> 121:   private client: MockAutotaskClient;\n    122:   private circuitBreaker: Map<string, { failures: number; lastFailure: Date }> = new Map();\n    123:   ",
          "functionName": "getRequestCount",
          "className": "EnhancedAutotaskProcessor",
          "severity": "low"
        },
        {
          "file": "examples/error-recovery-demo.ts",
          "line": 124,
          "type": "mock-keyword",
          "code": "constructor(client: MockAutotaskClient) {",
          "context": "    122:   private circuitBreaker: Map<string, { failures: number; lastFailure: Date }> = new Map();\n    123:   \n>>> 124:   constructor(client: MockAutotaskClient) {\n    125:     this.client = client;\n    126:   }",
          "functionName": "constructor",
          "className": "EnhancedAutotaskProcessor",
          "severity": "low"
        },
        {
          "file": "examples/error-recovery-demo.ts",
          "line": 228,
          "type": "mock-keyword",
          "code": "private client: MockAutotaskClient;",
          "context": "    226: class DemoScenarioRunner {\n    227:   private queueManager: QueueManager;\n>>> 228:   private client: MockAutotaskClient;\n    229:   private processor: EnhancedAutotaskProcessor;\n    230:   private requestCounter = 0;",
          "functionName": "resetCircuitBreaker",
          "className": "DemoScenarioRunner",
          "severity": "low"
        },
        {
          "file": "examples/error-recovery-demo.ts",
          "line": 233,
          "type": "mock-keyword",
          "code": "constructor(queueManager: QueueManager, client: MockAutotaskClient, processor: EnhancedAutotaskProcessor) {",
          "context": "    231:   private scenarioRunning = false;\n    232:   \n>>> 233:   constructor(queueManager: QueueManager, client: MockAutotaskClient, processor: EnhancedAutotaskProcessor) {\n    234:     this.queueManager = queueManager;\n    235:     this.client = client;",
          "functionName": "constructor",
          "className": "DemoScenarioRunner",
          "severity": "low"
        },
        {
          "file": "examples/error-recovery-demo.ts",
          "line": 287,
          "type": "empty-block",
          "code": "options: any = {}",
          "context": "    285:     endpoint: string, \n    286:     method: 'GET' | 'POST' | 'PUT' | 'DELETE' = 'GET',\n>>> 287:     options: any = {}\n    288:   ): Promise<void> {\n    289:     this.requestCounter++;",
          "functionName": "reportMetrics",
          "className": "DemoScenarioRunner",
          "severity": "low"
        },
        {
          "file": "examples/error-recovery-demo.ts",
          "line": 568,
          "type": "mock-keyword",
          "code": "const mockClient = new MockAutotaskClient();",
          "context": "    566:     // Initialize components\n    567:     const queueManager = new QueueManager({ config, logger });\n>>> 568:     const mockClient = new MockAutotaskClient();\n    569:     const processor = new EnhancedAutotaskProcessor(mockClient);\n    570:     ",
          "functionName": "runErrorRecoveryDemo",
          "className": null,
          "severity": "low"
        },
        {
          "file": "examples/error-recovery-demo.ts",
          "line": 569,
          "type": "mock-keyword",
          "code": "const processor = new EnhancedAutotaskProcessor(mockClient);",
          "context": "    567:     const queueManager = new QueueManager({ config, logger });\n    568:     const mockClient = new MockAutotaskClient();\n>>> 569:     const processor = new EnhancedAutotaskProcessor(mockClient);\n    570:     \n    571:     // Register processor",
          "functionName": "runErrorRecoveryDemo",
          "className": null,
          "severity": "low"
        },
        {
          "file": "examples/error-recovery-demo.ts",
          "line": 580,
          "type": "mock-keyword",
          "code": "const demoRunner = new DemoScenarioRunner(queueManager, mockClient, processor);",
          "context": "    578:     \n    579:     // Create and run demo scenarios\n>>> 580:     const demoRunner = new DemoScenarioRunner(queueManager, mockClient, processor);\n    581:     await demoRunner.runAllScenarios();\n    582:     ",
          "functionName": "runErrorRecoveryDemo",
          "className": null,
          "severity": "low"
        },
        {
          "file": "examples/error-recovery-demo.ts",
          "line": 611,
          "type": "mock-keyword",
          "code": "MockAutotaskClient",
          "context": "    609:   DemoScenarioRunner,\n    610:   EnhancedAutotaskProcessor,\n>>> 611:   MockAutotaskClient\n    612: };",
          "functionName": "if",
          "className": null,
          "severity": "low"
        }
      ],
      "examples/query-builder-demo.ts": [
        {
          "file": "examples/query-builder-demo.ts",
          "line": 31,
          "type": "comment-marker",
          "code": "// Note: This is a conceptual demo showing query builder API",
          "context": "    29: \n    30:   // Get enhanced tickets entity with query capabilities\n>>> 31:   // Note: This is a conceptual demo showing query builder API\n    32:   // In practice, you would use client.tickets or extend entities appropriately\n    33:   console.log(",
          "functionName": "demonstrateQueryBuilder",
          "className": null,
          "severity": "low"
        },
        {
          "file": "examples/query-builder-demo.ts",
          "line": 37,
          "type": "mock-keyword",
          "code": "// For demo purposes, we'll create a mock tickets object with query methods",
          "context": "    35:   );\n    36: \n>>> 37:   // For demo purposes, we'll create a mock tickets object with query methods\n    38:   const tickets = {\n    39:     query: () =>",
          "functionName": "demonstrateQueryBuilder",
          "className": null,
          "severity": "low"
        }
      ],
      "examples/ticket-dashboard/src/controllers/DashboardController.ts": [
        {
          "file": "examples/ticket-dashboard/src/controllers/DashboardController.ts",
          "line": 310,
          "type": "mock-keyword",
          "code": "// Mock system health data",
          "context": "    308:   getSystemHealth = asyncHandler(async (req: Request, res: Response) => {\n    309:     try {\n>>> 310:       // Mock system health data\n    311:       const health = {\n    312:         status: 'healthy',",
          "functionName": "catch",
          "className": null,
          "severity": "low"
        }
      ],
      "examples/ticket-dashboard/src/services/DashboardService.ts": [
        {
          "file": "examples/ticket-dashboard/src/services/DashboardService.ts",
          "line": 208,
          "type": "mock-keyword",
          "code": "? Math.random() * 20 + 80 // Mock: 80-100%",
          "context": "    206:       // Calculate SLA compliance (simplified)\n    207:       const slaComplianceRate = completedTickets.length > 0 \n>>> 208:         ? Math.random() * 20 + 80 // Mock: 80-100%\n    209:         : 0;\n    210: ",
          "functionName": "if",
          "className": null,
          "severity": "low"
        },
        {
          "file": "examples/ticket-dashboard/src/services/DashboardService.ts",
          "line": 360,
          "type": "mock-keyword",
          "code": "// Mock some values for demo",
          "context": "    358:         }\n    359: \n>>> 360:         // Mock some values for demo\n    361:         const slaComplianceRate = 85 + Math.random() * 15; // 85-100%\n    362:         const utilizationRate = 60 + Math.random() * 35; // 60-95%",
          "functionName": "if",
          "className": null,
          "severity": "low"
        },
        {
          "file": "examples/ticket-dashboard/src/services/DashboardService.ts",
          "line": 434,
          "type": "mock-keyword",
          "code": "// Mock trend data - in production, this would query historical data",
          "context": "    432:         const dateString = date.toISOString().split('T')[0];\n    433: \n>>> 434:         // Mock trend data - in production, this would query historical data\n    435:         trends.ticketsCreatedTrend.push({\n    436:           date: dateString,",
          "functionName": "for",
          "className": null,
          "severity": "low"
        }
      ],
      "examples/validation-demo.ts": [
        {
          "file": "examples/validation-demo.ts",
          "line": 369,
          "type": "comment-marker",
          "code": "// Note: This demo shows the API structure but won't make actual API calls",
          "context": "    367:   console.log('\\n=== Demo 5: Full Integration with ValidatedAutotaskClient ===\\n');\n    368:   \n>>> 369:   // Note: This demo shows the API structure but won't make actual API calls\n    370:   // In a real scenario, you would provide valid Autotask credentials\n    371:   ",
          "functionName": "demoFullIntegration",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "examples/validation-demo.ts",
          "line": 372,
          "type": "mock-keyword",
          "code": "const mockAuth = {",
          "context": "    370:   // In a real scenario, you would provide valid Autotask credentials\n    371:   \n>>> 372:   const mockAuth = {\n    373:     username: 'demo-user',\n    374:     integrationCode: 'demo-integration',",
          "functionName": "demoFullIntegration",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "examples/validation-demo.ts",
          "line": 401,
          "type": "mock-keyword",
          "code": "auth: mockAuth,",
          "context": "    399:   console.log('🔧 Creating ValidatedAutotaskClient...');\n    400:   const validatedClient = new ValidatedAutotaskClient({\n>>> 401:     auth: mockAuth,\n    402:     enableValidation: true,\n    403:     enableSanitization: true,",
          "functionName": "demoFullIntegration",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "examples/validation-demo.ts",
          "line": 451,
          "type": "mock-keyword",
          "code": "const mockValidationResult = await ValidationUtils.validateEntity(newAccount, 'Account', 'create');",
          "context": "    449:   try {\n    450:     // Simulate the validation that would occur\n>>> 451:     const mockValidationResult = await ValidationUtils.validateEntity(newAccount, 'Account', 'create');\n    452:     \n    453:     console.log('Validation Summary:');",
          "functionName": "unknown",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "examples/validation-demo.ts",
          "line": 454,
          "type": "mock-keyword",
          "code": "console.log(`- Overall result: ${mockValidationResult.isValid ? 'VALID' : 'INVALID'}`);",
          "context": "    452:     \n    453:     console.log('Validation Summary:');\n>>> 454:     console.log(`- Overall result: ${mockValidationResult.isValid ? 'VALID' : 'INVALID'}`);\n    455:     console.log(`- Errors detected: ${mockValidationResult.errors.length}`);\n    456:     console.log(`- Warnings issued: ${mockValidationResult.warnings.length}`);",
          "functionName": "unknown",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "examples/validation-demo.ts",
          "line": 455,
          "type": "mock-keyword",
          "code": "console.log(`- Errors detected: ${mockValidationResult.errors.length}`);",
          "context": "    453:     console.log('Validation Summary:');\n    454:     console.log(`- Overall result: ${mockValidationResult.isValid ? 'VALID' : 'INVALID'}`);\n>>> 455:     console.log(`- Errors detected: ${mockValidationResult.errors.length}`);\n    456:     console.log(`- Warnings issued: ${mockValidationResult.warnings.length}`);\n    457:     console.log(`- Data sanitized: ${mockValidationResult.sanitizedData ? 'YES' : 'NO'}`);",
          "functionName": "unknown",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "examples/validation-demo.ts",
          "line": 456,
          "type": "mock-keyword",
          "code": "console.log(`- Warnings issued: ${mockValidationResult.warnings.length}`);",
          "context": "    454:     console.log(`- Overall result: ${mockValidationResult.isValid ? 'VALID' : 'INVALID'}`);\n    455:     console.log(`- Errors detected: ${mockValidationResult.errors.length}`);\n>>> 456:     console.log(`- Warnings issued: ${mockValidationResult.warnings.length}`);\n    457:     console.log(`- Data sanitized: ${mockValidationResult.sanitizedData ? 'YES' : 'NO'}`);\n    458:     ",
          "functionName": "unknown",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "examples/validation-demo.ts",
          "line": 457,
          "type": "mock-keyword",
          "code": "console.log(`- Data sanitized: ${mockValidationResult.sanitizedData ? 'YES' : 'NO'}`);",
          "context": "    455:     console.log(`- Errors detected: ${mockValidationResult.errors.length}`);\n    456:     console.log(`- Warnings issued: ${mockValidationResult.warnings.length}`);\n>>> 457:     console.log(`- Data sanitized: ${mockValidationResult.sanitizedData ? 'YES' : 'NO'}`);\n    458:     \n    459:     if (mockValidationResult.sanitizedData) {",
          "functionName": "unknown",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "examples/validation-demo.ts",
          "line": 459,
          "type": "mock-keyword",
          "code": "if (mockValidationResult.sanitizedData) {",
          "context": "    457:     console.log(`- Data sanitized: ${mockValidationResult.sanitizedData ? 'YES' : 'NO'}`);\n    458:     \n>>> 459:     if (mockValidationResult.sanitizedData) {\n    460:       console.log('\\nSanitization Results:');\n    461:       console.log(`- Original: ${newAccount.accountName}`);",
          "functionName": "if",
          "className": null,
          "severity": "medium"
        },
        {
          "file": "examples/validation-demo.ts",
          "line": 462,
          "type": "mock-keyword",
          "code": "console.log(`- Sanitized: ${mockValidationResult.sanitizedData.accountName}`);",
          "context": "    460:       console.log('\\nSanitization Results:');\n    461:       console.log(`- Original: ${newAccount.accountName}`);\n>>> 462:       console.log(`- Sanitized: ${mockValidationResult.sanitizedData.accountName}`);\n    463:     }\n    464: ",
          "functionName": "if",
          "className": null,
          "severity": "medium"
        }
      ]
    },
    "bySeverity": {
      "high": 7,
      "medium": 88,
      "low": 119
    }
  },
  "findings": [
    {
      "file": "src/business/core/BusinessLogicEngine.ts",
      "line": 153,
      "type": "placeholder-keyword",
      "code": "// For now, just placeholder",
      "context": "    151:   private setupWorkflows(): void {\n    152:     // This will be implemented when we create the WorkflowEngine\n>>> 153:     // For now, just placeholder\n    154:   }\n    155:   ",
      "functionName": "setupWorkflows",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/business/entities/CompanyBusinessLogic.ts",
      "line": 8,
      "type": "empty-block",
      "code": "constructor(private businessEngine: BusinessLogicEngine) {}",
      "context": "    6:  */\n    7: export class CompanyBusinessLogic {\n>>> 8:   constructor(private businessEngine: BusinessLogicEngine) {}\n    9:   \n    10:   /**",
      "functionName": "constructor",
      "className": "CompanyBusinessLogic",
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "high"
    },
    {
      "file": "src/business/entities/ContactBusinessLogic.ts",
      "line": 8,
      "type": "empty-block",
      "code": "constructor(private businessEngine: BusinessLogicEngine) {}",
      "context": "    6:  */\n    7: export class ContactBusinessLogic {\n>>> 8:   constructor(private businessEngine: BusinessLogicEngine) {}\n    9:   \n    10:   /**",
      "functionName": "constructor",
      "className": "ContactBusinessLogic",
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "high"
    },
    {
      "file": "src/business/entities/ContractBusinessLogic.ts",
      "line": 8,
      "type": "empty-block",
      "code": "constructor(private businessEngine: BusinessLogicEngine) {}",
      "context": "    6:  */\n    7: export class ContractBusinessLogic {\n>>> 8:   constructor(private businessEngine: BusinessLogicEngine) {}\n    9:   \n    10:   /**",
      "functionName": "constructor",
      "className": "ContractBusinessLogic",
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "high"
    },
    {
      "file": "src/business/entities/ContractBusinessLogic.ts",
      "line": 246,
      "type": "empty-block",
      "code": "context?.previousRates || {}",
      "context": "    244:       billingRules.hourlyRates || {},\n    245:       context?.marketRates || {},\n>>> 246:       context?.previousRates || {}\n    247:     );\n    248:     ",
      "functionName": "if",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "high"
    },
    {
      "file": "src/business/entities/ProjectBusinessLogic.ts",
      "line": 8,
      "type": "empty-block",
      "code": "constructor(private businessEngine: BusinessLogicEngine) {}",
      "context": "    6:  */\n    7: export class ProjectBusinessLogic {\n>>> 8:   constructor(private businessEngine: BusinessLogicEngine) {}\n    9:   \n    10:   /**",
      "functionName": "constructor",
      "className": "ProjectBusinessLogic",
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "high"
    },
    {
      "file": "src/business/entities/TicketBusinessLogic.ts",
      "line": 8,
      "type": "empty-block",
      "code": "constructor(private businessEngine: BusinessLogicEngine) {}",
      "context": "    6:  */\n    7: export class TicketBusinessLogic {\n>>> 8:   constructor(private businessEngine: BusinessLogicEngine) {}\n    9:   \n    10:   /**",
      "functionName": "constructor",
      "className": "TicketBusinessLogic",
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "high"
    },
    {
      "file": "src/business/entities/TimeEntryBusinessLogic.ts",
      "line": 8,
      "type": "empty-block",
      "code": "constructor(private businessEngine: BusinessLogicEngine) {}",
      "context": "    6:  */\n    7: export class TimeEntryBusinessLogic {\n>>> 8:   constructor(private businessEngine: BusinessLogicEngine) {}\n    9:   \n    10:   /**",
      "functionName": "constructor",
      "className": "TimeEntryBusinessLogic",
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "high"
    },
    {
      "file": "src/business/validation/errors/BusinessLogicErrors.ts",
      "line": 33,
      "type": "empty-block",
      "code": "} = {}",
      "context": "    31:       isRecoverable?: boolean;\n    32:       cause?: Error;\n>>> 33:     } = {}\n    34:   ) {\n    35:     super(message);",
      "functionName": "unknown",
      "className": "BusinessLogicError",
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/business/validation/errors/BusinessLogicErrors.ts",
      "line": 118,
      "type": "empty-block",
      "code": "} = {}",
      "context": "    116:       context?: Record<string, any>;\n    117:       severity?: 'error' | 'warning' | 'info';\n>>> 118:     } = {}\n    119:   ) {\n    120:     super(message, code, entityType, 'validate', {",
      "functionName": "if",
      "className": "ValidationError",
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "high",
      "priority": "medium"
    },
    {
      "file": "src/business/validation/errors/BusinessLogicErrors.ts",
      "line": 151,
      "type": "empty-block",
      "code": "} = {}",
      "context": "    149:       context?: Record<string, any>;\n    150:       cause?: Error;\n>>> 151:     } = {}\n    152:   ) {\n    153:     super(message, code, entityType, 'workflow', {",
      "functionName": "unknown",
      "className": "WorkflowError",
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/business/validation/errors/BusinessLogicErrors.ts",
      "line": 184,
      "type": "empty-block",
      "code": "} = {}",
      "context": "    182:       suggestedFix?: string;\n    183:       context?: Record<string, any>;\n>>> 184:     } = {}\n    185:   ) {\n    186:     super(message, code, entityType, operation, {",
      "functionName": "unknown",
      "className": "PermissionError",
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/business/validation/errors/BusinessLogicErrors.ts",
      "line": 221,
      "type": "empty-block",
      "code": "} = {}",
      "context": "    219:       context?: Record<string, any>;\n    220:       severity?: 'error' | 'warning' | 'info';\n>>> 221:     } = {}\n    222:   ) {\n    223:     super(message, code, entityType, operation, options);",
      "functionName": "unknown",
      "className": "BusinessRuleViolationError",
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/business/validation/errors/BusinessLogicErrors.ts",
      "line": 253,
      "type": "empty-block",
      "code": "} = {}",
      "context": "    251:       recoveryActions?: string[];\n    252:       context?: Record<string, any>;\n>>> 253:     } = {}\n    254:   ) {\n    255:     super(message, code, entityType, operation, options);",
      "functionName": "unknown",
      "className": "DataIntegrityError",
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/business/validation/errors/BusinessLogicErrors.ts",
      "line": 283,
      "type": "empty-block",
      "code": "} = {}",
      "context": "    281:       recoveryActions?: string[];\n    282:       context?: Record<string, any>;\n>>> 283:     } = {}\n    284:   ) {\n    285:     super(message, code, entityType, 'configure', {",
      "functionName": "unknown",
      "className": "ConfigurationError",
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/business/validation/validators/FieldValidators.ts",
      "line": 101,
      "type": "empty-block",
      "code": "} = {}",
      "context": "    99:       maxDate?: Date;\n    100:       customMessage?: string;\n>>> 101:     } = {}\n    102:   ) {\n    103:     this.config = config;",
      "functionName": "validate",
      "className": "DateRangeValidator",
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "high",
      "priority": "medium"
    },
    {
      "file": "src/business/validation/validators/FieldValidators.ts",
      "line": 164,
      "type": "empty-block",
      "code": "} = {}",
      "context": "    162:       max?: number;\n    163:       customMessage?: string;\n>>> 164:     } = {}\n    165:   ) {\n    166:     this.config = config;",
      "functionName": "if",
      "className": "NumericRangeValidator",
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/business/validation/validators/FieldValidators.ts",
      "line": 229,
      "type": "empty-block",
      "code": "} = {}",
      "context": "    227:       maxLength?: number;\n    228:       customMessage?: string;\n>>> 229:     } = {}\n    230:   ) {\n    231:     this.config = config;",
      "functionName": "if",
      "className": "LengthValidator",
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/business/workflows/AutotaskWorkflows.ts",
      "line": 442,
      "type": "placeholder-keyword",
      "code": "description: 'Create primary and billing contact placeholders',",
      "context": "    440:           id: 'setup_default_contacts',\n    441:           name: 'Setup Default Contacts',\n>>> 442:           description: 'Create primary and billing contact placeholders',\n    443:           action: async (context) => {\n    444:             return {",
      "functionName": "getCustomerOnboardingWorkflow",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/client/AutotaskClient.ts",
      "line": 620,
      "type": "comment-marker",
      "code": "// Notes",
      "context": "    618:   }\n    619: \n>>> 620:   // Notes\n    621:   get companyNotes() {\n    622:     return this.getEntityFromSubClient('core', 'companyNotes');",
      "functionName": "attachmentInfo",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "low",
      "priority": "high"
    },
    {
      "file": "src/client/AutotaskClient.ts",
      "line": 652,
      "type": "comment-marker",
      "code": "// Note attachments",
      "context": "    650:   }\n    651: \n>>> 652:   // Note attachments\n    653:   get companyNoteAttachments() {\n    654:     return this.getEntityFromSubClient('core', 'companyNoteAttachments');",
      "functionName": "articleNotes",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "low",
      "priority": "high"
    },
    {
      "file": "src/client/base/BaseSubClient.ts",
      "line": 40,
      "type": "empty-block",
      "code": ") {}",
      "context": "    38:     protected logger: winston.Logger,\n    39:     protected name: string\n>>> 40:   ) {}\n    41: \n    42:   abstract getName(): string;",
      "functionName": "unknown",
      "className": "BaseSubClient",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/client/EnhancedAutotaskClient.ts",
      "line": 470,
      "type": "empty-block",
      "code": "} = {}",
      "context": "    468:       retryable?: boolean;\n    469:       metadata?: Record<string, any>;\n>>> 470:     } = {}\n    471:   ): Promise<T> {\n    472:     const zone = options.zone || this.primaryZone || 'primary';",
      "functionName": "clearQueues",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/client/ValidatedAutotaskClient.ts",
      "line": 156,
      "type": "comment-marker",
      "code": "// Note: This is a simplified approach - the actual client would need proper entity creation methods",
      "context": "    154: \n    155:       // Create through underlying client\n>>> 156:       // Note: This is a simplified approach - the actual client would need proper entity creation methods\n    157:       const result = await this.performEntityOperation<T>('create', entityType, sanitizedEntity);\n    158: ",
      "functionName": "if",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/client/ValidatedAutotaskClient.ts",
      "line": 261,
      "type": "placeholder-keyword",
      "code": "// This is a placeholder for actual compliance validation",
      "context": "    259: \n    260:     // Basic compliance checks - can be extended\n>>> 261:     // This is a placeholder for actual compliance validation\n    262: \n    263:     return {",
      "functionName": "if",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/client/ValidatedAutotaskClient.ts",
      "line": 261,
      "type": "explicit-placeholder",
      "code": "// This is a placeholder for actual compliance validation",
      "context": "    259: \n    260:     // Basic compliance checks - can be extended\n>>> 261:     // This is a placeholder for actual compliance validation\n    262: \n    263:     return {",
      "functionName": "if",
      "className": null,
      "severity": "high",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "high"
    },
    {
      "file": "src/client/ValidatedAutotaskClient.ts",
      "line": 307,
      "type": "placeholder-keyword",
      "code": "// This is a placeholder - in reality, you'd route to appropriate client methods",
      "context": "    305:    */\n    306:   private async performEntityOperation<T>(operation: string, entityType: string, data: any): Promise<T> {\n>>> 307:     // This is a placeholder - in reality, you'd route to appropriate client methods\n    308:     // For now, just return the data as-is\n    309:     return data as T;",
      "functionName": "calculateQualityScore",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/client/ValidatedAutotaskClient.ts",
      "line": 307,
      "type": "explicit-placeholder",
      "code": "// This is a placeholder - in reality, you'd route to appropriate client methods",
      "context": "    305:    */\n    306:   private async performEntityOperation<T>(operation: string, entityType: string, data: any): Promise<T> {\n>>> 307:     // This is a placeholder - in reality, you'd route to appropriate client methods\n    308:     // For now, just return the data as-is\n    309:     return data as T;",
      "functionName": "calculateQualityScore",
      "className": null,
      "severity": "high",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "high"
    },
    {
      "file": "src/entities/attachments.ts",
      "line": 23,
      "type": "empty-block",
      "code": "constructor(private axios: AxiosInstance, private logger: winston.Logger) {}",
      "context": "    21:   private readonly endpoint = '/Attachments';\n    22: \n>>> 23:   constructor(private axios: AxiosInstance, private logger: winston.Logger) {}\n    24: \n    25:   static getMetadata(): MethodMetadata[] {",
      "functionName": "constructor",
      "className": "Attachments",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "high"
    },
    {
      "file": "src/entities/base.ts",
      "line": 28,
      "type": "empty-block",
      "code": "options: RequestOptions = {}",
      "context": "    26:     endpoint: string,\n    27:     method: string,\n>>> 28:     options: RequestOptions = {}\n    29:   ): Promise<ApiResponse<T>> {\n    30:     const response = await this.requestHandler.executeRequest(",
      "functionName": "unknown",
      "className": "BaseEntity",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "high"
    },
    {
      "file": "src/entities/base.ts",
      "line": 69,
      "type": "empty-block",
      "code": "options: RequestOptions = {}",
      "context": "    67:     endpoint: string,\n    68:     method: string,\n>>> 69:     options: RequestOptions = {}\n    70:   ): Promise<ApiResponse<T[]>> {\n    71:     const response = await this.requestHandler.executeRequest(",
      "functionName": "if",
      "className": "BaseEntity",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "high"
    },
    {
      "file": "src/entities/expenses.ts",
      "line": 32,
      "type": "empty-block",
      "code": "constructor(private axios: AxiosInstance, private logger: winston.Logger) {}",
      "context": "    30:   private readonly endpoint = '/Expenses';\n    31: \n>>> 32:   constructor(private axios: AxiosInstance, private logger: winston.Logger) {}\n    33: \n    34:   static getMetadata(): MethodMetadata[] {",
      "functionName": "constructor",
      "className": "Expenses",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "high"
    },
    {
      "file": "src/entities/notes.ts",
      "line": 23,
      "type": "empty-block",
      "code": "constructor(private axios: AxiosInstance, private logger: winston.Logger) {}",
      "context": "    21:   private readonly endpoint = '/Notes';\n    22: \n>>> 23:   constructor(private axios: AxiosInstance, private logger: winston.Logger) {}\n    24: \n    25:   static getMetadata(): MethodMetadata[] {",
      "functionName": "constructor",
      "className": "Notes",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "high"
    },
    {
      "file": "src/entities/ticketPriorities.ts",
      "line": 107,
      "type": "empty-block",
      "code": "query: TicketPriorityQuery = {}",
      "context": "    105:    */\n    106:   async list(\n>>> 107:     query: TicketPriorityQuery = {}\n    108:   ): Promise<ApiResponse<TicketPriority[]>> {\n    109:     this.logger.info('Listing ticket priorities', { query });",
      "functionName": "get",
      "className": "TicketPriorities",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "high"
    },
    {
      "file": "src/entities/ticketSources.ts",
      "line": 106,
      "type": "empty-block",
      "code": "query: TicketSourceQuery = {}",
      "context": "    104:    */\n    105:   async list(\n>>> 106:     query: TicketSourceQuery = {}\n    107:   ): Promise<ApiResponse<TicketSource[]>> {\n    108:     this.logger.info('Listing ticket sources', { query });",
      "functionName": "get",
      "className": "TicketSources",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "high"
    },
    {
      "file": "src/entities/ticketStatuses.ts",
      "line": 106,
      "type": "empty-block",
      "code": "query: TicketStatusQuery = {}",
      "context": "    104:    */\n    105:   async list(\n>>> 106:     query: TicketStatusQuery = {}\n    107:   ): Promise<ApiResponse<TicketStatus[]>> {\n    108:     this.logger.info('Listing ticket statuses', { query });",
      "functionName": "get",
      "className": "TicketStatuses",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "high"
    },
    {
      "file": "src/index.ts",
      "line": 8,
      "type": "comment-marker",
      "code": "// Note: Use individual exports instead of wildcard to avoid conflicts",
      "context": "    6: // Enterprise Performance System\n    7: export { AutotaskPerformanceIntegration } from './performance/integration/AutotaskPerformanceIntegration';\n>>> 8: // Note: Use individual exports instead of wildcard to avoid conflicts\n    9: export { \n    10:   PerformanceMetrics,",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/index.ts",
      "line": 16,
      "type": "comment-marker",
      "code": "// Note: Use individual exports instead of wildcard to avoid conflicts",
      "context": "    14: \n    15: // Entity Relationship and Cascade Operations System\n>>> 16: // Note: Use individual exports instead of wildcard to avoid conflicts\n    17: export {\n    18:   AutotaskRelationshipSystem,",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/index.ts",
      "line": 29,
      "type": "comment-marker",
      "code": "// Note: Use individual exports instead of wildcard to avoid conflicts",
      "context": "    27: \n    28: // Enterprise Validation and Sanitization System\n>>> 29: // Note: Use individual exports instead of wildcard to avoid conflicts\n    30: export {\n    31:   ValidationEngine,",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/index.ts",
      "line": 48,
      "type": "comment-marker",
      "code": "// Note: Use individual exports instead of wildcard to avoid conflicts",
      "context": "    46: \n    47: // Webhook and Event Handling System\n>>> 48: // Note: Use individual exports instead of wildcard to avoid conflicts\n    49: export {\n    50:   WebhookManager,",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/index.ts",
      "line": 62,
      "type": "comment-marker",
      "code": "// Note: Use individual exports instead of wildcard to avoid conflicts",
      "context": "    60: \n    61: // PSA Migration Framework\n>>> 62: // Note: Use individual exports instead of wildcard to avoid conflicts\n    63: export {\n    64:   MigrationEngine,",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/index.ts",
      "line": 80,
      "type": "comment-marker",
      "code": "// Note: Use individual exports instead of wildcard to avoid conflicts",
      "context": "    78: \n    79: // Advanced Queue System with Error Recovery\n>>> 80: // Note: Use individual exports instead of wildcard to avoid conflicts\n    81: export {\n    82:   QueueManager,",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/migration/cli/InteractiveWizard.ts",
      "line": 9,
      "type": "comment-marker",
      "code": "// Placeholder implementation",
      "context": "    7: export class InteractiveWizard {\n    8:   async run(): Promise<MigrationConfig> {\n>>> 9:     // Placeholder implementation\n    10:     return {\n    11:       source: {",
      "functionName": "run",
      "className": "InteractiveWizard",
      "severity": "medium",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/migration/cli/InteractiveWizard.ts",
      "line": 9,
      "type": "placeholder-keyword",
      "code": "// Placeholder implementation",
      "context": "    7: export class InteractiveWizard {\n    8:   async run(): Promise<MigrationConfig> {\n>>> 9:     // Placeholder implementation\n    10:     return {\n    11:       source: {",
      "functionName": "run",
      "className": "InteractiveWizard",
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/migration/connectors/BaseConnector.ts",
      "line": 78,
      "type": "empty-block",
      "code": "options: ConnectorOptions = {}",
      "context": "    76:     protected system: PSASystem,\n    77:     config: SourceConnectionConfig,\n>>> 78:     options: ConnectorOptions = {}\n    79:   ) {\n    80:     super();",
      "functionName": "unknown",
      "className": "BaseConnector",
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/migration/connectors/BaseConnector.ts",
      "line": 472,
      "type": "comment-marker",
      "code": "return 90; // Placeholder implementation",
      "context": "    470:   protected calculateConsistency(records: any[]): number {\n    471:     // Simplified consistency calculation\n>>> 472:     return 90; // Placeholder implementation\n    473:   }\n    474: ",
      "functionName": "calculateConsistency",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/migration/connectors/BaseConnector.ts",
      "line": 472,
      "type": "placeholder-keyword",
      "code": "return 90; // Placeholder implementation",
      "context": "    470:   protected calculateConsistency(records: any[]): number {\n    471:     // Simplified consistency calculation\n>>> 472:     return 90; // Placeholder implementation\n    473:   }\n    474: ",
      "functionName": "calculateConsistency",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/migration/connectors/BaseConnector.ts",
      "line": 472,
      "type": "hardcoded-value",
      "code": "return 90; // Placeholder implementation",
      "context": "    470:   protected calculateConsistency(records: any[]): number {\n    471:     // Simplified consistency calculation\n>>> 472:     return 90; // Placeholder implementation\n    473:   }\n    474: ",
      "functionName": "calculateConsistency",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Calculate or fetch actual value",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/migration/connectors/BaseConnector.ts",
      "line": 477,
      "type": "comment-marker",
      "code": "return 85; // Placeholder implementation",
      "context": "    475:   protected calculateValidity(schema: EntitySchema, records: any[]): number {\n    476:     // Simplified validity calculation\n>>> 477:     return 85; // Placeholder implementation\n    478:   }\n    479: ",
      "functionName": "calculateValidity",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/migration/connectors/BaseConnector.ts",
      "line": 477,
      "type": "placeholder-keyword",
      "code": "return 85; // Placeholder implementation",
      "context": "    475:   protected calculateValidity(schema: EntitySchema, records: any[]): number {\n    476:     // Simplified validity calculation\n>>> 477:     return 85; // Placeholder implementation\n    478:   }\n    479: ",
      "functionName": "calculateValidity",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/migration/connectors/BaseConnector.ts",
      "line": 477,
      "type": "hardcoded-value",
      "code": "return 85; // Placeholder implementation",
      "context": "    475:   protected calculateValidity(schema: EntitySchema, records: any[]): number {\n    476:     // Simplified validity calculation\n>>> 477:     return 85; // Placeholder implementation\n    478:   }\n    479: ",
      "functionName": "calculateValidity",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Calculate or fetch actual value",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/migration/connectors/ConnectWiseManageConnector.ts",
      "line": 21,
      "type": "empty-block",
      "code": "options: ConnectorOptions = {}",
      "context": "    19:     system: PSASystem,\n    20:     config: SourceConnectionConfig,\n>>> 21:     options: ConnectorOptions = {}\n    22:   ) {\n    23:     super(system, config, options);",
      "functionName": "unknown",
      "className": "ConnectWiseManageConnector",
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/migration/connectors/CSVImportConnector.ts",
      "line": 36,
      "type": "empty-block",
      "code": "options: ConnectorOptions = {}",
      "context": "    34:     system: PSASystem,\n    35:     config: CSVImportConfig,\n>>> 36:     options: ConnectorOptions = {}\n    37:   ) {\n    38:     super(system, config, options);",
      "functionName": "unknown",
      "className": "CSVImportConnector",
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/migration/connectors/CSVImportConnector.ts",
      "line": 252,
      "type": "placeholder-keyword",
      "code": "// This is a placeholder implementation",
      "context": "    250:   private async loadExcelData(): Promise<void> {\n    251:     // For Excel files, we would use a library like xlsx or exceljs\n>>> 252:     // This is a placeholder implementation\n    253:     try {\n    254:       const xlsx = await import('xlsx');",
      "functionName": "loadExcelData",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/migration/connectors/CSVImportConnector.ts",
      "line": 252,
      "type": "explicit-placeholder",
      "code": "// This is a placeholder implementation",
      "context": "    250:   private async loadExcelData(): Promise<void> {\n    251:     // For Excel files, we would use a library like xlsx or exceljs\n>>> 252:     // This is a placeholder implementation\n    253:     try {\n    254:       const xlsx = await import('xlsx');",
      "functionName": "loadExcelData",
      "className": null,
      "severity": "high",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "high"
    },
    {
      "file": "src/migration/connectors/FreshServiceConnector.ts",
      "line": 17,
      "type": "empty-block",
      "code": "options: ConnectorOptions = {}",
      "context": "    15:     system: PSASystem,\n    16:     config: SourceConnectionConfig,\n>>> 17:     options: ConnectorOptions = {}\n    18:   ) {\n    19:     super(system, config, options);",
      "functionName": "unknown",
      "className": "FreshServiceConnector",
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/migration/connectors/KaseyaVSAConnector.ts",
      "line": 22,
      "type": "empty-block",
      "code": "options: ConnectorOptions = {}",
      "context": "    20:     system: PSASystem,\n    21:     config: SourceConnectionConfig,\n>>> 22:     options: ConnectorOptions = {}\n    23:   ) {\n    24:     super(system, config, options);",
      "functionName": "unknown",
      "className": "KaseyaVSAConnector",
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/migration/connectors/ServiceDeskPlusConnector.ts",
      "line": 17,
      "type": "empty-block",
      "code": "options: ConnectorOptions = {}",
      "context": "    15:     system: PSASystem,\n    16:     config: SourceConnectionConfig,\n>>> 17:     options: ConnectorOptions = {}\n    18:   ) {\n    19:     super(system, config, options);",
      "functionName": "unknown",
      "className": "ServiceDeskPlusConnector",
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/migration/connectors/ServiceNowConnector.ts",
      "line": 20,
      "type": "empty-block",
      "code": "options: ConnectorOptions = {}",
      "context": "    18:     system: PSASystem,\n    19:     config: SourceConnectionConfig,\n>>> 20:     options: ConnectorOptions = {}\n    21:   ) {\n    22:     super(system, config, options);",
      "functionName": "unknown",
      "className": "ServiceNowConnector",
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/migration/enterprise/CheckpointManager.ts",
      "line": 9,
      "type": "comment-marker",
      "code": "// Placeholder implementation",
      "context": "    7: export class CheckpointManager {\n    8:   async saveCheckpoint(checkpoint: MigrationCheckpoint): Promise<void> {\n>>> 9:     // Placeholder implementation\n    10:   }\n    11: ",
      "functionName": "saveCheckpoint",
      "className": "CheckpointManager",
      "severity": "medium",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/migration/enterprise/CheckpointManager.ts",
      "line": 9,
      "type": "placeholder-keyword",
      "code": "// Placeholder implementation",
      "context": "    7: export class CheckpointManager {\n    8:   async saveCheckpoint(checkpoint: MigrationCheckpoint): Promise<void> {\n>>> 9:     // Placeholder implementation\n    10:   }\n    11: ",
      "functionName": "saveCheckpoint",
      "className": "CheckpointManager",
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/migration/enterprise/CheckpointManager.ts",
      "line": 13,
      "type": "comment-marker",
      "code": "// Placeholder implementation",
      "context": "    11: \n    12:   async loadCheckpoint(checkpointId: string): Promise<MigrationCheckpoint> {\n>>> 13:     // Placeholder implementation\n    14:     return {\n    15:       id: checkpointId,",
      "functionName": "loadCheckpoint",
      "className": "CheckpointManager",
      "severity": "medium",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/migration/enterprise/CheckpointManager.ts",
      "line": 13,
      "type": "placeholder-keyword",
      "code": "// Placeholder implementation",
      "context": "    11: \n    12:   async loadCheckpoint(checkpointId: string): Promise<MigrationCheckpoint> {\n>>> 13:     // Placeholder implementation\n    14:     return {\n    15:       id: checkpointId,",
      "functionName": "loadCheckpoint",
      "className": "CheckpointManager",
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/migration/enterprise/ParallelProcessor.ts",
      "line": 11,
      "type": "empty-block",
      "code": "constructor(private options: ParallelProcessorOptions) {}",
      "context": "    9: \n    10: export class ParallelProcessor {\n>>> 11:   constructor(private options: ParallelProcessorOptions) {}\n    12: \n    13:   async processInParallel<T, R>(",
      "functionName": "constructor",
      "className": "ParallelProcessor",
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/migration/enterprise/ProgressTracker.ts",
      "line": 6,
      "type": "comment-marker",
      "code": "// Placeholder implementation",
      "context": "    4: \n    5: export class ProgressTracker {\n>>> 6:   // Placeholder implementation\n    7: }",
      "functionName": "unknown",
      "className": "ProgressTracker",
      "severity": "medium",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/migration/enterprise/ProgressTracker.ts",
      "line": 6,
      "type": "placeholder-keyword",
      "code": "// Placeholder implementation",
      "context": "    4: \n    5: export class ProgressTracker {\n>>> 6:   // Placeholder implementation\n    7: }",
      "functionName": "unknown",
      "className": "ProgressTracker",
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/migration/validation/PostMigrationValidator.ts",
      "line": 20,
      "type": "comment-marker",
      "code": "// Placeholder implementation",
      "context": "    18:     this.logger.info('Starting post-migration validation');\n    19:     \n>>> 20:     // Placeholder implementation\n    21:     return {\n    22:       isValid: true,",
      "functionName": "validate",
      "className": "PostMigrationValidator",
      "severity": "medium",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "high",
      "priority": "medium"
    },
    {
      "file": "src/migration/validation/PostMigrationValidator.ts",
      "line": 20,
      "type": "placeholder-keyword",
      "code": "// Placeholder implementation",
      "context": "    18:     this.logger.info('Starting post-migration validation');\n    19:     \n>>> 20:     // Placeholder implementation\n    21:     return {\n    22:       isValid: true,",
      "functionName": "validate",
      "className": "PostMigrationValidator",
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "high",
      "priority": "medium"
    },
    {
      "file": "src/migration/validation/PreMigrationValidator.ts",
      "line": 85,
      "type": "empty-block",
      "code": "options: PreValidationOptions = {}",
      "context": "    83:     entities: string[],\n    84:     config: MigrationConfig,\n>>> 85:     options: PreValidationOptions = {}\n    86:   ): Promise<ValidationResult> {\n    87:     const validationOptions: PreValidationOptions = {",
      "functionName": "constructor",
      "className": "PreMigrationValidator",
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "high",
      "priority": "medium"
    },
    {
      "file": "src/migration/validation/PreMigrationValidator.ts",
      "line": 412,
      "type": "comment-marker",
      "code": "consistency: 90, // Placeholder",
      "context": "    410:         completeness: this.calculateCompleteness(schema, records),\n    411:         accuracy: this.calculateAccuracy(schema, records),\n>>> 412:         consistency: 90, // Placeholder\n    413:         validity: 85     // Placeholder\n    414:       }",
      "functionName": "if",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/migration/validation/PreMigrationValidator.ts",
      "line": 412,
      "type": "placeholder-keyword",
      "code": "consistency: 90, // Placeholder",
      "context": "    410:         completeness: this.calculateCompleteness(schema, records),\n    411:         accuracy: this.calculateAccuracy(schema, records),\n>>> 412:         consistency: 90, // Placeholder\n    413:         validity: 85     // Placeholder\n    414:       }",
      "functionName": "if",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/migration/validation/PreMigrationValidator.ts",
      "line": 413,
      "type": "comment-marker",
      "code": "validity: 85     // Placeholder",
      "context": "    411:         accuracy: this.calculateAccuracy(schema, records),\n    412:         consistency: 90, // Placeholder\n>>> 413:         validity: 85     // Placeholder\n    414:       }\n    415:     };",
      "functionName": "if",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/migration/validation/PreMigrationValidator.ts",
      "line": 413,
      "type": "placeholder-keyword",
      "code": "validity: 85     // Placeholder",
      "context": "    411:         accuracy: this.calculateAccuracy(schema, records),\n    412:         consistency: 90, // Placeholder\n>>> 413:         validity: 85     // Placeholder\n    414:       }\n    415:     };",
      "functionName": "if",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/performance/integration/AutotaskPerformanceIntegration.ts",
      "line": 34,
      "type": "empty-block",
      "code": "} = {}",
      "context": "    32:       cache?: CacheConfig;\n    33:       optimization?: OptimizationConfig;\n>>> 34:     } = {}\n    35:   ) {\n    36:     this.performanceMonitor = new PerformanceMonitor(logger, config.performance);",
      "functionName": "unknown",
      "className": "AutotaskPerformanceIntegration",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/performance/integration/AutotaskPerformanceIntegration.ts",
      "line": 102,
      "type": "not-implemented",
      "code": "patterns: [] // Method not implemented yet",
      "context": "    100:       metrics: this.cache.getMetrics(),\n    101:       // patterns: this.cache.getRequestPatterns?.() || []\n>>> 102:       patterns: [] // Method not implemented yet\n    103:     };\n    104: ",
      "functionName": "disable",
      "className": "AutotaskPerformanceIntegration",
      "severity": "high",
      "requiredImplementation": "Implement full functionality according to API specification",
      "estimatedComplexity": "medium",
      "priority": "high"
    },
    {
      "file": "src/performance/integration/AutotaskPerformanceIntegration.ts",
      "line": 296,
      "type": "empty-block",
      "code": "request: {}",
      "context": "    294:             headers: { 'x-cache': 'HIT' },\n    295:             config,\n>>> 296:             request: {}\n    297:           } as AxiosResponse;\n    298: ",
      "functionName": "if",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/performance/integration/AutotaskPerformanceIntegration.ts",
      "line": 552,
      "type": "empty-block",
      "code": "metadata: (config as any).metadata || {}",
      "context": "    550:       headers: config.headers as Record<string, string>,\n    551:       priority: 5, // Default priority\n>>> 552:       metadata: (config as any).metadata || {}\n    553:     };\n    554:   }",
      "functionName": "convertToBatchRequest",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/performance/integration/AutotaskPerformanceIntegration.ts",
      "line": 563,
      "type": "empty-block",
      "code": "request: {}",
      "context": "    561:       headers: batchResponse.headers,\n    562:       config,\n>>> 563:       request: {}\n    564:     } as AxiosResponse;\n    565:   }",
      "functionName": "convertToAxiosResponse",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/performance/monitoring/PerformanceMonitor.ts",
      "line": 46,
      "type": "empty-block",
      "code": "config: PerformanceConfig = {}",
      "context": "    44:   constructor(\n    45:     private logger: winston.Logger,\n>>> 46:     config: PerformanceConfig = {}\n    47:   ) {\n    48:     super();",
      "functionName": "unknown",
      "className": "PerformanceMonitor",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/performance/monitoring/PerformanceMonitor.ts",
      "line": 388,
      "type": "placeholder-keyword",
      "code": "// For now, return a placeholder value",
      "context": "    386:   private getCacheHitRate(): number {\n    387:     // This would be implemented by the caching system\n>>> 388:     // For now, return a placeholder value\n    389:     return 85; // 85% cache hit rate\n    390:   }",
      "functionName": "getCacheHitRate",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/performance/monitoring/PerformanceMonitor.ts",
      "line": 388,
      "type": "temporary-placeholder",
      "code": "// For now, return a placeholder value",
      "context": "    386:   private getCacheHitRate(): number {\n    387:     // This would be implemented by the caching system\n>>> 388:     // For now, return a placeholder value\n    389:     return 85; // 85% cache hit rate\n    390:   }",
      "functionName": "getCacheHitRate",
      "className": null,
      "severity": "high",
      "requiredImplementation": "Replace temporary code with permanent solution",
      "estimatedComplexity": "low",
      "priority": "high"
    },
    {
      "file": "src/performance/optimization/RequestOptimizer.ts",
      "line": 47,
      "type": "empty-block",
      "code": "config: OptimizationConfig = {}",
      "context": "    45:   constructor(\n    46:     private logger: winston.Logger,\n>>> 47:     config: OptimizationConfig = {}\n    48:   ) {\n    49:     super();",
      "functionName": "unknown",
      "className": "RequestOptimizer",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/queue/backends/RedisBackend.ts",
      "line": 791,
      "type": "empty-block",
      "code": "metadata: data[8] ? JSON.parse(data[8]) : {}",
      "context": "    789:       timeout: parseInt(data[6] || '1000'),\n    790:       status: (data[7] as any) || 'collecting',\n>>> 791:       metadata: data[8] ? JSON.parse(data[8]) : {}\n    792:     };\n    793:   }",
      "functionName": "if",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/queue/backends/SQLiteBackend.ts",
      "line": 352,
      "type": "placeholder-keyword",
      "code": "const placeholders = statusArray.map(() => '?').join(',');",
      "context": "    350:       if (filter.status) {\n    351:         const statusArray = Array.isArray(filter.status) ? filter.status : [filter.status];\n>>> 352:         const placeholders = statusArray.map(() => '?').join(',');\n    353:         query += ` AND status IN (${placeholders})`;\n    354:         params.push(...statusArray);",
      "functionName": "if",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/queue/backends/SQLiteBackend.ts",
      "line": 353,
      "type": "placeholder-keyword",
      "code": "query += ` AND status IN (${placeholders})`;",
      "context": "    351:         const statusArray = Array.isArray(filter.status) ? filter.status : [filter.status];\n    352:         const placeholders = statusArray.map(() => '?').join(',');\n>>> 353:         query += ` AND status IN (${placeholders})`;\n    354:         params.push(...statusArray);\n    355:       }",
      "functionName": "if",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/queue/core/QueueManager.ts",
      "line": 168,
      "type": "empty-block",
      "code": "} = {}",
      "context": "    166:       metadata?: Record<string, any>;\n    167:       scheduledAt?: Date;\n>>> 168:     } = {}\n    169:   ): Promise<T> {\n    170:     // Validate queue capacity",
      "functionName": "catch",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/queue/strategies/BatchManager.ts",
      "line": 74,
      "type": "empty-block",
      "code": "options: Partial<BatchManagerOptions> = {}",
      "context": "    72:     batchTimeout: number,\n    73:     logger: winston.Logger,\n>>> 74:     options: Partial<BatchManagerOptions> = {}\n    75:   ) {\n    76:     super();",
      "functionName": "unknown",
      "className": "BatchManager",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/queue/strategies/BatchManager.ts",
      "line": 504,
      "type": "comment-marker",
      "code": "this.stats.deduplicationRate = 0; // Placeholder",
      "context": "    502:     \n    503:     // Deduplication rate (would need tracking of duplicates)\n>>> 504:     this.stats.deduplicationRate = 0; // Placeholder\n    505:     \n    506:     // Timeout rate (batches processed due to timeout vs size)",
      "functionName": "if",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/queue/strategies/BatchManager.ts",
      "line": 504,
      "type": "placeholder-keyword",
      "code": "this.stats.deduplicationRate = 0; // Placeholder",
      "context": "    502:     \n    503:     // Deduplication rate (would need tracking of duplicates)\n>>> 504:     this.stats.deduplicationRate = 0; // Placeholder\n    505:     \n    506:     // Timeout rate (batches processed due to timeout vs size)",
      "functionName": "if",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/queue/utils/QueueFactory.ts",
      "line": 19,
      "type": "empty-block",
      "code": "options: Partial<QueueManagerOptions> = {}",
      "context": "    17:  */\n    18: export async function createQueueManager(\n>>> 19:   options: Partial<QueueManagerOptions> = {}\n    20: ): Promise<QueueManager> {\n    21:   const logger = options.logger || createDefaultLogger();",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/queue/utils/QueueFactory.ts",
      "line": 39,
      "type": "empty-block",
      "code": "overrides: Partial<QueueConfiguration> = {}",
      "context": "    37:  */\n    38: export function createDefaultConfiguration(\n>>> 39:   overrides: Partial<QueueConfiguration> = {}\n    40: ): QueueConfiguration {\n    41:   return {",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/queue/utils/QueueFactory.ts",
      "line": 88,
      "type": "empty-block",
      "code": "overrides: Partial<QueueConfiguration> = {}",
      "context": "    86:  */\n    87: export function createProductionConfiguration(\n>>> 88:   overrides: Partial<QueueConfiguration> = {}\n    89: ): QueueConfiguration {\n    90:   return createDefaultConfiguration({",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/queue/utils/QueueFactory.ts",
      "line": 140,
      "type": "empty-block",
      "code": "overrides: Partial<QueueConfiguration> = {}",
      "context": "    138:     db?: number;\n    139:   },\n>>> 140:   overrides: Partial<QueueConfiguration> = {}\n    141: ): QueueConfiguration {\n    142:   return createDefaultConfiguration({",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/queue/utils/QueueFactory.ts",
      "line": 186,
      "type": "empty-block",
      "code": "overrides: Partial<QueueConfiguration> = {}",
      "context": "    184:  */\n    185: export function createDevelopmentConfiguration(\n>>> 186:   overrides: Partial<QueueConfiguration> = {}\n    187: ): QueueConfiguration {\n    188:   return createDefaultConfiguration({",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/queue/utils/QueueFactory.ts",
      "line": 225,
      "type": "empty-block",
      "code": "overrides: Partial<QueueConfiguration> = {}",
      "context": "    223:  */\n    224: export function createTestConfiguration(\n>>> 225:   overrides: Partial<QueueConfiguration> = {}\n    226: ): QueueConfiguration {\n    227:   return createDefaultConfiguration({",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/rate-limiting/ProductionReliabilityManager.ts",
      "line": 239,
      "type": "empty-block",
      "code": "} = {}",
      "context": "    237:       data?: any;\n    238:       headers?: Record<string, string>;\n>>> 239:     } = {}\n    240:   ): Promise<T> {\n    241:     // Check if we should shed this request",
      "functionName": "if",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/relationships/batch/BatchRelationshipProcessor.ts",
      "line": 101,
      "type": "empty-block",
      "code": "options: Partial<BatchProcessingOptions> = {}",
      "context": "    99:   public async processBatchOperations(\n    100:     operations: BatchOperation[],\n>>> 101:     options: Partial<BatchProcessingOptions> = {}\n    102:   ): Promise<BatchResult> {\n    103:     const operationId = this.generateOperationId();",
      "functionName": "unknown",
      "className": "BatchRelationshipProcessor",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/relationships/batch/BatchRelationshipProcessor.ts",
      "line": 158,
      "type": "empty-block",
      "code": "options: Partial<BatchProcessingOptions> = {}",
      "context": "    156:       id?: string; // Optional client-provided ID for tracking\n    157:     }>,\n>>> 158:     options: Partial<BatchProcessingOptions> = {}\n    159:   ): Promise<BatchResult> {\n    160:     const operations: BatchOperation[] = records.map((record, index) => ({",
      "functionName": "if",
      "className": "BatchRelationshipProcessor",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/relationships/batch/BatchRelationshipProcessor.ts",
      "line": 189,
      "type": "empty-block",
      "code": "options: Partial<BatchProcessingOptions & { followDependents?: boolean }> = {}",
      "context": "    187:       id?: string;\n    188:     }>,\n>>> 189:     options: Partial<BatchProcessingOptions & { followDependents?: boolean }> = {}\n    190:   ): Promise<BatchResult> {\n    191:     const operations: BatchOperation[] = updates.map(update => ({",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/relationships/batch/BatchRelationshipProcessor.ts",
      "line": 216,
      "type": "empty-block",
      "code": "options: Partial<BatchProcessingOptions & { force?: boolean; safetyChecks?: boolean }> = {}",
      "context": "    214:     entityName: string,\n    215:     recordIds: (string | number)[],\n>>> 216:     options: Partial<BatchProcessingOptions & { force?: boolean; safetyChecks?: boolean }> = {}\n    217:   ): Promise<BatchResult> {\n    218:     const operations: BatchOperation[] = recordIds.map(recordId => ({",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/relationships/cascade/CascadeEngine.ts",
      "line": 42,
      "type": "empty-block",
      "code": "} = {}",
      "context": "    40:       batchSize?: number;\n    41:       continueOnError?: boolean;\n>>> 42:     } = {}\n    43:   ): Promise<CascadeResult> {\n    44:     const startTime = Date.now();",
      "functionName": "constructor",
      "className": "CascadeEngine",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/relationships/cascade/CascadeEngine.ts",
      "line": 111,
      "type": "empty-block",
      "code": "} = {}",
      "context": "    109:       continueOnError?: boolean;\n    110:       followDependents?: boolean;\n>>> 111:     } = {}\n    112:   ): Promise<CascadeResult> {\n    113:     const startTime = Date.now();",
      "functionName": "catch",
      "className": "CascadeEngine",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/relationships/cascade/CascadeEngine.ts",
      "line": 180,
      "type": "empty-block",
      "code": "} = {}",
      "context": "    178:       force?: boolean;\n    179:       safetyChecks?: boolean;\n>>> 180:     } = {}\n    181:   ): Promise<CascadeResult> {\n    182:     const startTime = Date.now();",
      "functionName": "catch",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/relationships/graph/GraphTraversalEngine.ts",
      "line": 56,
      "type": "empty-block",
      "code": "options: Partial<TraversalOptions> = {}",
      "context": "    54:     startEntity: string,\n    55:     targetEntity?: string,\n>>> 56:     options: Partial<TraversalOptions> = {}\n    57:   ): GraphTraversalResult {\n    58:     const startTime = Date.now();",
      "functionName": "constructor",
      "className": "GraphTraversalEngine",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/relationships/graph/GraphTraversalEngine.ts",
      "line": 152,
      "type": "empty-block",
      "code": "options: Partial<TraversalOptions> = {}",
      "context": "    150:     startEntity: string,\n    151:     targetEntity?: string,\n>>> 152:     options: Partial<TraversalOptions> = {}\n    153:   ): GraphTraversalResult {\n    154:     const startTime = Date.now();",
      "functionName": "for",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/relationships/graph/GraphTraversalEngine.ts",
      "line": 248,
      "type": "empty-block",
      "code": "options: Partial<TraversalOptions> = {}",
      "context": "    246:     startEntity: string,\n    247:     targetEntity: string,\n>>> 248:     options: Partial<TraversalOptions> = {}\n    249:   ): RelationshipPath | null {\n    250:     const distances = new Map<string, number>();",
      "functionName": "for",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/relationships/graph/GraphTraversalEngine.ts",
      "line": 313,
      "type": "empty-block",
      "code": "options: Partial<TraversalOptions> = {}",
      "context": "    311:     startEntity: string,\n    312:     targetEntity: string,\n>>> 313:     options: Partial<TraversalOptions> = {}\n    314:   ): RelationshipPath[] {\n    315:     const paths: RelationshipPath[] = [];",
      "functionName": "for",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/relationships/integrity/DataIntegrityManager.ts",
      "line": 360,
      "type": "empty-block",
      "code": "} = {}",
      "context": "    358:       stepByStep?: boolean;\n    359:       backupData?: boolean;\n>>> 360:     } = {}\n    361:   ): Promise<{\n    362:     success: boolean;",
      "functionName": "unknown",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/relationships/integrity/DataIntegrityManager.ts",
      "line": 424,
      "type": "empty-block",
      "code": "} = {}",
      "context": "    422:       maxAge?: number; // Days\n    423:       severityThreshold?: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n>>> 424:     } = {}\n    425:   ): Promise<{\n    426:     deletedRecords: Array<{ entityName: string; recordId: string | number }>;",
      "functionName": "if",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/relationships/integrity/DataIntegrityManager.ts",
      "line": 486,
      "type": "placeholder-keyword",
      "code": "// This is a placeholder implementation",
      "context": "    484:   private async executeQuery(query: string, batchSize: number): Promise<any[]> {\n    485:     // Execute query using Autotask client\n>>> 486:     // This is a placeholder implementation\n    487:     return [];\n    488:   }",
      "functionName": "executeQuery",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/relationships/integrity/DataIntegrityManager.ts",
      "line": 486,
      "type": "explicit-placeholder",
      "code": "// This is a placeholder implementation",
      "context": "    484:   private async executeQuery(query: string, batchSize: number): Promise<any[]> {\n    485:     // Execute query using Autotask client\n>>> 486:     // This is a placeholder implementation\n    487:     return [];\n    488:   }",
      "functionName": "executeQuery",
      "className": null,
      "severity": "high",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "high"
    },
    {
      "file": "src/relationships/loading/SmartLoadingEngine.ts",
      "line": 75,
      "type": "empty-block",
      "code": "options: RelationshipQueryOptions = {}",
      "context": "    73:     entityName: string,\n    74:     recordId: string | number,\n>>> 75:     options: RelationshipQueryOptions = {}\n    76:   ): Promise<LoadingResult> {\n    77:     const context: LoadingContext = {",
      "functionName": "constructor",
      "className": "SmartLoadingEngine",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/relationships/loading/SmartLoadingEngine.ts",
      "line": 154,
      "type": "empty-block",
      "code": "} = {}",
      "context": "    152:       parallelism?: number;\n    153:       optimizeQueries?: boolean;\n>>> 154:     } = {}\n    155:   ): Promise<Map<string, LoadingResult>> {\n    156:     const results = new Map<string, LoadingResult>();",
      "functionName": "catch",
      "className": "SmartLoadingEngine",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/relationships/loading/SmartLoadingEngine.ts",
      "line": 195,
      "type": "empty-block",
      "code": "} = {}",
      "context": "    193:       loadingStrategy?: LoadingStrategy;\n    194:       priority?: 'LOW' | 'MEDIUM' | 'HIGH';\n>>> 195:     } = {}\n    196:   ): Promise<void> {\n    197:     const relationships = options.relationships || ",
      "functionName": "for",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/relationships/loading/SmartLoadingEngine.ts",
      "line": 643,
      "type": "comment-marker",
      "code": "// Placeholder methods for actual data loading",
      "context": "    641:   }\n    642: \n>>> 643:   // Placeholder methods for actual data loading\n    644:   private async loadOneToManyRelationship(relationship: EntityRelationship, recordId: string | number): Promise<any[]> {\n    645:     // Implementation would use Autotask client to fetch related records",
      "functionName": "isHighPriorityRelationship",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/relationships/loading/SmartLoadingEngine.ts",
      "line": 643,
      "type": "placeholder-keyword",
      "code": "// Placeholder methods for actual data loading",
      "context": "    641:   }\n    642: \n>>> 643:   // Placeholder methods for actual data loading\n    644:   private async loadOneToManyRelationship(relationship: EntityRelationship, recordId: string | number): Promise<any[]> {\n    645:     // Implementation would use Autotask client to fetch related records",
      "functionName": "isHighPriorityRelationship",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 486,
      "type": "mock-keyword",
      "code": "const mockData = [",
      "context": "    484:     testMethods.push(`  describe('list', () => {\n    485:     it('should list ${entity.pluralName.toLowerCase()} successfully', async () => {\n>>> 486:       const mockData = [\n    487:         { id: 1, name: '${entity.name} 1' },\n    488:         { id: 2, name: '${entity.name} 2' },",
      "functionName": "generateTestFile",
      "className": "for",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 491,
      "type": "mock-keyword",
      "code": "mockAxios.get.mockResolvedValueOnce({",
      "context": "    489:       ];\n    490: \n>>> 491:       mockAxios.get.mockResolvedValueOnce({\n    492:         data: { items: mockData },\n    493:         status: 200,",
      "functionName": "generateTestFile",
      "className": "for",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 492,
      "type": "mock-keyword",
      "code": "data: { items: mockData },",
      "context": "    490: \n    491:       mockAxios.get.mockResolvedValueOnce({\n>>> 492:         data: { items: mockData },\n    493:         status: 200,\n    494:         statusText: 'OK',",
      "functionName": "generateTestFile",
      "className": "for",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 501,
      "type": "mock-keyword",
      "code": "expect(result.data).toEqual(mockData);",
      "context": "    499:       const result = await ${camelPlural}.list();\n    500: \n>>> 501:       expect(result.data).toEqual(mockData);\n    502:       expect(mockAxios.get).toHaveBeenCalledWith('/${entity.pluralName}/query', {\n    503:         params: {",
      "functionName": "generateTestFile",
      "className": "for",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 502,
      "type": "mock-keyword",
      "code": "expect(mockAxios.get).toHaveBeenCalledWith('/${entity.pluralName}/query', {",
      "context": "    500: \n    501:       expect(result.data).toEqual(mockData);\n>>> 502:       expect(mockAxios.get).toHaveBeenCalledWith('/${entity.pluralName}/query', {\n    503:         params: {\n    504:           filter: [{ op: 'gte', field: 'id', value: 0 }]",
      "functionName": "generateTestFile",
      "className": "for",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 517,
      "type": "mock-keyword",
      "code": "mockAxios.get.mockResolvedValueOnce({",
      "context": "    515:       };\n    516: \n>>> 517:       mockAxios.get.mockResolvedValueOnce({\n    518:         data: { items: [] },\n    519:         status: 200,",
      "functionName": "generateTestFile",
      "className": "for",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 527,
      "type": "mock-keyword",
      "code": "expect(mockAxios.get).toHaveBeenCalledWith('/${entity.pluralName}/query', {",
      "context": "    525:       await ${camelPlural}.list(query);\n    526: \n>>> 527:       expect(mockAxios.get).toHaveBeenCalledWith('/${entity.pluralName}/query', {\n    528:         params: {\n    529:           filter: [{ op: 'eq', field: 'name', value: 'test' }],",
      "functionName": "unknown",
      "className": "for",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 542,
      "type": "mock-keyword",
      "code": "const mockData = { id: 1, name: 'Test ${entity.name}' };",
      "context": "    540:       testMethods.push(`  describe('get', () => {\n    541:     it('should get ${entity.name.toLowerCase()} by id', async () => {\n>>> 542:       const mockData = { id: 1, name: 'Test ${entity.name}' };\n    543: \n    544:       mockAxios.get.mockResolvedValueOnce({",
      "functionName": "unknown",
      "className": "for",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 544,
      "type": "mock-keyword",
      "code": "mockAxios.get.mockResolvedValueOnce({",
      "context": "    542:       const mockData = { id: 1, name: 'Test ${entity.name}' };\n    543: \n>>> 544:       mockAxios.get.mockResolvedValueOnce({\n    545:         data: { item: mockData },\n    546:         status: 200,",
      "functionName": "unknown",
      "className": "for",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 545,
      "type": "mock-keyword",
      "code": "data: { item: mockData },",
      "context": "    543: \n    544:       mockAxios.get.mockResolvedValueOnce({\n>>> 545:         data: { item: mockData },\n    546:         status: 200,\n    547:         statusText: 'OK',",
      "functionName": "unknown",
      "className": "for",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 554,
      "type": "mock-keyword",
      "code": "expect(result.data).toEqual(mockData);",
      "context": "    552:       const result = await ${camelPlural}.get(1);\n    553: \n>>> 554:       expect(result.data).toEqual(mockData);\n    555:       expect(mockAxios.get).toHaveBeenCalledWith('/${entity.pluralName}/1');\n    556:     });",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 555,
      "type": "mock-keyword",
      "code": "expect(mockAxios.get).toHaveBeenCalledWith('/${entity.pluralName}/1');",
      "context": "    553: \n    554:       expect(result.data).toEqual(mockData);\n>>> 555:       expect(mockAxios.get).toHaveBeenCalledWith('/${entity.pluralName}/1');\n    556:     });\n    557:   });`);",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 565,
      "type": "mock-keyword",
      "code": "const mockResponse = { id: 1, ...${camelName}Data };",
      "context": "    563:     it('should create ${entity.name.toLowerCase()} successfully', async () => {\n    564:       const ${camelName}Data = { name: 'New ${entity.name}' };\n>>> 565:       const mockResponse = { id: 1, ...${camelName}Data };\n    566: \n    567:       mockAxios.post.mockResolvedValueOnce({",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 567,
      "type": "mock-keyword",
      "code": "mockAxios.post.mockResolvedValueOnce({",
      "context": "    565:       const mockResponse = { id: 1, ...${camelName}Data };\n    566: \n>>> 567:       mockAxios.post.mockResolvedValueOnce({\n    568:         data: { item: mockResponse },\n    569:         status: 201,",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 568,
      "type": "mock-keyword",
      "code": "data: { item: mockResponse },",
      "context": "    566: \n    567:       mockAxios.post.mockResolvedValueOnce({\n>>> 568:         data: { item: mockResponse },\n    569:         status: 201,\n    570:         statusText: 'Created',",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 577,
      "type": "mock-keyword",
      "code": "expect(result.data).toEqual(mockResponse);",
      "context": "    575:       const result = await ${camelPlural}.create(${camelName}Data);\n    576: \n>>> 577:       expect(result.data).toEqual(mockResponse);\n    578:       expect(mockAxios.post).toHaveBeenCalledWith('/${entity.pluralName}', ${camelName}Data);\n    579:     });",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 578,
      "type": "mock-keyword",
      "code": "expect(mockAxios.post).toHaveBeenCalledWith('/${entity.pluralName}', ${camelName}Data);",
      "context": "    576: \n    577:       expect(result.data).toEqual(mockResponse);\n>>> 578:       expect(mockAxios.post).toHaveBeenCalledWith('/${entity.pluralName}', ${camelName}Data);\n    579:     });\n    580:   });`);",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 588,
      "type": "mock-keyword",
      "code": "const mockResponse = { id: 1, ...${camelName}Data };",
      "context": "    586:     it('should update ${entity.name.toLowerCase()} successfully', async () => {\n    587:       const ${camelName}Data = { name: 'Updated ${entity.name}' };\n>>> 588:       const mockResponse = { id: 1, ...${camelName}Data };\n    589: \n    590:       mockAxios.put.mockResolvedValueOnce({",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 590,
      "type": "mock-keyword",
      "code": "mockAxios.put.mockResolvedValueOnce({",
      "context": "    588:       const mockResponse = { id: 1, ...${camelName}Data };\n    589: \n>>> 590:       mockAxios.put.mockResolvedValueOnce({\n    591:         data: { item: mockResponse },\n    592:         status: 200,",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 591,
      "type": "mock-keyword",
      "code": "data: { item: mockResponse },",
      "context": "    589: \n    590:       mockAxios.put.mockResolvedValueOnce({\n>>> 591:         data: { item: mockResponse },\n    592:         status: 200,\n    593:         statusText: 'OK',",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 600,
      "type": "mock-keyword",
      "code": "expect(result.data).toEqual(mockResponse);",
      "context": "    598:       const result = await ${camelPlural}.update(1, ${camelName}Data);\n    599: \n>>> 600:       expect(result.data).toEqual(mockResponse);\n    601:       expect(mockAxios.put).toHaveBeenCalledWith('/${entity.pluralName}/1', ${camelName}Data);\n    602:     });",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 601,
      "type": "mock-keyword",
      "code": "expect(mockAxios.put).toHaveBeenCalledWith('/${entity.pluralName}/1', ${camelName}Data);",
      "context": "    599: \n    600:       expect(result.data).toEqual(mockResponse);\n>>> 601:       expect(mockAxios.put).toHaveBeenCalledWith('/${entity.pluralName}/1', ${camelName}Data);\n    602:     });\n    603:   });`);",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 611,
      "type": "mock-keyword",
      "code": "const mockResponse = { id: 1, ...${camelName}Data };",
      "context": "    609:     it('should partially update ${entity.name.toLowerCase()} successfully', async () => {\n    610:       const ${camelName}Data = { name: 'Patched ${entity.name}' };\n>>> 611:       const mockResponse = { id: 1, ...${camelName}Data };\n    612: \n    613:       mockAxios.patch.mockResolvedValueOnce({",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 613,
      "type": "mock-keyword",
      "code": "mockAxios.patch.mockResolvedValueOnce({",
      "context": "    611:       const mockResponse = { id: 1, ...${camelName}Data };\n    612: \n>>> 613:       mockAxios.patch.mockResolvedValueOnce({\n    614:         data: { item: mockResponse },\n    615:         status: 200,",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 614,
      "type": "mock-keyword",
      "code": "data: { item: mockResponse },",
      "context": "    612: \n    613:       mockAxios.patch.mockResolvedValueOnce({\n>>> 614:         data: { item: mockResponse },\n    615:         status: 200,\n    616:         statusText: 'OK',",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 623,
      "type": "mock-keyword",
      "code": "expect(result.data).toEqual(mockResponse);",
      "context": "    621:       const result = await ${camelPlural}.patch(1, ${camelName}Data);\n    622: \n>>> 623:       expect(result.data).toEqual(mockResponse);\n    624:       expect(mockAxios.patch).toHaveBeenCalledWith('/${entity.pluralName}/1', ${camelName}Data);\n    625:     });",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 624,
      "type": "mock-keyword",
      "code": "expect(mockAxios.patch).toHaveBeenCalledWith('/${entity.pluralName}/1', ${camelName}Data);",
      "context": "    622: \n    623:       expect(result.data).toEqual(mockResponse);\n>>> 624:       expect(mockAxios.patch).toHaveBeenCalledWith('/${entity.pluralName}/1', ${camelName}Data);\n    625:     });\n    626:   });`);",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 633,
      "type": "mock-keyword",
      "code": "mockAxios.delete.mockResolvedValueOnce({",
      "context": "    631:       testMethods.push(`  describe('delete', () => {\n    632:     it('should delete ${entity.name.toLowerCase()} successfully', async () => {\n>>> 633:       mockAxios.delete.mockResolvedValueOnce({\n    634:         data: {},\n    635:         status: 200,",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 643,
      "type": "mock-keyword",
      "code": "expect(mockAxios.delete).toHaveBeenCalledWith('/${entity.pluralName}/1');",
      "context": "    641:       await ${camelPlural}.delete(1);\n    642: \n>>> 643:       expect(mockAxios.delete).toHaveBeenCalledWith('/${entity.pluralName}/1');\n    644:     });\n    645:   });`);",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 666,
      "type": "mock-keyword",
      "code": "let mockAxios: jest.Mocked<AxiosInstance>;",
      "context": "    664: describe('${className} Entity', () => {\n    665:   let ${camelPlural}: ${className};\n>>> 666:   let mockAxios: jest.Mocked<AxiosInstance>;\n    667:   let mockLogger: winston.Logger;\n    668: ",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 667,
      "type": "mock-keyword",
      "code": "let mockLogger: winston.Logger;",
      "context": "    665:   let ${camelPlural}: ${className};\n    666:   let mockAxios: jest.Mocked<AxiosInstance>;\n>>> 667:   let mockLogger: winston.Logger;\n    668: \n    669:   beforeEach(() => {",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 670,
      "type": "mock-keyword",
      "code": "mockAxios = {",
      "context": "    668: \n    669:   beforeEach(() => {\n>>> 670:     mockAxios = {\n    671:       get: jest.fn(),\n    672:       post: jest.fn(),",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 688,
      "type": "mock-keyword",
      "code": "mockLogger = winston.createLogger({",
      "context": "    686:     } as any;\n    687: \n>>> 688:     mockLogger = winston.createLogger({\n    689:       level: 'error',\n    690:       transports: [new winston.transports.Console({ silent: true })],",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 693,
      "type": "mock-keyword",
      "code": "${camelPlural} = new ${className}(mockAxios, mockLogger);",
      "context": "    691:     });\n    692: \n>>> 693:     ${camelPlural} = new ${className}(mockAxios, mockLogger);\n    694:   });\n    695: ",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/tools/entity-generator.ts",
      "line": 697,
      "type": "mock-keyword",
      "code": "jest.clearAllMocks();",
      "context": "    695: \n    696:   afterEach(() => {\n>>> 697:     jest.clearAllMocks();\n    698:   });\n    699: ",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/utils/memoryOptimization.ts",
      "line": 32,
      "type": "empty-block",
      "code": "private config: MemoryOptimizationConfig = {}",
      "context": "    30:     private axios: AxiosInstance,\n    31:     private logger: winston.Logger,\n>>> 32:     private config: MemoryOptimizationConfig = {}\n    33:   ) {\n    34:     this.config = { ...this.defaultConfig, ...config };",
      "functionName": "unknown",
      "className": "PaginationHandler",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/utils/queryableEntity.ts",
      "line": 21,
      "type": "empty-block",
      "code": ") {}",
      "context": "    19:     protected axios: AxiosInstance,\n    20:     protected logger: winston.Logger\n>>> 21:   ) {}\n    22: \n    23:   /**",
      "functionName": "unknown",
      "className": "QueryableEntity",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/utils/requestHandler.ts",
      "line": 49,
      "type": "empty-block",
      "code": "private globalOptions: Partial<RequestOptions> = {}",
      "context": "    47:     private axios: AxiosInstance,\n    48:     private logger: winston.Logger,\n>>> 49:     private globalOptions: Partial<RequestOptions> = {}\n    50:   ) {\n    51:     this.performanceMonitor = new PerformanceMonitor(this.logger);",
      "functionName": "unknown",
      "className": "RequestHandler",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/utils/requestHandler.ts",
      "line": 112,
      "type": "empty-block",
      "code": "options: RequestOptions = {}",
      "context": "    110:     endpoint: string,\n    111:     method: string,\n>>> 112:     options: RequestOptions = {}\n    113:   ): Promise<AxiosResponse<T>> {\n    114:     const mergedOptions = {",
      "functionName": "if",
      "className": "RequestHandler",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/validation/compliance/ComplianceValidator.ts",
      "line": 337,
      "type": "not-implemented",
      "code": "message: 'Adequate security measures not implemented',",
      "context": "    335:         field: '__gdpr__',\n    336:         code: 'GDPR_SECURITY_MEASURES',\n>>> 337:         message: 'Adequate security measures not implemented',\n    338:         severity: 'high',\n    339:         category: 'compliance'",
      "functionName": "if",
      "className": null,
      "severity": "high",
      "requiredImplementation": "Implement full functionality according to API specification",
      "estimatedComplexity": "medium",
      "priority": "high"
    },
    {
      "file": "src/validation/quality/QualityAssurance.ts",
      "line": 547,
      "type": "placeholder-keyword",
      "code": "* Calculate uniqueness score (placeholder - requires database access for real implementation)",
      "context": "    545: \n    546:   /**\n>>> 547:    * Calculate uniqueness score (placeholder - requires database access for real implementation)\n    548:    */\n    549:   private async calculateUniqueness(entity: any, context: ValidationContext): Promise<number> {",
      "functionName": "if",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/validation/quality/QualityAssurance.ts",
      "line": 551,
      "type": "placeholder-keyword",
      "code": "// For now, return a high score as placeholder",
      "context": "    549:   private async calculateUniqueness(entity: any, context: ValidationContext): Promise<number> {\n    550:     // This would require checking against existing data\n>>> 551:     // For now, return a high score as placeholder\n    552:     return 95;\n    553:   }",
      "functionName": "calculateUniqueness",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/validation/quality/QualityAssurance.ts",
      "line": 774,
      "type": "comment-marker",
      "code": "// Placeholder implementation",
      "context": "    772: \n    773:   private async identifyQualityIssues(entities: any[], profile: QualityProfile): Promise<QualityIssue[]> {\n>>> 774:     // Placeholder implementation\n    775:     return [];\n    776:   }",
      "functionName": "identifyQualityIssues",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/validation/quality/QualityAssurance.ts",
      "line": 774,
      "type": "placeholder-keyword",
      "code": "// Placeholder implementation",
      "context": "    772: \n    773:   private async identifyQualityIssues(entities: any[], profile: QualityProfile): Promise<QualityIssue[]> {\n>>> 774:     // Placeholder implementation\n    775:     return [];\n    776:   }",
      "functionName": "identifyQualityIssues",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/validation/quality/QualityAssurance.ts",
      "line": 783,
      "type": "comment-marker",
      "code": "// Placeholder implementation",
      "context": "    781:     profile: QualityProfile\n    782:   ): Promise<QualityRecommendation[]> {\n>>> 783:     // Placeholder implementation\n    784:     return [];\n    785:   }",
      "functionName": "identifyQualityIssues",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/validation/quality/QualityAssurance.ts",
      "line": 783,
      "type": "placeholder-keyword",
      "code": "// Placeholder implementation",
      "context": "    781:     profile: QualityProfile\n    782:   ): Promise<QualityRecommendation[]> {\n>>> 783:     // Placeholder implementation\n    784:     return [];\n    785:   }",
      "functionName": "identifyQualityIssues",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/validation/quality/QualityAssurance.ts",
      "line": 788,
      "type": "comment-marker",
      "code": "// Placeholder implementation",
      "context": "    786: \n    787:   private async analyzeTrends(entityType: string): Promise<QualityTrend[]> {\n>>> 788:     // Placeholder implementation\n    789:     return [];\n    790:   }",
      "functionName": "analyzeTrends",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/validation/quality/QualityAssurance.ts",
      "line": 788,
      "type": "placeholder-keyword",
      "code": "// Placeholder implementation",
      "context": "    786: \n    787:   private async analyzeTrends(entityType: string): Promise<QualityTrend[]> {\n>>> 788:     // Placeholder implementation\n    789:     return [];\n    790:   }",
      "functionName": "analyzeTrends",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/validation/quality/QualityAssurance.ts",
      "line": 799,
      "type": "empty-block",
      "code": "vsTargets: {}",
      "context": "    797:       vsIndustry: {},\n    798:       vsHistorical: {},\n>>> 799:       vsTargets: {}\n    800:     };\n    801:   }",
      "functionName": "analyzeTrends",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/validation/quality/QualityAssurance.ts",
      "line": 810,
      "type": "comment-marker",
      "code": "// Placeholder implementation",
      "context": "    808:     config: DuplicateDetectionConfig\n    809:   ): Promise<number> {\n>>> 810:     // Placeholder implementation\n    811:     return 0;\n    812:   }",
      "functionName": "analyzeTrends",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/validation/quality/QualityAssurance.ts",
      "line": 810,
      "type": "placeholder-keyword",
      "code": "// Placeholder implementation",
      "context": "    808:     config: DuplicateDetectionConfig\n    809:   ): Promise<number> {\n>>> 810:     // Placeholder implementation\n    811:     return 0;\n    812:   }",
      "functionName": "analyzeTrends",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/validation/quality/QualityAssurance.ts",
      "line": 874,
      "type": "comment-marker",
      "code": "// Placeholder implementation",
      "context": "    872: \n    873:   private identifyPatterns(values: any[]): Array<{ pattern: string; count: number; percentage: number }> {\n>>> 874:     // Placeholder implementation\n    875:     return [];\n    876:   }",
      "functionName": "identifyPatterns",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/validation/quality/QualityAssurance.ts",
      "line": 874,
      "type": "placeholder-keyword",
      "code": "// Placeholder implementation",
      "context": "    872: \n    873:   private identifyPatterns(values: any[]): Array<{ pattern: string; count: number; percentage: number }> {\n>>> 874:     // Placeholder implementation\n    875:     return [];\n    876:   }",
      "functionName": "identifyPatterns",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/validation/quality/QualityAssurance.ts",
      "line": 879,
      "type": "comment-marker",
      "code": "// Placeholder implementation",
      "context": "    877: \n    878:   private calculateFieldQualityScore(values: any[]): number {\n>>> 879:     // Placeholder implementation\n    880:     return 85;\n    881:   }",
      "functionName": "calculateFieldQualityScore",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/validation/quality/QualityAssurance.ts",
      "line": 879,
      "type": "placeholder-keyword",
      "code": "// Placeholder implementation",
      "context": "    877: \n    878:   private calculateFieldQualityScore(values: any[]): number {\n>>> 879:     // Placeholder implementation\n    880:     return 85;\n    881:   }",
      "functionName": "calculateFieldQualityScore",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/validation/quality/QualityAssurance.ts",
      "line": 884,
      "type": "comment-marker",
      "code": "// Placeholder implementation",
      "context": "    882: \n    883:   private identifyFieldIssues(values: any[]): string[] {\n>>> 884:     // Placeholder implementation\n    885:     return [];\n    886:   }",
      "functionName": "identifyFieldIssues",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/validation/quality/QualityAssurance.ts",
      "line": 884,
      "type": "placeholder-keyword",
      "code": "// Placeholder implementation",
      "context": "    882: \n    883:   private identifyFieldIssues(values: any[]): string[] {\n>>> 884:     // Placeholder implementation\n    885:     return [];\n    886:   }",
      "functionName": "identifyFieldIssues",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/validation/quality/QualityAssurance.ts",
      "line": 935,
      "type": "empty-block",
      "code": "targets: {}",
      "context": "    933:         industry: {},\n    934:         historical: {},\n>>> 935:         targets: {}\n    936:       }\n    937:     };",
      "functionName": "initializeDefaultProfiles",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "src/webhooks/patterns/SynchronizationPatterns.ts",
      "line": 283,
      "type": "mock-keyword",
      "code": "const mockEvent = this.createMockEvent(",
      "context": "    281: \n    282:     for (const config of relevantConfigs) {\n>>> 283:       const mockEvent = this.createMockEvent(\n    284:         externalData,\n    285:         entityType,",
      "functionName": "for",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/webhooks/patterns/SynchronizationPatterns.ts",
      "line": 289,
      "type": "mock-keyword",
      "code": "mockEvent,",
      "context": "    287:       );\n    288:       const result = await this.performSync(\n>>> 289:         mockEvent,\n    290:         config,\n    291:         'from_external',",
      "functionName": "for",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/webhooks/patterns/SynchronizationPatterns.ts",
      "line": 806,
      "type": "mock-keyword",
      "code": "private createMockEvent(",
      "context": "    804:   }\n    805: \n>>> 806:   private createMockEvent(\n    807:     externalData: any,\n    808:     entityType: string,",
      "functionName": "getTargetData",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/webhooks/patterns/SynchronizationPatterns.ts",
      "line": 811,
      "type": "mock-keyword",
      "code": "// Create a mock Autotask event from external data",
      "context": "    809:     entityId: string\n    810:   ): AutotaskWebhookEvent {\n>>> 811:     // Create a mock Autotask event from external data\n    812:     return {\n    813:       id: `mock_${Date.now()}`,",
      "functionName": "getTargetData",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/webhooks/patterns/SynchronizationPatterns.ts",
      "line": 813,
      "type": "mock-keyword",
      "code": "id: `mock_${Date.now()}`,",
      "context": "    811:     // Create a mock Autotask event from external data\n    812:     return {\n>>> 813:       id: `mock_${Date.now()}`,\n    814:       type: 'entity.updated' as any,\n    815:       action: 'update' as any,",
      "functionName": "getTargetData",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "src/webhooks/WebhookManager.ts",
      "line": 671,
      "type": "empty-block",
      "code": "handlerMetrics: {}",
      "context": "    669:         eventsByType: {},\n    670:         eventsByAction: {},\n>>> 671:         handlerMetrics: {}\n    672:       },\n    673:       delivery: deliveryMetrics",
      "functionName": "getMetrics",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "examples/customer-onboarding/src/controllers/OnboardingController.ts",
      "line": 185,
      "type": "mock-keyword",
      "code": "completionTrend: this.generateMockTrendData(),",
      "context": "    183:         trends: {\n    184:           // In a real implementation, these would come from historical data\n>>> 185:           completionTrend: this.generateMockTrendData(),\n    186:           volumeTrend: this.generateMockVolumeData(),\n    187:         },",
      "functionName": "catch",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "examples/customer-onboarding/src/controllers/OnboardingController.ts",
      "line": 186,
      "type": "mock-keyword",
      "code": "volumeTrend: this.generateMockVolumeData(),",
      "context": "    184:           // In a real implementation, these would come from historical data\n    185:           completionTrend: this.generateMockTrendData(),\n>>> 186:           volumeTrend: this.generateMockVolumeData(),\n    187:         },\n    188:       });",
      "functionName": "catch",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "examples/customer-onboarding/src/controllers/OnboardingController.ts",
      "line": 280,
      "type": "mock-keyword",
      "code": "* Generate mock trend data (replace with real data in production)",
      "context": "    278: \n    279:   /**\n>>> 280:    * Generate mock trend data (replace with real data in production)\n    281:    */\n    282:   private generateMockTrendData(): { date: string; completed: number; failed: number }[] {",
      "functionName": "calculateEstimatedCompletion",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "examples/customer-onboarding/src/controllers/OnboardingController.ts",
      "line": 282,
      "type": "mock-keyword",
      "code": "private generateMockTrendData(): { date: string; completed: number; failed: number }[] {",
      "context": "    280:    * Generate mock trend data (replace with real data in production)\n    281:    */\n>>> 282:   private generateMockTrendData(): { date: string; completed: number; failed: number }[] {\n    283:     const data = [];\n    284:     const today = new Date();",
      "functionName": "calculateEstimatedCompletion",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "examples/customer-onboarding/src/controllers/OnboardingController.ts",
      "line": 301,
      "type": "mock-keyword",
      "code": "* Generate mock volume data",
      "context": "    299: \n    300:   /**\n>>> 301:    * Generate mock volume data\n    302:    */\n    303:   private generateMockVolumeData(): { date: string; volume: number }[] {",
      "functionName": "for",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "examples/customer-onboarding/src/controllers/OnboardingController.ts",
      "line": 303,
      "type": "mock-keyword",
      "code": "private generateMockVolumeData(): { date: string; volume: number }[] {",
      "context": "    301:    * Generate mock volume data\n    302:    */\n>>> 303:   private generateMockVolumeData(): { date: string; volume: number }[] {\n    304:     const data = [];\n    305:     const today = new Date();",
      "functionName": "for",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "examples/customer-onboarding/src/types/onboarding.ts",
      "line": 159,
      "type": "placeholder-keyword",
      "code": "template: string; // HTML template with placeholders",
      "context": "    157:   recipientType: 'customer' | 'internal' | 'custom';\n    158:   subject: string;\n>>> 159:   template: string; // HTML template with placeholders\n    160:   isActive: boolean;\n    161: }",
      "functionName": "unknown",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Replace with actual implementation",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "examples/error-recovery-demo.ts",
      "line": 38,
      "type": "mock-keyword",
      "code": "* Mock Autotask Client with controllable failures",
      "context": "    36: \n    37: /**\n>>> 38:  * Mock Autotask Client with controllable failures\n    39:  */\n    40: class MockAutotaskClient {",
      "functionName": "unknown",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "examples/error-recovery-demo.ts",
      "line": 40,
      "type": "mock-keyword",
      "code": "class MockAutotaskClient {",
      "context": "    38:  * Mock Autotask Client with controllable failures\n    39:  */\n>>> 40: class MockAutotaskClient {\n    41:   private failureRate = 0;\n    42:   private latencyMs = 100;",
      "functionName": "unknown",
      "className": "MockAutotaskClient",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "examples/error-recovery-demo.ts",
      "line": 121,
      "type": "mock-keyword",
      "code": "private client: MockAutotaskClient;",
      "context": "    119:  */\n    120: class EnhancedAutotaskProcessor implements QueueProcessor {\n>>> 121:   private client: MockAutotaskClient;\n    122:   private circuitBreaker: Map<string, { failures: number; lastFailure: Date }> = new Map();\n    123:   ",
      "functionName": "getRequestCount",
      "className": "EnhancedAutotaskProcessor",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "examples/error-recovery-demo.ts",
      "line": 124,
      "type": "mock-keyword",
      "code": "constructor(client: MockAutotaskClient) {",
      "context": "    122:   private circuitBreaker: Map<string, { failures: number; lastFailure: Date }> = new Map();\n    123:   \n>>> 124:   constructor(client: MockAutotaskClient) {\n    125:     this.client = client;\n    126:   }",
      "functionName": "constructor",
      "className": "EnhancedAutotaskProcessor",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "examples/error-recovery-demo.ts",
      "line": 228,
      "type": "mock-keyword",
      "code": "private client: MockAutotaskClient;",
      "context": "    226: class DemoScenarioRunner {\n    227:   private queueManager: QueueManager;\n>>> 228:   private client: MockAutotaskClient;\n    229:   private processor: EnhancedAutotaskProcessor;\n    230:   private requestCounter = 0;",
      "functionName": "resetCircuitBreaker",
      "className": "DemoScenarioRunner",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "examples/error-recovery-demo.ts",
      "line": 233,
      "type": "mock-keyword",
      "code": "constructor(queueManager: QueueManager, client: MockAutotaskClient, processor: EnhancedAutotaskProcessor) {",
      "context": "    231:   private scenarioRunning = false;\n    232:   \n>>> 233:   constructor(queueManager: QueueManager, client: MockAutotaskClient, processor: EnhancedAutotaskProcessor) {\n    234:     this.queueManager = queueManager;\n    235:     this.client = client;",
      "functionName": "constructor",
      "className": "DemoScenarioRunner",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "examples/error-recovery-demo.ts",
      "line": 287,
      "type": "empty-block",
      "code": "options: any = {}",
      "context": "    285:     endpoint: string, \n    286:     method: 'GET' | 'POST' | 'PUT' | 'DELETE' = 'GET',\n>>> 287:     options: any = {}\n    288:   ): Promise<void> {\n    289:     this.requestCounter++;",
      "functionName": "reportMetrics",
      "className": "DemoScenarioRunner",
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "examples/error-recovery-demo.ts",
      "line": 568,
      "type": "mock-keyword",
      "code": "const mockClient = new MockAutotaskClient();",
      "context": "    566:     // Initialize components\n    567:     const queueManager = new QueueManager({ config, logger });\n>>> 568:     const mockClient = new MockAutotaskClient();\n    569:     const processor = new EnhancedAutotaskProcessor(mockClient);\n    570:     ",
      "functionName": "runErrorRecoveryDemo",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "examples/error-recovery-demo.ts",
      "line": 569,
      "type": "mock-keyword",
      "code": "const processor = new EnhancedAutotaskProcessor(mockClient);",
      "context": "    567:     const queueManager = new QueueManager({ config, logger });\n    568:     const mockClient = new MockAutotaskClient();\n>>> 569:     const processor = new EnhancedAutotaskProcessor(mockClient);\n    570:     \n    571:     // Register processor",
      "functionName": "runErrorRecoveryDemo",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "examples/error-recovery-demo.ts",
      "line": 580,
      "type": "mock-keyword",
      "code": "const demoRunner = new DemoScenarioRunner(queueManager, mockClient, processor);",
      "context": "    578:     \n    579:     // Create and run demo scenarios\n>>> 580:     const demoRunner = new DemoScenarioRunner(queueManager, mockClient, processor);\n    581:     await demoRunner.runAllScenarios();\n    582:     ",
      "functionName": "runErrorRecoveryDemo",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "examples/error-recovery-demo.ts",
      "line": 611,
      "type": "mock-keyword",
      "code": "MockAutotaskClient",
      "context": "    609:   DemoScenarioRunner,\n    610:   EnhancedAutotaskProcessor,\n>>> 611:   MockAutotaskClient\n    612: };",
      "functionName": "if",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "examples/query-builder-demo.ts",
      "line": 31,
      "type": "comment-marker",
      "code": "// Note: This is a conceptual demo showing query builder API",
      "context": "    29: \n    30:   // Get enhanced tickets entity with query capabilities\n>>> 31:   // Note: This is a conceptual demo showing query builder API\n    32:   // In practice, you would use client.tickets or extend entities appropriately\n    33:   console.log(",
      "functionName": "demonstrateQueryBuilder",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "examples/query-builder-demo.ts",
      "line": 37,
      "type": "mock-keyword",
      "code": "// For demo purposes, we'll create a mock tickets object with query methods",
      "context": "    35:   );\n    36: \n>>> 37:   // For demo purposes, we'll create a mock tickets object with query methods\n    38:   const tickets = {\n    39:     query: () =>",
      "functionName": "demonstrateQueryBuilder",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "examples/ticket-dashboard/src/controllers/DashboardController.ts",
      "line": 310,
      "type": "mock-keyword",
      "code": "// Mock system health data",
      "context": "    308:   getSystemHealth = asyncHandler(async (req: Request, res: Response) => {\n    309:     try {\n>>> 310:       // Mock system health data\n    311:       const health = {\n    312:         status: 'healthy',",
      "functionName": "catch",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "examples/ticket-dashboard/src/services/DashboardService.ts",
      "line": 208,
      "type": "mock-keyword",
      "code": "? Math.random() * 20 + 80 // Mock: 80-100%",
      "context": "    206:       // Calculate SLA compliance (simplified)\n    207:       const slaComplianceRate = completedTickets.length > 0 \n>>> 208:         ? Math.random() * 20 + 80 // Mock: 80-100%\n    209:         : 0;\n    210: ",
      "functionName": "if",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "examples/ticket-dashboard/src/services/DashboardService.ts",
      "line": 360,
      "type": "mock-keyword",
      "code": "// Mock some values for demo",
      "context": "    358:         }\n    359: \n>>> 360:         // Mock some values for demo\n    361:         const slaComplianceRate = 85 + Math.random() * 15; // 85-100%\n    362:         const utilizationRate = 60 + Math.random() * 35; // 60-95%",
      "functionName": "if",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "examples/ticket-dashboard/src/services/DashboardService.ts",
      "line": 434,
      "type": "mock-keyword",
      "code": "// Mock trend data - in production, this would query historical data",
      "context": "    432:         const dateString = date.toISOString().split('T')[0];\n    433: \n>>> 434:         // Mock trend data - in production, this would query historical data\n    435:         trends.ticketsCreatedTrend.push({\n    436:           date: dateString,",
      "functionName": "for",
      "className": null,
      "severity": "low",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "low"
    },
    {
      "file": "examples/validation-demo.ts",
      "line": 369,
      "type": "comment-marker",
      "code": "// Note: This demo shows the API structure but won't make actual API calls",
      "context": "    367:   console.log('\\n=== Demo 5: Full Integration with ValidatedAutotaskClient ===\\n');\n    368:   \n>>> 369:   // Note: This demo shows the API structure but won't make actual API calls\n    370:   // In a real scenario, you would provide valid Autotask credentials\n    371:   ",
      "functionName": "demoFullIntegration",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Address TODO/FIXME comment",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "examples/validation-demo.ts",
      "line": 372,
      "type": "mock-keyword",
      "code": "const mockAuth = {",
      "context": "    370:   // In a real scenario, you would provide valid Autotask credentials\n    371:   \n>>> 372:   const mockAuth = {\n    373:     username: 'demo-user',\n    374:     integrationCode: 'demo-integration',",
      "functionName": "demoFullIntegration",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "examples/validation-demo.ts",
      "line": 401,
      "type": "mock-keyword",
      "code": "auth: mockAuth,",
      "context": "    399:   console.log('🔧 Creating ValidatedAutotaskClient...');\n    400:   const validatedClient = new ValidatedAutotaskClient({\n>>> 401:     auth: mockAuth,\n    402:     enableValidation: true,\n    403:     enableSanitization: true,",
      "functionName": "demoFullIntegration",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "examples/validation-demo.ts",
      "line": 451,
      "type": "mock-keyword",
      "code": "const mockValidationResult = await ValidationUtils.validateEntity(newAccount, 'Account', 'create');",
      "context": "    449:   try {\n    450:     // Simulate the validation that would occur\n>>> 451:     const mockValidationResult = await ValidationUtils.validateEntity(newAccount, 'Account', 'create');\n    452:     \n    453:     console.log('Validation Summary:');",
      "functionName": "unknown",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "examples/validation-demo.ts",
      "line": 454,
      "type": "mock-keyword",
      "code": "console.log(`- Overall result: ${mockValidationResult.isValid ? 'VALID' : 'INVALID'}`);",
      "context": "    452:     \n    453:     console.log('Validation Summary:');\n>>> 454:     console.log(`- Overall result: ${mockValidationResult.isValid ? 'VALID' : 'INVALID'}`);\n    455:     console.log(`- Errors detected: ${mockValidationResult.errors.length}`);\n    456:     console.log(`- Warnings issued: ${mockValidationResult.warnings.length}`);",
      "functionName": "unknown",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "examples/validation-demo.ts",
      "line": 455,
      "type": "mock-keyword",
      "code": "console.log(`- Errors detected: ${mockValidationResult.errors.length}`);",
      "context": "    453:     console.log('Validation Summary:');\n    454:     console.log(`- Overall result: ${mockValidationResult.isValid ? 'VALID' : 'INVALID'}`);\n>>> 455:     console.log(`- Errors detected: ${mockValidationResult.errors.length}`);\n    456:     console.log(`- Warnings issued: ${mockValidationResult.warnings.length}`);\n    457:     console.log(`- Data sanitized: ${mockValidationResult.sanitizedData ? 'YES' : 'NO'}`);",
      "functionName": "unknown",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "examples/validation-demo.ts",
      "line": 456,
      "type": "mock-keyword",
      "code": "console.log(`- Warnings issued: ${mockValidationResult.warnings.length}`);",
      "context": "    454:     console.log(`- Overall result: ${mockValidationResult.isValid ? 'VALID' : 'INVALID'}`);\n    455:     console.log(`- Errors detected: ${mockValidationResult.errors.length}`);\n>>> 456:     console.log(`- Warnings issued: ${mockValidationResult.warnings.length}`);\n    457:     console.log(`- Data sanitized: ${mockValidationResult.sanitizedData ? 'YES' : 'NO'}`);\n    458:     ",
      "functionName": "unknown",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "examples/validation-demo.ts",
      "line": 457,
      "type": "mock-keyword",
      "code": "console.log(`- Data sanitized: ${mockValidationResult.sanitizedData ? 'YES' : 'NO'}`);",
      "context": "    455:     console.log(`- Errors detected: ${mockValidationResult.errors.length}`);\n    456:     console.log(`- Warnings issued: ${mockValidationResult.warnings.length}`);\n>>> 457:     console.log(`- Data sanitized: ${mockValidationResult.sanitizedData ? 'YES' : 'NO'}`);\n    458:     \n    459:     if (mockValidationResult.sanitizedData) {",
      "functionName": "unknown",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "examples/validation-demo.ts",
      "line": 459,
      "type": "mock-keyword",
      "code": "if (mockValidationResult.sanitizedData) {",
      "context": "    457:     console.log(`- Data sanitized: ${mockValidationResult.sanitizedData ? 'YES' : 'NO'}`);\n    458:     \n>>> 459:     if (mockValidationResult.sanitizedData) {\n    460:       console.log('\\nSanitization Results:');\n    461:       console.log(`- Original: ${newAccount.accountName}`);",
      "functionName": "if",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    },
    {
      "file": "examples/validation-demo.ts",
      "line": 462,
      "type": "mock-keyword",
      "code": "console.log(`- Sanitized: ${mockValidationResult.sanitizedData.accountName}`);",
      "context": "    460:       console.log('\\nSanitization Results:');\n    461:       console.log(`- Original: ${newAccount.accountName}`);\n>>> 462:       console.log(`- Sanitized: ${mockValidationResult.sanitizedData.accountName}`);\n    463:     }\n    464: ",
      "functionName": "if",
      "className": null,
      "severity": "medium",
      "requiredImplementation": "Review and implement required functionality",
      "estimatedComplexity": "low",
      "priority": "medium"
    }
  ]
}